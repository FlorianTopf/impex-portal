// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package models.binding

//additional manual imports
import scala.language.postfixOps

/**
usage:
val obj = scalaxb.fromXML[models.binding.Foo](node)
val document = scalaxb.toXML[models.binding.Foo](obj, "foo", models.binding.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://www.w3.org/XML/1998/namespace",
    Some("imp") -> "http://www.impex.org/2012/configuration.xsd",
    Some("tns") -> "http://impex-fp7.oeaw.ac.at",
    Some("xml") -> "http://www.w3.org/XML/1998/namespace",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val BindingIdoptFormat: scalaxb.AttributeGroupFormat[models.binding.Idopt] = new DefaultBindingIdoptFormat {}
  implicit lazy val BindingIdFormat: scalaxb.AttributeGroupFormat[models.binding.Id] = new DefaultBindingIdFormat {}
  implicit lazy val BindingIduriFormat: scalaxb.AttributeGroupFormat[models.binding.Iduri] = new DefaultBindingIduriFormat {}
  implicit lazy val BindingDataRootFormat: scalaxb.XMLFormat[models.binding.DataRoot] = new DefaultBindingDataRootFormat {}
  implicit lazy val BindingDataCenterFormat: scalaxb.XMLFormat[models.binding.DataCenter] = new DefaultBindingDataCenterFormat {}
  implicit lazy val BindingSimulationModelFormat: scalaxb.XMLFormat[models.binding.SimulationModel] = new DefaultBindingSimulationModelFormat {}
  implicit lazy val BindingRunIDFormat: scalaxb.XMLFormat[models.binding.RunID] = new DefaultBindingRunIDFormat {}
  implicit lazy val BindingMissionFormat: scalaxb.XMLFormat[models.binding.Mission] = new DefaultBindingMissionFormat {}
  implicit lazy val BindingMeasurementTypeFormat: scalaxb.XMLFormat[models.binding.MeasurementType] = new DefaultBindingMeasurementTypeFormat {}
  implicit lazy val BindingInstrumentFormat: scalaxb.XMLFormat[models.binding.Instrument] = new DefaultBindingInstrumentFormat {}
  implicit lazy val BindingDatasetFormat: scalaxb.XMLFormat[models.binding.Dataset] = new DefaultBindingDatasetFormat {}
  implicit lazy val BindingParameterFormat: scalaxb.XMLFormat[models.binding.Parameter] = new DefaultBindingParameterFormat {}
  implicit lazy val BindingComponentFormat: scalaxb.XMLFormat[models.binding.Component] = new DefaultBindingComponentFormat {}
  implicit lazy val BindingDatabaseFormat: scalaxb.XMLFormat[models.binding.Database] = new DefaultBindingDatabaseFormat {}
  implicit lazy val BindingToolFormat: scalaxb.XMLFormat[models.binding.Tool] = new DefaultBindingToolFormat {}
  implicit lazy val BindingImpexconfigurationFormat: scalaxb.XMLFormat[models.binding.Impexconfiguration] = new DefaultBindingImpexconfigurationFormat {}
  implicit lazy val BindingDatabasetypeFormat: scalaxb.XMLFormat[models.binding.Databasetype] = new DefaultBindingDatabasetypeFormat {}
  implicit lazy val BindingSpaseFormat: scalaxb.XMLFormat[models.binding.Spase] = new DefaultBindingSpaseFormat {}
  implicit lazy val BindingCatalogFormat: scalaxb.XMLFormat[models.binding.Catalog] = new DefaultBindingCatalogFormat {}
  implicit lazy val BindingResourceHeaderFormat: scalaxb.XMLFormat[models.binding.ResourceHeader] = new DefaultBindingResourceHeaderFormat {}
  implicit lazy val BindingContactFormat: scalaxb.XMLFormat[models.binding.Contact] = new DefaultBindingContactFormat {}
  implicit lazy val BindingInformationURLFormat: scalaxb.XMLFormat[models.binding.InformationURL] = new DefaultBindingInformationURLFormat {}
  implicit lazy val BindingAssociationFormat: scalaxb.XMLFormat[models.binding.Association] = new DefaultBindingAssociationFormat {}
  implicit lazy val BindingAccessInformationFormat: scalaxb.XMLFormat[models.binding.AccessInformation] = new DefaultBindingAccessInformationFormat {}
  implicit lazy val BindingAccessURLFormat: scalaxb.XMLFormat[models.binding.AccessURL] = new DefaultBindingAccessURLFormat {}
  implicit lazy val BindingDataExtentFormat: scalaxb.XMLFormat[models.binding.DataExtent] = new DefaultBindingDataExtentFormat {}
  implicit lazy val BindingTimeSpanFormat: scalaxb.XMLFormat[models.binding.TimeSpan] = new DefaultBindingTimeSpanFormat {}
  implicit lazy val BindingParameterTypeFormat: scalaxb.XMLFormat[models.binding.ParameterType] = new DefaultBindingParameterTypeFormat {}
  implicit lazy val BindingCoordinateSystemFormat: scalaxb.XMLFormat[models.binding.CoordinateSystem] = new DefaultBindingCoordinateSystemFormat {}
  implicit lazy val BindingRenderingHintsFormat: scalaxb.XMLFormat[models.binding.RenderingHints] = new DefaultBindingRenderingHintsFormat {}
  implicit lazy val BindingStructureFormat: scalaxb.XMLFormat[models.binding.Structure] = new DefaultBindingStructureFormat {}
  implicit lazy val BindingElementFormat: scalaxb.XMLFormat[models.binding.Element] = new DefaultBindingElementFormat {}
  implicit lazy val BindingFieldFormat: scalaxb.XMLFormat[models.binding.Field] = new DefaultBindingFieldFormat {}
  implicit lazy val BindingFrequencyRangeFormat: scalaxb.XMLFormat[models.binding.FrequencyRange] = new DefaultBindingFrequencyRangeFormat {}
  implicit lazy val BindingBinFormat: scalaxb.XMLFormat[models.binding.Bin] = new DefaultBindingBinFormat {}
  implicit lazy val BindingEnergyRangeFormat: scalaxb.XMLFormat[models.binding.EnergyRange] = new DefaultBindingEnergyRangeFormat {}
  implicit lazy val BindingAzimuthalAngleRangeFormat: scalaxb.XMLFormat[models.binding.AzimuthalAngleRange] = new DefaultBindingAzimuthalAngleRangeFormat {}
  implicit lazy val BindingPolarAngleRangeFormat: scalaxb.XMLFormat[models.binding.PolarAngleRange] = new DefaultBindingPolarAngleRangeFormat {}
  implicit lazy val BindingWaveFormat: scalaxb.XMLFormat[models.binding.Wave] = new DefaultBindingWaveFormat {}
  implicit lazy val BindingWavelengthRangeFormat: scalaxb.XMLFormat[models.binding.WavelengthRange] = new DefaultBindingWavelengthRangeFormat {}
  implicit lazy val BindingMixedFormat: scalaxb.XMLFormat[models.binding.Mixed] = new DefaultBindingMixedFormat {}
  implicit lazy val BindingSupportFormat: scalaxb.XMLFormat[models.binding.Support] = new DefaultBindingSupportFormat {}
  implicit lazy val BindingExtensionFormat: scalaxb.XMLFormat[models.binding.Extension] = new DefaultBindingExtensionFormat {}
  implicit lazy val BindingDisplayDataFormat: scalaxb.XMLFormat[models.binding.DisplayData] = new DefaultBindingDisplayDataFormat {}
  implicit lazy val BindingTemporalDescriptionFormat: scalaxb.XMLFormat[models.binding.TemporalDescription] = new DefaultBindingTemporalDescriptionFormat {}
  implicit lazy val BindingNumericalDataFormat: scalaxb.XMLFormat[models.binding.NumericalData] = new DefaultBindingNumericalDataFormat {}
  implicit lazy val BindingDocumentFormat: scalaxb.XMLFormat[models.binding.Document] = new DefaultBindingDocumentFormat {}
  implicit lazy val BindingSourceFormat: scalaxb.XMLFormat[models.binding.Source] = new DefaultBindingSourceFormat {}
  implicit lazy val BindingChecksumFormat: scalaxb.XMLFormat[models.binding.Checksum] = new DefaultBindingChecksumFormat {}
  implicit lazy val BindingInstrumentTypeFormat: scalaxb.XMLFormat[models.binding.InstrumentType] = new DefaultBindingInstrumentTypeFormat {}
  implicit lazy val BindingOperatingSpanFormat: scalaxb.XMLFormat[models.binding.OperatingSpan] = new DefaultBindingOperatingSpanFormat {}
  implicit lazy val BindingObservatoryFormat: scalaxb.XMLFormat[models.binding.Observatory] = new DefaultBindingObservatoryFormat {}
  implicit lazy val BindingLocationFormat: scalaxb.XMLFormat[models.binding.Location] = new DefaultBindingLocationFormat {}
  implicit lazy val BindingPersonFormat: scalaxb.XMLFormat[models.binding.Person] = new DefaultBindingPersonFormat {}
  implicit lazy val BindingRegistryFormat: scalaxb.XMLFormat[models.binding.Registry] = new DefaultBindingRegistryFormat {}
  implicit lazy val BindingRepositoryFormat: scalaxb.XMLFormat[models.binding.Repository] = new DefaultBindingRepositoryFormat {}
  implicit lazy val BindingServiceFormat: scalaxb.XMLFormat[models.binding.Service] = new DefaultBindingServiceFormat {}
  implicit lazy val BindingAnnotationFormat: scalaxb.XMLFormat[models.binding.Annotation] = new DefaultBindingAnnotationFormat {}
  implicit lazy val BindingObservationExtentFormat: scalaxb.XMLFormat[models.binding.ObservationExtent] = new DefaultBindingObservationExtentFormat {}
  implicit lazy val BindingEnumVersionFormat: scalaxb.XMLFormat[models.binding.EnumVersion] = new DefaultBindingEnumVersionFormat {}
  implicit lazy val BindingEnumAccessRightsFormat: scalaxb.XMLFormat[models.binding.EnumAccessRights] = new DefaultBindingEnumAccessRightsFormat {}
  implicit lazy val BindingEnumAnnotationTypeFormat: scalaxb.XMLFormat[models.binding.EnumAnnotationType] = new DefaultBindingEnumAnnotationTypeFormat {}
  implicit lazy val BindingEnumAssociationTypeFormat: scalaxb.XMLFormat[models.binding.EnumAssociationType] = new DefaultBindingEnumAssociationTypeFormat {}
  implicit lazy val BindingEnumAvailabilityFormat: scalaxb.XMLFormat[models.binding.EnumAvailability] = new DefaultBindingEnumAvailabilityFormat {}
  implicit lazy val BindingEnumClassificationMethodFormat: scalaxb.XMLFormat[models.binding.EnumClassificationMethod] = new DefaultBindingEnumClassificationMethodFormat {}
  implicit lazy val BindingEnumComponentFormat: scalaxb.XMLFormat[models.binding.EnumComponent] = new DefaultBindingEnumComponentFormat {}
  implicit lazy val BindingEnumConfidenceRatingFormat: scalaxb.XMLFormat[models.binding.EnumConfidenceRating] = new DefaultBindingEnumConfidenceRatingFormat {}
  implicit lazy val BindingEnumCoordinateRepresentationFormat: scalaxb.XMLFormat[models.binding.EnumCoordinateRepresentation] = new DefaultBindingEnumCoordinateRepresentationFormat {}
  implicit lazy val BindingEnumCoordinateSystemNameFormat: scalaxb.XMLFormat[models.binding.EnumCoordinateSystemName] = new DefaultBindingEnumCoordinateSystemNameFormat {}
  implicit lazy val BindingEnumDirectionAngleFormat: scalaxb.XMLFormat[models.binding.EnumDirectionAngle] = new DefaultBindingEnumDirectionAngleFormat {}
  implicit lazy val BindingEnumDisplayTypeFormat: scalaxb.XMLFormat[models.binding.EnumDisplayType] = new DefaultBindingEnumDisplayTypeFormat {}
  implicit lazy val BindingEnumDocumentTypeFormat: scalaxb.XMLFormat[models.binding.EnumDocumentType] = new DefaultBindingEnumDocumentTypeFormat {}
  implicit lazy val BindingEnumEarthFormat: scalaxb.XMLFormat[models.binding.EnumEarth] = new DefaultBindingEnumEarthFormat {}
  implicit lazy val BindingEnumEncodingFormat: scalaxb.XMLFormat[models.binding.EnumEncoding] = new DefaultBindingEnumEncodingFormat {}
  implicit lazy val BindingEnumFieldQuantityFormat: scalaxb.XMLFormat[models.binding.EnumFieldQuantity] = new DefaultBindingEnumFieldQuantityFormat {}
  implicit lazy val BindingEnumFormatFormat: scalaxb.XMLFormat[models.binding.EnumFormat] = new DefaultBindingEnumFormatFormat {}
  implicit lazy val BindingEnumHardcopyFormat: scalaxb.XMLFormat[models.binding.EnumHardcopy] = new DefaultBindingEnumHardcopyFormat {}
  implicit lazy val BindingEnumHashFunctionFormat: scalaxb.XMLFormat[models.binding.EnumHashFunction] = new DefaultBindingEnumHashFunctionFormat {}
  implicit lazy val BindingEnumHeliosphereFormat: scalaxb.XMLFormat[models.binding.EnumHeliosphere] = new DefaultBindingEnumHeliosphereFormat {}
  implicit lazy val BindingEnumInstrumentTypeFormat: scalaxb.XMLFormat[models.binding.EnumInstrumentType] = new DefaultBindingEnumInstrumentTypeFormat {}
  implicit lazy val BindingEnumIntegralFormat: scalaxb.XMLFormat[models.binding.EnumIntegral] = new DefaultBindingEnumIntegralFormat {}
  implicit lazy val BindingEnumIonosphereFormat: scalaxb.XMLFormat[models.binding.EnumIonosphere] = new DefaultBindingEnumIonosphereFormat {}
  implicit lazy val BindingEnumMagnetosphereFormat: scalaxb.XMLFormat[models.binding.EnumMagnetosphere] = new DefaultBindingEnumMagnetosphereFormat {}
  implicit lazy val BindingEnumMeasurementTypeFormat: scalaxb.XMLFormat[models.binding.EnumMeasurementType] = new DefaultBindingEnumMeasurementTypeFormat {}
  implicit lazy val BindingEnumMixedQuantityFormat: scalaxb.XMLFormat[models.binding.EnumMixedQuantity] = new DefaultBindingEnumMixedQuantityFormat {}
  implicit lazy val BindingEnumNearSurfaceFormat: scalaxb.XMLFormat[models.binding.EnumNearSurface] = new DefaultBindingEnumNearSurfaceFormat {}
  implicit lazy val BindingEnumParticleQuantityFormat: scalaxb.XMLFormat[models.binding.EnumParticleQuantity] = new DefaultBindingEnumParticleQuantityFormat {}
  implicit lazy val BindingEnumParticleTypeFormat: scalaxb.XMLFormat[models.binding.EnumParticleType] = new DefaultBindingEnumParticleTypeFormat {}
  implicit lazy val BindingEnumPhenomenonTypeFormat: scalaxb.XMLFormat[models.binding.EnumPhenomenonType] = new DefaultBindingEnumPhenomenonTypeFormat {}
  implicit lazy val BindingEnumProcessingLevelFormat: scalaxb.XMLFormat[models.binding.EnumProcessingLevel] = new DefaultBindingEnumProcessingLevelFormat {}
  implicit lazy val BindingEnumProjectionFormat: scalaxb.XMLFormat[models.binding.EnumProjection] = new DefaultBindingEnumProjectionFormat {}
  implicit lazy val BindingEnumImpexSpecialRegionFormat: scalaxb.XMLFormat[models.binding.EnumImpexSpecialRegion] = new DefaultBindingEnumImpexSpecialRegionFormat {}
  implicit lazy val BindingEnumQualifierFormat: scalaxb.XMLFormat[models.binding.EnumQualifier] = new DefaultBindingEnumQualifierFormat {}
  implicit lazy val BindingEnumRegionFormat: scalaxb.XMLFormat[models.binding.EnumRegion] = new DefaultBindingEnumRegionFormat {}
  implicit lazy val BindingEnumRenderingAxisFormat: scalaxb.XMLFormat[models.binding.EnumRenderingAxis] = new DefaultBindingEnumRenderingAxisFormat {}
  implicit lazy val BindingEnumRoleFormat: scalaxb.XMLFormat[models.binding.EnumRole] = new DefaultBindingEnumRoleFormat {}
  implicit lazy val BindingEnumScaleTypeFormat: scalaxb.XMLFormat[models.binding.EnumScaleType] = new DefaultBindingEnumScaleTypeFormat {}
  implicit lazy val BindingEnumSourceTypeFormat: scalaxb.XMLFormat[models.binding.EnumSourceType] = new DefaultBindingEnumSourceTypeFormat {}
  implicit lazy val BindingEnumSpectralRangeFormat: scalaxb.XMLFormat[models.binding.EnumSpectralRange] = new DefaultBindingEnumSpectralRangeFormat {}
  implicit lazy val BindingEnumSunFormat: scalaxb.XMLFormat[models.binding.EnumSun] = new DefaultBindingEnumSunFormat {}
  implicit lazy val BindingEnumSupportQuantityFormat: scalaxb.XMLFormat[models.binding.EnumSupportQuantity] = new DefaultBindingEnumSupportQuantityFormat {}
  implicit lazy val BindingEnumTextFormat: scalaxb.XMLFormat[models.binding.EnumText] = new DefaultBindingEnumTextFormat {}
  implicit lazy val BindingEnumWaveQuantityFormat: scalaxb.XMLFormat[models.binding.EnumWaveQuantity] = new DefaultBindingEnumWaveQuantityFormat {}
  implicit lazy val BindingEnumWaveTypeFormat: scalaxb.XMLFormat[models.binding.EnumWaveType] = new DefaultBindingEnumWaveTypeFormat {}
  implicit lazy val BindingEnumWavesFormat: scalaxb.XMLFormat[models.binding.EnumWaves] = new DefaultBindingEnumWavesFormat {}
  implicit lazy val BindingGranuleFormat: scalaxb.XMLFormat[models.binding.Granule] = new DefaultBindingGranuleFormat {}
  implicit lazy val BindingNumericalOutputFormat: scalaxb.XMLFormat[models.binding.NumericalOutput] = new DefaultBindingNumericalOutputFormat {}
  implicit lazy val BindingDisplayOutputFormat: scalaxb.XMLFormat[models.binding.DisplayOutput] = new DefaultBindingDisplayOutputFormat {}
  implicit lazy val BindingSimulationModelTypeFormat: scalaxb.XMLFormat[models.binding.SimulationModelType] = new DefaultBindingSimulationModelTypeFormat {}
  implicit lazy val BindingInputPropertiesFormat: scalaxb.XMLFormat[models.binding.InputProperties] = new DefaultBindingInputPropertiesFormat {}
  implicit lazy val BindingOutputParametersFormat: scalaxb.XMLFormat[models.binding.OutputParameters] = new DefaultBindingOutputParametersFormat {}
  implicit lazy val BindingSimulationRunFormat: scalaxb.XMLFormat[models.binding.SimulationRun] = new DefaultBindingSimulationRunFormat {}
  implicit lazy val BindingModelFormat: scalaxb.XMLFormat[models.binding.Model] = new DefaultBindingModelFormat {}
  implicit lazy val BindingModelVersionFormat: scalaxb.XMLFormat[models.binding.ModelVersion] = new DefaultBindingModelVersionFormat {}
  implicit lazy val BindingVersionsFormat: scalaxb.XMLFormat[models.binding.Versions] = new DefaultBindingVersionsFormat {}
  implicit lazy val BindingRegionParameterFormat: scalaxb.XMLFormat[models.binding.RegionParameter] = new DefaultBindingRegionParameterFormat {}
  implicit lazy val BindingInputParameterFormat: scalaxb.XMLFormat[models.binding.InputParameter] = new DefaultBindingInputParameterFormat {}
  implicit lazy val BindingPropertyFormat: scalaxb.XMLFormat[models.binding.Property] = new DefaultBindingPropertyFormat {}
  implicit lazy val BindingInputPopulationFormat: scalaxb.XMLFormat[models.binding.InputPopulation] = new DefaultBindingInputPopulationFormat {}
  implicit lazy val BindingInputPopulationSequence3Format: scalaxb.XMLFormat[models.binding.InputPopulationSequence3] = new DefaultBindingInputPopulationSequence3Format {}
  implicit lazy val BindingInputPopulationSequence2Format: scalaxb.XMLFormat[models.binding.InputPopulationSequence2] = new DefaultBindingInputPopulationSequence2Format {}
  implicit lazy val BindingInputPopulationSequence1Format: scalaxb.XMLFormat[models.binding.InputPopulationSequence1] = new DefaultBindingInputPopulationSequence1Format {}
  implicit lazy val BindingInputFieldFormat: scalaxb.XMLFormat[models.binding.InputField] = new DefaultBindingInputFieldFormat {}
  implicit lazy val BindingInputProcessFormat: scalaxb.XMLFormat[models.binding.InputProcess] = new DefaultBindingInputProcessFormat {}
  implicit lazy val BindingSimulationDomainFormat: scalaxb.XMLFormat[models.binding.SimulationDomain] = new DefaultBindingSimulationDomainFormat {}
  implicit lazy val BindingBoundaryConditionsFormat: scalaxb.XMLFormat[models.binding.BoundaryConditions] = new DefaultBindingBoundaryConditionsFormat {}
  implicit lazy val BindingSimulationTimeFormat: scalaxb.XMLFormat[models.binding.SimulationTime] = new DefaultBindingSimulationTimeFormat {}
  implicit lazy val BindingDiagnosisTimeStepFormat: scalaxb.XMLFormat[models.binding.DiagnosisTimeStep] = new DefaultBindingDiagnosisTimeStepFormat {}
  implicit lazy val BindingElementBoundaryFormat: scalaxb.XMLFormat[models.binding.ElementBoundary] = new DefaultBindingElementBoundaryFormat {}
  implicit lazy val BindingSpatialDescriptionFormat: scalaxb.XMLFormat[models.binding.SpatialDescription] = new DefaultBindingSpatialDescriptionFormat {}
  implicit lazy val BindingEnumProcessTypeFormat: scalaxb.XMLFormat[models.binding.EnumProcessType] = new DefaultBindingEnumProcessTypeFormat {}
  implicit lazy val BindingEnumProcCoefTypeFormat: scalaxb.XMLFormat[models.binding.EnumProcCoefType] = new DefaultBindingEnumProcCoefTypeFormat {}
  implicit lazy val BindingEnumSymmetryFormat: scalaxb.XMLFormat[models.binding.EnumSymmetry] = new DefaultBindingEnumSymmetryFormat {}
  implicit lazy val BindingEnumYNFormat: scalaxb.XMLFormat[models.binding.EnumYN] = new DefaultBindingEnumYNFormat {}
  implicit lazy val BindingEnumSimulationTypeFormat: scalaxb.XMLFormat[models.binding.EnumSimulationType] = new DefaultBindingEnumSimulationTypeFormat {}
  implicit lazy val BindingEnumProductFormat: scalaxb.XMLFormat[models.binding.EnumProduct] = new DefaultBindingEnumProductFormat {}
  implicit lazy val BindingEnumImpexQuantityFormat: scalaxb.XMLFormat[models.binding.EnumImpexQuantity] = new DefaultBindingEnumImpexQuantityFormat {}
  implicit lazy val BindingParticleFormat: scalaxb.XMLFormat[models.binding.Particle] = new DefaultBindingParticleFormat {}
  implicit lazy val BindingInputValueFormat: scalaxb.XMLFormat[models.binding.InputValue] = new DefaultBindingInputValueFormat {}
  implicit lazy val BindingCubesDescriptionSequenceFormat: scalaxb.XMLFormat[models.binding.CubesDescriptionSequence] = new DefaultBindingCubesDescriptionSequenceFormat {}
  implicit lazy val BindingCutsDescriptionSequenceFormat: scalaxb.XMLFormat[models.binding.CutsDescriptionSequence] = new DefaultBindingCutsDescriptionSequenceFormat {}

  trait DefaultBindingIdoptFormat extends scalaxb.AttributeGroupFormat[models.binding.Idopt] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/XML/1998/namespace")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Idopt] = seq match {
      case node: scala.xml.Node => Right(models.binding.Idopt((node \ "@{http://www.w3.org/XML/1998/namespace}id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def toAttribute(__obj: models.binding.Idopt, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = __attr
      __obj.id foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", x.toString, attr) }
      attr
    }
  }

  trait DefaultBindingIdFormat extends scalaxb.AttributeGroupFormat[models.binding.Id] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/XML/1998/namespace")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Id] = seq match {
      case node: scala.xml.Node => Right(models.binding.Id(scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def toAttribute(__obj: models.binding.Id, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = __attr
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }
  }

  trait DefaultBindingIduriFormat extends scalaxb.AttributeGroupFormat[models.binding.Iduri] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/XML/1998/namespace")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Iduri] = seq match {
      case node: scala.xml.Node => Right(models.binding.Iduri(scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def toAttribute(__obj: models.binding.Iduri, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = __attr
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }
  }

  trait DefaultBindingDataRootFormat extends scalaxb.ElemNameParser[models.binding.DataRoot] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataRoot] =
      phrase(rep(scalaxb.ElemName(None, "dataCenter")) ^^
      { case p1 =>
      models.binding.DataRoot(p1.toSeq map { scalaxb.fromXML[models.binding.DataCenter](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://www.w3.org/XML/1998/namespace}id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.DataRoot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.id foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.DataRoot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.dataCenter flatMap { scalaxb.toXML[models.binding.DataCenter](_, None, Some("dataCenter"), __scope, false) })

  }

  trait DefaultBindingDataCenterFormat extends scalaxb.ElemNameParser[models.binding.DataCenter] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataCenter] =
      phrase(rep(((scalaxb.ElemName(None, "simulationModel")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SimulationModel](x, scalaxb.ElemName(node) :: stack)))) ||| 
      (((scalaxb.ElemName(None, "dataset")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Dataset](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "mission")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Mission](x, scalaxb.ElemName(node) :: stack)))))) ^^
      { case p1 =>
      models.binding.DataCenter(p1.toSeq,
        (node \ "@available").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@desc"), scalaxb.ElemName(node) :: stack),
        (node \ "@group").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id1").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@isSimulation").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.DataCenter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.available foreach { x => attr = scala.xml.Attribute(null, "available", x.toString, attr) }
      attr = scala.xml.Attribute(null, "desc", __obj.desc.toString, attr)
      __obj.group foreach { x => attr = scala.xml.Attribute(null, "group", x.toString, attr) }
      __obj.id1 foreach { x => attr = scala.xml.Attribute(null, "id1", x.toString, attr) }
      __obj.isSimulation foreach { x => attr = scala.xml.Attribute(null, "isSimulation", x.toString, attr) }
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.DataCenter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.datacenteroption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.DataCenterOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultBindingSimulationModelFormat extends scalaxb.ElemNameParser[models.binding.SimulationModel] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SimulationModel] =
      phrase(rep(scalaxb.ElemName(None, "runID")) ^^
      { case p1 =>
      models.binding.SimulationModel(p1.toSeq map { scalaxb.fromXML[models.binding.RunID](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@desc"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[java.net.URI]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.SimulationModel, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "desc", __obj.desc.toString, attr)
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.SimulationModel, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.runID flatMap { scalaxb.toXML[models.binding.RunID](_, None, Some("runID"), __scope, false) })

  }

  trait DefaultBindingRunIDFormat extends scalaxb.ElemNameParser[models.binding.RunID] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.RunID] =
      phrase(rep(scalaxb.ElemName(None, "mission")) ^^
      { case p1 =>
      models.binding.RunID(p1.toSeq map { scalaxb.fromXML[models.binding.Mission](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@FieldValue_Bx").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@FieldValue_Bx" -> _ },
        (node \ "@FieldValue_By").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@FieldValue_By" -> _ },
        (node \ "@FieldValue_Bz").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@FieldValue_Bz" -> _ },
        (node \ "@GridCellSize_X").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@GridCellSize_X" -> _ },
        (node \ "@GridCellSize_Y").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@GridCellSize_Y" -> _ },
        (node \ "@GridCellSize_Z").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@GridCellSize_Z" -> _ },
        (node \ "@LikelihoodRating").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@LikelihoodRating" -> _ },
        (node \ "@ReleaseDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@ReleaseDate" -> _ },
        (node \ "@SimulationType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@SimulationType" -> _ },
        (node \ "@SolarUVFlux").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@SolarUVFlux" -> _ },
        (node \ "@Solar_Wind_H-Density").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_H-Density" -> _ },
        (node \ "@Solar_Wind_H-FlowSpeed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_H-FlowSpeed" -> _ },
        (node \ "@Solar_Wind_H-Temperature").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_H-Temperature" -> _ },
        (node \ "@Solar_Wind_He-Density").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_He-Density" -> _ },
        (node \ "@Solar_Wind_He-FlowSpeed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_He-FlowSpeed" -> _ },
        (node \ "@Solar_Wind_He-Temperature").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_He-Temperature" -> _ },
        (node \ "@Solar_Wind_electrons-Density").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_electrons-Density" -> _ },
        (node \ "@Solar_Wind_electrons-FlowSpeed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_electrons-FlowSpeed" -> _ },
        (node \ "@Solar_Wind_electrons-Temperature").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_electrons-Temperature" -> _ },
        (node \ "@TemporalDependence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@TemporalDependence" -> _ },
        (node \ "@desc").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@desc" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@{http://www.w3.org/XML/1998/namespace}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: models.binding.RunID, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@FieldValue_Bx", _) => attr = scala.xml.Attribute(null, "FieldValue_Bx", __obj.FieldValue_Bx.toString, attr)
        case ("@FieldValue_By", _) => attr = scala.xml.Attribute(null, "FieldValue_By", __obj.FieldValue_By.toString, attr)
        case ("@FieldValue_Bz", _) => attr = scala.xml.Attribute(null, "FieldValue_Bz", __obj.FieldValue_Bz.toString, attr)
        case ("@GridCellSize_X", _) => attr = scala.xml.Attribute(null, "GridCellSize_X", __obj.GridCellSize_X.toString, attr)
        case ("@GridCellSize_Y", _) => attr = scala.xml.Attribute(null, "GridCellSize_Y", __obj.GridCellSize_Y.toString, attr)
        case ("@GridCellSize_Z", _) => attr = scala.xml.Attribute(null, "GridCellSize_Z", __obj.GridCellSize_Z.toString, attr)
        case ("@LikelihoodRating", _) => attr = scala.xml.Attribute(null, "LikelihoodRating", __obj.LikelihoodRating.toString, attr)
        case ("@ReleaseDate", _) => attr = scala.xml.Attribute(null, "ReleaseDate", __obj.ReleaseDate.toString, attr)
        case ("@SimulationType", _) => attr = scala.xml.Attribute(null, "SimulationType", __obj.SimulationType.toString, attr)
        case ("@SolarUVFlux", _) => __obj.SolarUVFlux foreach { x => attr = scala.xml.Attribute(null, "SolarUVFlux", x.toString, attr) }
        case ("@Solar_Wind_H-Density", _) => attr = scala.xml.Attribute(null, "Solar_Wind_H-Density", __obj.Solar_Wind_Hu45Density.toString, attr)
        case ("@Solar_Wind_H-FlowSpeed", _) => attr = scala.xml.Attribute(null, "Solar_Wind_H-FlowSpeed", __obj.Solar_Wind_Hu45FlowSpeed.toString, attr)
        case ("@Solar_Wind_H-Temperature", _) => attr = scala.xml.Attribute(null, "Solar_Wind_H-Temperature", __obj.Solar_Wind_Hu45Temperature.toString, attr)
        case ("@Solar_Wind_He-Density", _) => attr = scala.xml.Attribute(null, "Solar_Wind_He-Density", __obj.Solar_Wind_Heu45Density.toString, attr)
        case ("@Solar_Wind_He-FlowSpeed", _) => attr = scala.xml.Attribute(null, "Solar_Wind_He-FlowSpeed", __obj.Solar_Wind_Heu45FlowSpeed.toString, attr)
        case ("@Solar_Wind_He-Temperature", _) => attr = scala.xml.Attribute(null, "Solar_Wind_He-Temperature", __obj.Solar_Wind_Heu45Temperature.toString, attr)
        case ("@Solar_Wind_electrons-Density", _) => attr = scala.xml.Attribute(null, "Solar_Wind_electrons-Density", __obj.Solar_Wind_electronsu45Density.toString, attr)
        case ("@Solar_Wind_electrons-FlowSpeed", _) => attr = scala.xml.Attribute(null, "Solar_Wind_electrons-FlowSpeed", __obj.Solar_Wind_electronsu45FlowSpeed.toString, attr)
        case ("@Solar_Wind_electrons-Temperature", _) => attr = scala.xml.Attribute(null, "Solar_Wind_electrons-Temperature", __obj.Solar_Wind_electronsu45Temperature.toString, attr)
        case ("@TemporalDependence", _) => attr = scala.xml.Attribute(null, "TemporalDependence", __obj.TemporalDependence.toString, attr)
        case ("@desc", _) => attr = scala.xml.Attribute(null, "desc", __obj.desc.toString, attr)
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: models.binding.RunID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.mission flatMap { scalaxb.toXML[models.binding.Mission](_, None, Some("mission"), __scope, false) })

  }

  trait DefaultBindingMissionFormat extends scalaxb.ElemNameParser[models.binding.Mission] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Mission] =
      phrase(rep(((scalaxb.ElemName(None, "measurementType")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.MeasurementType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "instrument")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Instrument](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      models.binding.Mission(p1.toSeq,
        (node \ "@SimulatedRegion").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@att").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@available").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@desc"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        (node \ "@target").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@targets").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.Mission, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.SimulatedRegion foreach { x => attr = scala.xml.Attribute(null, "SimulatedRegion", x.toString, attr) }
      __obj.att foreach { x => attr = scala.xml.Attribute(null, "att", x.toString, attr) }
      __obj.available foreach { x => attr = scala.xml.Attribute(null, "available", x.toString, attr) }
      attr = scala.xml.Attribute(null, "desc", __obj.desc.toString, attr)
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      __obj.target foreach { x => attr = scala.xml.Attribute(null, "target", x.toString, attr) }
      __obj.targets foreach { x => attr = scala.xml.Attribute(null, "targets", x.toString, attr) }
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Mission, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.missionoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.MissionOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultBindingMeasurementTypeFormat extends scalaxb.ElemNameParser[models.binding.MeasurementType] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.MeasurementType] =
      phrase(rep(scalaxb.ElemName(None, "dataset")) ^^
      { case p1 =>
      models.binding.MeasurementType(p1.toSeq map { scalaxb.fromXML[models.binding.Dataset](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@desc"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.MeasurementType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "desc", __obj.desc.toString, attr)
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.MeasurementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.dataset flatMap { scalaxb.toXML[models.binding.Dataset](_, None, Some("dataset"), __scope, false) })

  }

  trait DefaultBindingInstrumentFormat extends scalaxb.ElemNameParser[models.binding.Instrument] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Instrument] =
      phrase(rep(scalaxb.ElemName(None, "dataset")) ^^
      { case p1 =>
      models.binding.Instrument(p1.toSeq map { scalaxb.fromXML[models.binding.Dataset](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@att").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@desc"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.Instrument, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.att foreach { x => attr = scala.xml.Attribute(null, "att", x.toString, attr) }
      attr = scala.xml.Attribute(null, "desc", __obj.desc.toString, attr)
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Instrument, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.dataset flatMap { scalaxb.toXML[models.binding.Dataset](_, None, Some("dataset"), __scope, false) })

  }

  trait DefaultBindingDatasetFormat extends scalaxb.ElemNameParser[models.binding.Dataset] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Dataset] =
      phrase(rep(scalaxb.ElemName(None, "parameter")) ^^
      { case p1 =>
      models.binding.Dataset(p1.toSeq map { scalaxb.fromXML[models.binding.Parameter](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@att").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@dataSource").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@dataStart").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@dataStop").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@desc").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@maxSampling").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        (node \ "@rem_id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@sampling").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@target").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.Dataset, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.att foreach { x => attr = scala.xml.Attribute(null, "att", x.toString, attr) }
      __obj.dataSource foreach { x => attr = scala.xml.Attribute(null, "dataSource", x.toString, attr) }
      __obj.dataStart foreach { x => attr = scala.xml.Attribute(null, "dataStart", x.toString, attr) }
      __obj.dataStop foreach { x => attr = scala.xml.Attribute(null, "dataStop", x.toString, attr) }
      __obj.desc foreach { x => attr = scala.xml.Attribute(null, "desc", x.toString, attr) }
      __obj.maxSampling foreach { x => attr = scala.xml.Attribute(null, "maxSampling", x.toString, attr) }
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      __obj.rem_id foreach { x => attr = scala.xml.Attribute(null, "rem_id", x.toString, attr) }
      __obj.sampling foreach { x => attr = scala.xml.Attribute(null, "sampling", x.toString, attr) }
      __obj.target foreach { x => attr = scala.xml.Attribute(null, "target", x.toString, attr) }
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Dataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.parameter flatMap { scalaxb.toXML[models.binding.Parameter](_, None, Some("parameter"), __scope, false) })

  }

  trait DefaultBindingParameterFormat extends scalaxb.ElemNameParser[models.binding.Parameter] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Parameter] =
      phrase(rep(scalaxb.ElemName(None, "component")) ^^
      { case p1 =>
      models.binding.Parameter(p1.toSeq map { scalaxb.fromXML[models.binding.Component](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@desc").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@display_type").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@labels").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@mission").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        (node \ "@needsArgs").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@parentID").headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@size").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@units").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@var").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.Parameter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.desc foreach { x => attr = scala.xml.Attribute(null, "desc", x.toString, attr) }
      __obj.display_type foreach { x => attr = scala.xml.Attribute(null, "display_type", x.toString, attr) }
      __obj.labels foreach { x => attr = scala.xml.Attribute(null, "labels", x.toString, attr) }
      __obj.mission foreach { x => attr = scala.xml.Attribute(null, "mission", x.toString, attr) }
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      __obj.needsArgs foreach { x => attr = scala.xml.Attribute(null, "needsArgs", x.toString, attr) }
      __obj.parentID foreach { x => attr = scala.xml.Attribute(null, "parentID", x.toString, attr) }
      __obj.size foreach { x => attr = scala.xml.Attribute(null, "size", x.toString, attr) }
      __obj.units foreach { x => attr = scala.xml.Attribute(null, "units", x.toString, attr) }
      __obj.varValue foreach { x => attr = scala.xml.Attribute(null, "var", x.toString, attr) }
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Parameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.component flatMap { scalaxb.toXML[models.binding.Component](_, None, Some("component"), __scope, false) })

  }

  trait DefaultBindingComponentFormat extends scalaxb.XMLFormat[models.binding.Component] with scalaxb.CanWriteChildNodes[models.binding.Component] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Component] = seq match {
      case node: scala.xml.Node => Right(models.binding.Component((node \ "@mission").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        (node \ "@parentID").headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@var").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: models.binding.Component, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.mission foreach { x => attr = scala.xml.Attribute(null, "mission", x.toString, attr) }
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      __obj.parentID foreach { x => attr = scala.xml.Attribute(null, "parentID", x.toString, attr) }
      __obj.varValue foreach { x => attr = scala.xml.Attribute(null, "var", x.toString, attr) }
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Component, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultBindingDatabaseFormat extends scalaxb.ElemNameParser[models.binding.Database] {
    val targetNamespace: Option[String] = Some("http://www.impex.org/2012/configuration.xsd")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Database] =
      phrase((scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "description")) ~ 
      rep(((scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "ip")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "dns")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "methods")) ~ 
      rep(scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "tree")) ~ 
      rep(scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "protocol")) ~ 
      (scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "info")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.Database(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq,
        p4.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.Databasetype]((node \ "@type"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[java.net.URI]((node \ "@id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.Database, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Database, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.name, Some("http://www.impex.org/2012/configuration.xsd"), Some("name"), __scope, false),
        __obj.description map { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.databaseoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false) },
        __obj.methods flatMap { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("methods"), __scope, false) },
        __obj.tree flatMap { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("tree"), __scope, false) },
        __obj.protocol flatMap { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("protocol"), __scope, false) },
        scalaxb.toXML[String](__obj.info, Some("http://www.impex.org/2012/configuration.xsd"), Some("info"), __scope, false))

  }

  trait DefaultBindingToolFormat extends scalaxb.ElemNameParser[models.binding.Tool] {
    val targetNamespace: Option[String] = Some("http://www.impex.org/2012/configuration.xsd")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Tool] =
      phrase((scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "description")) ~ 
      rep(((scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "ip")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "dns")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      (scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "info")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.Tool(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq,
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.Tool, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.name, Some("http://www.impex.org/2012/configuration.xsd"), Some("name"), __scope, false),
        __obj.description map { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.tooloption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false) },
        scalaxb.toXML[String](__obj.info, Some("http://www.impex.org/2012/configuration.xsd"), Some("info"), __scope, false))

  }

  trait DefaultBindingImpexconfigurationFormat extends scalaxb.ElemNameParser[models.binding.Impexconfiguration] {
    val targetNamespace: Option[String] = Some("http://www.impex.org/2012/configuration.xsd")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Impexconfiguration] =
      phrase(rep(((scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "database")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Database](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "tool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Tool](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      models.binding.Impexconfiguration(p1.toSeq: _*) })
    
    def writesChildNodes(__obj: models.binding.Impexconfiguration, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.impexconfigurationoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.ImpexconfigurationOption]](x, x.namespace, x.key, __scope, false) })

  }

  def buildBindingDatabasetypeFormat = new DefaultBindingDatabasetypeFormat {}
  trait DefaultBindingDatabasetypeFormat extends scalaxb.XMLFormat[models.binding.Databasetype] {
    val targetNamespace: Option[String] = Some("http://www.impex.org/2012/configuration.xsd")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Databasetype] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.Databasetype.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.Databasetype.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.Databasetype, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  trait DefaultBindingSpaseFormat extends scalaxb.ElemNameParser[models.binding.Spase] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Spase")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Spase] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Version")) ~ 
      rep(((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationModel")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SimulationModelType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "NumericalOutput")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.NumericalOutput](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Service")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Service](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Registry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Registry](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Document")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Document](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Catalog")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Catalog](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationModel")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SimulationModelType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "NumericalOutput")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.NumericalOutput](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Service")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Service](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Registry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Registry](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Document")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Document](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Catalog")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Catalog](x, scalaxb.ElemName(node) :: stack)))) | 
      ((any(_ => true) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DisplayData")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.DisplayData](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "NumericalData")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.NumericalData](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Instrument")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InstrumentType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Observatory")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Observatory](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Person")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Person](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Repository")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Repository](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Annotation")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Annotation](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Granule")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Granule](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DisplayOutput")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.DisplayOutput](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationRun")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SimulationRun](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DisplayData")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.DisplayData](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "NumericalData")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.NumericalData](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Instrument")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InstrumentType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Observatory")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Observatory](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Person")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Person](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Repository")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Repository](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Annotation")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Annotation](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Granule")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Granule](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DisplayOutput")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.DisplayOutput](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationRun")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SimulationRun](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 ~ p2 =>
      models.binding.Spase(scalaxb.fromXML[models.binding.EnumVersion](p1, scalaxb.ElemName(node) :: stack),
        p2,
        (node \ "@lang").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[String](scala.xml.Text("en"), scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.Spase, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      if (__obj.lang.toString != "en") attr = scala.xml.Attribute(null, "lang", __obj.lang.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Spase, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.EnumVersion](__obj.Version, Some("http://impex-fp7.oeaw.ac.at"), Some("Version"), __scope, false),
        __obj.ResourceEntity flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultBindingCatalogFormat extends scalaxb.ElemNameParser[models.binding.Catalog] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Catalog")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Catalog] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderResourceName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderVersion")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InstrumentID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PhenomenonType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TimeSpan")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Keyword")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputResourceID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Parameter")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      models.binding.Catalog(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.AccessInformation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[models.binding.EnumPhenomenonType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[models.binding.TimeSpan](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.toSeq map { scalaxb.fromXML[models.binding.ParameterType](_, scalaxb.ElemName(node) :: stack) },
        p13.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Catalog, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.AccessInformation flatMap { scalaxb.toXML[models.binding.AccessInformation](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessInformation"), __scope, false) },
        __obj.ProviderResourceName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderResourceName"), __scope, false) } getOrElse {Nil},
        __obj.ProviderVersion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderVersion"), __scope, false) } getOrElse {Nil},
        __obj.InstrumentID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InstrumentID"), __scope, false) },
        __obj.PhenomenonType flatMap { scalaxb.toXML[models.binding.EnumPhenomenonType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PhenomenonType"), __scope, false) },
        __obj.TimeSpan map { scalaxb.toXML[models.binding.TimeSpan](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TimeSpan"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Keyword flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Keyword"), __scope, false) },
        __obj.InputResourceID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputResourceID"), __scope, false) },
        __obj.Parameter flatMap { scalaxb.toXML[models.binding.ParameterType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Parameter"), __scope, false) },
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingResourceHeaderFormat extends scalaxb.ElemNameParser[models.binding.ResourceHeader] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("ResourceHeader")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ResourceHeader] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceName")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AlternateName")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ReleaseDate")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ExpirationDate")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Acknowledgement")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Contact")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InformationURL")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Association")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PriorID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      models.binding.ResourceHeader(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[models.binding.Contact](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[models.binding.InformationURL](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[models.binding.Association](_, scalaxb.ElemName(node) :: stack) },
        p10.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ResourceHeader, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceName, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceName"), __scope, false),
        __obj.AlternateName flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AlternateName"), __scope, false) },
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.ReleaseDate, Some("http://impex-fp7.oeaw.ac.at"), Some("ReleaseDate"), __scope, false),
        __obj.ExpirationDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ExpirationDate"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.Description, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false),
        __obj.Acknowledgement map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Acknowledgement"), __scope, false) } getOrElse {Nil},
        __obj.Contact flatMap { scalaxb.toXML[models.binding.Contact](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Contact"), __scope, false) },
        __obj.InformationURL flatMap { scalaxb.toXML[models.binding.InformationURL](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InformationURL"), __scope, false) },
        __obj.Association flatMap { scalaxb.toXML[models.binding.Association](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Association"), __scope, false) },
        __obj.PriorID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PriorID"), __scope, false) })

  }

  trait DefaultBindingContactFormat extends scalaxb.ElemNameParser[models.binding.Contact] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Contact")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Contact] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PersonID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Role")) ^^
      { case p1 ~ p2 =>
      models.binding.Contact(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[models.binding.EnumRole](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Contact, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.PersonID, Some("http://impex-fp7.oeaw.ac.at"), Some("PersonID"), __scope, false),
        __obj.Role flatMap { scalaxb.toXML[models.binding.EnumRole](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Role"), __scope, false) })

  }

  trait DefaultBindingInformationURLFormat extends scalaxb.ElemNameParser[models.binding.InformationURL] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("InformationURL")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InformationURL] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "URL")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Language")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.InformationURL(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.InformationURL, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Name map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.URL, Some("http://impex-fp7.oeaw.ac.at"), Some("URL"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Language map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Language"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingAssociationFormat extends scalaxb.ElemNameParser[models.binding.Association] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Association")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Association] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AssociationID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AssociationType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Note")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.Association(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.EnumAssociationType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Association, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.AssociationID, Some("http://impex-fp7.oeaw.ac.at"), Some("AssociationID"), __scope, false),
        scalaxb.toXML[models.binding.EnumAssociationType](__obj.AssociationType, Some("http://impex-fp7.oeaw.ac.at"), Some("AssociationType"), __scope, false),
        __obj.Note map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Note"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingAccessInformationFormat extends scalaxb.ElemNameParser[models.binding.AccessInformation] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("AccessInformation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.AccessInformation] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RepositoryID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Availability")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessRights")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessURL")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Format")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Encoding")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DataExtent")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Acknowledgement")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      models.binding.AccessInformation(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[models.binding.EnumAvailability](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[models.binding.EnumAccessRights](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[models.binding.AccessURL](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumFormat](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[models.binding.EnumEncoding](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.DataExtent](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.AccessInformation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.RepositoryID, Some("http://impex-fp7.oeaw.ac.at"), Some("RepositoryID"), __scope, false),
        __obj.Availability map { scalaxb.toXML[models.binding.EnumAvailability](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Availability"), __scope, false) } getOrElse {Nil},
        __obj.AccessRights map { scalaxb.toXML[models.binding.EnumAccessRights](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessRights"), __scope, false) } getOrElse {Nil},
        __obj.AccessURL flatMap { scalaxb.toXML[models.binding.AccessURL](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessURL"), __scope, false) },
        scalaxb.toXML[models.binding.EnumFormat](__obj.Format, Some("http://impex-fp7.oeaw.ac.at"), Some("Format"), __scope, false),
        __obj.Encoding map { scalaxb.toXML[models.binding.EnumEncoding](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Encoding"), __scope, false) } getOrElse {Nil},
        __obj.DataExtent map { scalaxb.toXML[models.binding.DataExtent](_, Some("http://impex-fp7.oeaw.ac.at"), Some("DataExtent"), __scope, false) } getOrElse {Nil},
        __obj.Acknowledgement map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Acknowledgement"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingAccessURLFormat extends scalaxb.ElemNameParser[models.binding.AccessURL] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("AccessURL")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.AccessURL] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "URL")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProductKey")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Language")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.AccessURL(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.AccessURL, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Name map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.URL, Some("http://impex-fp7.oeaw.ac.at"), Some("URL"), __scope, false),
        __obj.ProductKey flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProductKey"), __scope, false) },
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Language map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Language"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingDataExtentFormat extends scalaxb.ElemNameParser[models.binding.DataExtent] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("DataExtent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataExtent] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Quantity")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Per")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.DataExtent(scalaxb.fromXML[Double](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DataExtent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Double](__obj.Quantity, Some("http://impex-fp7.oeaw.ac.at"), Some("Quantity"), __scope, false),
        __obj.Units map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false) } getOrElse {Nil},
        __obj.Per map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Per"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingTimeSpanFormat extends scalaxb.ElemNameParser[models.binding.TimeSpan] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("TimeSpan")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.TimeSpan] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StartDate")) ~ 
      (((any(_ => true) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RelativeStopDate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.Duration](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StopDate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RelativeStopDate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.Duration](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StopDate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Note")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.TimeSpan(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        p2,
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.TimeSpan, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartDate, Some("http://impex-fp7.oeaw.ac.at"), Some("StartDate"), __scope, false),
        Some(__obj.StopDateEntity) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)} get,
        __obj.Note flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Note"), __scope, false) })

  }

  trait DefaultBindingParameterTypeFormat extends scalaxb.ElemNameParser[models.binding.ParameterType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Parameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ParameterType] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Set")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParameterKey")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Cadence")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "UnitsConversion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinateSystem")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RenderingHints")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Structure")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMin")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMax")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FillValue")) ~ 
      (((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Particle")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Particle](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Mixed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Mixed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Wave")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Wave](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Field")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Field](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Particle")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Particle](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Mixed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Mixed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Wave")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Wave](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Field")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Field](x, scalaxb.ElemName(node) :: stack)))) | 
      ((any(_ => true) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Support")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Support](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Support")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Support](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Property")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      models.binding.ParameterType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[models.binding.CoordinateSystem](_, scalaxb.ElemName(node) :: stack) },
        p10.toSeq map { scalaxb.fromXML[models.binding.RenderingHints](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[models.binding.Structure](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15,
        p16.toSeq map { scalaxb.fromXML[models.binding.Property](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ParameterType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false),
        __obj.Set flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Set"), __scope, false) },
        __obj.ParameterKey map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParameterKey"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Cadence map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Cadence"), __scope, false) } getOrElse {Nil},
        __obj.Units map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false) } getOrElse {Nil},
        __obj.UnitsConversion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("UnitsConversion"), __scope, false) } getOrElse {Nil},
        __obj.CoordinateSystem map { scalaxb.toXML[models.binding.CoordinateSystem](_, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinateSystem"), __scope, false) } getOrElse {Nil},
        __obj.RenderingHints flatMap { scalaxb.toXML[models.binding.RenderingHints](_, Some("http://impex-fp7.oeaw.ac.at"), Some("RenderingHints"), __scope, false) },
        __obj.Structure map { scalaxb.toXML[models.binding.Structure](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Structure"), __scope, false) } getOrElse {Nil},
        __obj.ValidMin map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMin"), __scope, false) } getOrElse {Nil},
        __obj.ValidMax map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMax"), __scope, false) } getOrElse {Nil},
        __obj.FillValue map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FillValue"), __scope, false) } getOrElse {Nil},
        Some(__obj.ParameterEntity) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)} get,
        __obj.Property flatMap { scalaxb.toXML[models.binding.Property](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Property"), __scope, false) })

  }

  trait DefaultBindingCoordinateSystemFormat extends scalaxb.ElemNameParser[models.binding.CoordinateSystem] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("CoordinateSystem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CoordinateSystem] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinateRepresentation")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinateSystemName")) ^^
      { case p1 ~ p2 =>
      models.binding.CoordinateSystem(scalaxb.fromXML[models.binding.EnumCoordinateRepresentation](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.EnumCoordinateSystemName](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.CoordinateSystem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.EnumCoordinateRepresentation](__obj.CoordinateRepresentation, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinateRepresentation"), __scope, false),
        scalaxb.toXML[models.binding.EnumCoordinateSystemName](__obj.CoordinateSystemName, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinateSystemName"), __scope, false))

  }

  trait DefaultBindingRenderingHintsFormat extends scalaxb.ElemNameParser[models.binding.RenderingHints] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("RenderingHints")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.RenderingHints] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DisplayType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AxisLabel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RenderingAxis")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Index")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValueFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ScaleMin")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ScaleMax")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ScaleType")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      models.binding.RenderingHints(p1.headOption map { scalaxb.fromXML[models.binding.EnumDisplayType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[models.binding.EnumRenderingAxis](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Seq[BigInt]](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[models.binding.EnumScaleType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.RenderingHints, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DisplayType map { scalaxb.toXML[models.binding.EnumDisplayType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("DisplayType"), __scope, false) } getOrElse {Nil},
        __obj.AxisLabel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AxisLabel"), __scope, false) } getOrElse {Nil},
        __obj.RenderingAxis map { scalaxb.toXML[models.binding.EnumRenderingAxis](_, Some("http://impex-fp7.oeaw.ac.at"), Some("RenderingAxis"), __scope, false) } getOrElse {Nil},
        __obj.Index map { scalaxb.toXML[Seq[BigInt]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Index"), __scope, false) } getOrElse {Nil},
        __obj.ValueFormat map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValueFormat"), __scope, false) } getOrElse {Nil},
        __obj.ScaleMin map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ScaleMin"), __scope, false) } getOrElse {Nil},
        __obj.ScaleMax map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ScaleMax"), __scope, false) } getOrElse {Nil},
        __obj.ScaleType map { scalaxb.toXML[models.binding.EnumScaleType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ScaleType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingStructureFormat extends scalaxb.ElemNameParser[models.binding.Structure] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Structure")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Structure] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Size")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Element")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.Structure(scalaxb.fromXML[Seq[BigInt]](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[models.binding.Element](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Structure, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Seq[BigInt]](__obj.Size, Some("http://impex-fp7.oeaw.ac.at"), Some("Size"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Element flatMap { scalaxb.toXML[models.binding.Element](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Element"), __scope, false) })

  }

  trait DefaultBindingElementFormat extends scalaxb.ElemNameParser[models.binding.Element] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Element")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Element] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Index")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParameterKey")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "UnitsConversion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMin")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMax")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FillValue")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RenderingHints")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      models.binding.Element(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Seq[BigInt]](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[models.binding.RenderingHints](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Element, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false),
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[Seq[BigInt]](__obj.Index, Some("http://impex-fp7.oeaw.ac.at"), Some("Index"), __scope, false),
        __obj.ParameterKey map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParameterKey"), __scope, false) } getOrElse {Nil},
        __obj.Units map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false) } getOrElse {Nil},
        __obj.UnitsConversion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("UnitsConversion"), __scope, false) } getOrElse {Nil},
        __obj.ValidMin map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMin"), __scope, false) } getOrElse {Nil},
        __obj.ValidMax map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMax"), __scope, false) } getOrElse {Nil},
        __obj.FillValue map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FillValue"), __scope, false) } getOrElse {Nil},
        __obj.RenderingHints map { scalaxb.toXML[models.binding.RenderingHints](_, Some("http://impex-fp7.oeaw.ac.at"), Some("RenderingHints"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingFieldFormat extends scalaxb.ElemNameParser[models.binding.Field] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Field")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Field] =
      phrase(rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FieldQuantity")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FrequencyRange")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.Field(p1.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumFieldQuantity](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[models.binding.FrequencyRange](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Field, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[models.binding.EnumFieldQuantity](__obj.FieldQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("FieldQuantity"), __scope, false),
        __obj.FrequencyRange map { scalaxb.toXML[models.binding.FrequencyRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FrequencyRange"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingFrequencyRangeFormat extends scalaxb.ElemNameParser[models.binding.FrequencyRange] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("FrequencyRange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.FrequencyRange] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpectralRange")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Low")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "High")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Bin")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.FrequencyRange(p1.headOption map { scalaxb.fromXML[models.binding.EnumSpectralRange](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.toSeq map { scalaxb.fromXML[models.binding.Bin](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.FrequencyRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SpectralRange map { scalaxb.toXML[models.binding.EnumSpectralRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SpectralRange"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Double](__obj.Low, Some("http://impex-fp7.oeaw.ac.at"), Some("Low"), __scope, false),
        scalaxb.toXML[Double](__obj.High, Some("http://impex-fp7.oeaw.ac.at"), Some("High"), __scope, false),
        scalaxb.toXML[String](__obj.Units, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false),
        __obj.Bin flatMap { scalaxb.toXML[models.binding.Bin](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Bin"), __scope, false) })

  }

  trait DefaultBindingBinFormat extends scalaxb.ElemNameParser[models.binding.Bin] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Bin")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Bin] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "BandName")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Low")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "High")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.Bin(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.Bin, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BandName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("BandName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Double](__obj.Low, Some("http://impex-fp7.oeaw.ac.at"), Some("Low"), __scope, false),
        scalaxb.toXML[Double](__obj.High, Some("http://impex-fp7.oeaw.ac.at"), Some("High"), __scope, false))

  }

  trait DefaultBindingEnergyRangeFormat extends scalaxb.ElemNameParser[models.binding.EnergyRange] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("EnergyRange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.EnergyRange] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Low")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "High")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Bin")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.EnergyRange(scalaxb.fromXML[Double](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[models.binding.Bin](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.EnergyRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Double](__obj.Low, Some("http://impex-fp7.oeaw.ac.at"), Some("Low"), __scope, false),
        scalaxb.toXML[Double](__obj.High, Some("http://impex-fp7.oeaw.ac.at"), Some("High"), __scope, false),
        scalaxb.toXML[String](__obj.Units, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false),
        __obj.Bin flatMap { scalaxb.toXML[models.binding.Bin](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Bin"), __scope, false) })

  }

  trait DefaultBindingAzimuthalAngleRangeFormat extends scalaxb.ElemNameParser[models.binding.AzimuthalAngleRange] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("AzimuthalAngleRange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.AzimuthalAngleRange] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Low")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "High")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Bin")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.AzimuthalAngleRange(scalaxb.fromXML[Double](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[models.binding.Bin](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.AzimuthalAngleRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Double](__obj.Low, Some("http://impex-fp7.oeaw.ac.at"), Some("Low"), __scope, false),
        scalaxb.toXML[Double](__obj.High, Some("http://impex-fp7.oeaw.ac.at"), Some("High"), __scope, false),
        scalaxb.toXML[String](__obj.Units, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false),
        __obj.Bin flatMap { scalaxb.toXML[models.binding.Bin](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Bin"), __scope, false) })

  }

  trait DefaultBindingPolarAngleRangeFormat extends scalaxb.ElemNameParser[models.binding.PolarAngleRange] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("PolarAngleRange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.PolarAngleRange] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Low")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "High")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Bin")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.PolarAngleRange(scalaxb.fromXML[Double](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[models.binding.Bin](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.PolarAngleRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Double](__obj.Low, Some("http://impex-fp7.oeaw.ac.at"), Some("Low"), __scope, false),
        scalaxb.toXML[Double](__obj.High, Some("http://impex-fp7.oeaw.ac.at"), Some("High"), __scope, false),
        scalaxb.toXML[String](__obj.Units, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false),
        __obj.Bin flatMap { scalaxb.toXML[models.binding.Bin](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Bin"), __scope, false) })

  }

  trait DefaultBindingWaveFormat extends scalaxb.ElemNameParser[models.binding.Wave] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Wave")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Wave] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "WaveType")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "WaveQuantity")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "EnergyRange")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FrequencyRange")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "WavelengthRange")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      models.binding.Wave(scalaxb.fromXML[models.binding.EnumWaveType](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumWaveQuantity](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[models.binding.EnergyRange](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[models.binding.FrequencyRange](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[models.binding.WavelengthRange](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Wave, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.EnumWaveType](__obj.WaveType, Some("http://impex-fp7.oeaw.ac.at"), Some("WaveType"), __scope, false),
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[models.binding.EnumWaveQuantity](__obj.WaveQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("WaveQuantity"), __scope, false),
        __obj.EnergyRange map { scalaxb.toXML[models.binding.EnergyRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("EnergyRange"), __scope, false) } getOrElse {Nil},
        __obj.FrequencyRange map { scalaxb.toXML[models.binding.FrequencyRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FrequencyRange"), __scope, false) } getOrElse {Nil},
        __obj.WavelengthRange map { scalaxb.toXML[models.binding.WavelengthRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("WavelengthRange"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingWavelengthRangeFormat extends scalaxb.ElemNameParser[models.binding.WavelengthRange] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("WavelengthRange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.WavelengthRange] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpectralRange")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Low")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "High")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Bin")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.WavelengthRange(p1.headOption map { scalaxb.fromXML[models.binding.EnumSpectralRange](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.toSeq map { scalaxb.fromXML[models.binding.Bin](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.WavelengthRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SpectralRange map { scalaxb.toXML[models.binding.EnumSpectralRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SpectralRange"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Double](__obj.Low, Some("http://impex-fp7.oeaw.ac.at"), Some("Low"), __scope, false),
        scalaxb.toXML[Double](__obj.High, Some("http://impex-fp7.oeaw.ac.at"), Some("High"), __scope, false),
        scalaxb.toXML[String](__obj.Units, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false),
        __obj.Bin flatMap { scalaxb.toXML[models.binding.Bin](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Bin"), __scope, false) })

  }

  trait DefaultBindingMixedFormat extends scalaxb.ElemNameParser[models.binding.Mixed] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Mixed")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Mixed] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "MixedQuantity")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParticleType")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.Mixed(scalaxb.fromXML[models.binding.EnumMixedQuantity](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[models.binding.EnumParticleType](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Mixed, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.EnumMixedQuantity](__obj.MixedQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("MixedQuantity"), __scope, false),
        __obj.ParticleType flatMap { scalaxb.toXML[models.binding.EnumParticleType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParticleType"), __scope, false) },
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) })

  }

  trait DefaultBindingSupportFormat extends scalaxb.ElemNameParser[models.binding.Support] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Support")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Support] =
      phrase(rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SupportQuantity")) ^^
      { case p1 ~ p2 =>
      models.binding.Support(p1.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumSupportQuantity](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.Support, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[models.binding.EnumSupportQuantity](__obj.SupportQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("SupportQuantity"), __scope, false))

  }

  trait DefaultBindingExtensionFormat extends scalaxb.ElemNameParser[models.binding.Extension] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Extension")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Extension] =
      phrase(opt(any(_ => true)) ^^
      { case p1 =>
      models.binding.Extension(p1.headOption map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Extension, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.any map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) } getOrElse {Nil})

  }

  trait DefaultBindingDisplayDataFormat extends scalaxb.ElemNameParser[models.binding.DisplayData] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("DisplayData")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DisplayData] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderResourceName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderVersion")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InstrumentID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "MeasurementType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TemporalDescription")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpectralRange")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DisplayCadence")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObservedRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Keyword")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputResourceID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Parameter")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      models.binding.DisplayData(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.AccessInformation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.EnumProcessingLevel](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[models.binding.EnumMeasurementType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[models.binding.TemporalDescription](_, scalaxb.ElemName(node) :: stack) },
        p11.toSeq map { scalaxb.fromXML[models.binding.EnumSpectralRange](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) },
        p13.toSeq map { scalaxb.fromXML[models.binding.EnumRegion](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.toSeq map { scalaxb.fromXML[models.binding.ParameterType](_, scalaxb.ElemName(node) :: stack) },
        p18.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DisplayData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.AccessInformation flatMap { scalaxb.toXML[models.binding.AccessInformation](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessInformation"), __scope, false) },
        __obj.ProcessingLevel map { scalaxb.toXML[models.binding.EnumProcessingLevel](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderResourceName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderResourceName"), __scope, false) } getOrElse {Nil},
        __obj.ProviderProcessingLevel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderVersion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderVersion"), __scope, false) } getOrElse {Nil},
        __obj.InstrumentID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InstrumentID"), __scope, false) },
        __obj.MeasurementType flatMap { scalaxb.toXML[models.binding.EnumMeasurementType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("MeasurementType"), __scope, false) },
        __obj.TemporalDescription map { scalaxb.toXML[models.binding.TemporalDescription](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TemporalDescription"), __scope, false) } getOrElse {Nil},
        __obj.SpectralRange flatMap { scalaxb.toXML[models.binding.EnumSpectralRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SpectralRange"), __scope, false) },
        __obj.DisplayCadence map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("DisplayCadence"), __scope, false) } getOrElse {Nil},
        __obj.ObservedRegion flatMap { scalaxb.toXML[models.binding.EnumRegion](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ObservedRegion"), __scope, false) },
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Keyword flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Keyword"), __scope, false) },
        __obj.InputResourceID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputResourceID"), __scope, false) },
        __obj.Parameter flatMap { scalaxb.toXML[models.binding.ParameterType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Parameter"), __scope, false) },
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingTemporalDescriptionFormat extends scalaxb.ElemNameParser[models.binding.TemporalDescription] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("TemporalDescription")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.TemporalDescription] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TimeSpan")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Cadence")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Exposure")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.TemporalDescription(scalaxb.fromXML[models.binding.TimeSpan](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.TemporalDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.TimeSpan](__obj.TimeSpan, Some("http://impex-fp7.oeaw.ac.at"), Some("TimeSpan"), __scope, false),
        __obj.Cadence map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Cadence"), __scope, false) } getOrElse {Nil},
        __obj.Exposure map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Exposure"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingNumericalDataFormat extends scalaxb.ElemNameParser[models.binding.NumericalData] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("NumericalData")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.NumericalData] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderResourceName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderVersion")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InstrumentID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "MeasurementType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TemporalDescription")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpectralRange")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObservedRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Keyword")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputResourceID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Parameter")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      models.binding.NumericalData(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.AccessInformation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.EnumProcessingLevel](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[models.binding.EnumMeasurementType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[models.binding.TemporalDescription](_, scalaxb.ElemName(node) :: stack) },
        p11.toSeq map { scalaxb.fromXML[models.binding.EnumSpectralRange](_, scalaxb.ElemName(node) :: stack) },
        p12.toSeq map { scalaxb.fromXML[models.binding.EnumRegion](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.toSeq map { scalaxb.fromXML[models.binding.ParameterType](_, scalaxb.ElemName(node) :: stack) },
        p17.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.NumericalData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.AccessInformation flatMap { scalaxb.toXML[models.binding.AccessInformation](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessInformation"), __scope, false) },
        __obj.ProcessingLevel map { scalaxb.toXML[models.binding.EnumProcessingLevel](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderResourceName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderResourceName"), __scope, false) } getOrElse {Nil},
        __obj.ProviderProcessingLevel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderVersion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderVersion"), __scope, false) } getOrElse {Nil},
        __obj.InstrumentID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InstrumentID"), __scope, false) },
        __obj.MeasurementType flatMap { scalaxb.toXML[models.binding.EnumMeasurementType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("MeasurementType"), __scope, false) },
        __obj.TemporalDescription map { scalaxb.toXML[models.binding.TemporalDescription](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TemporalDescription"), __scope, false) } getOrElse {Nil},
        __obj.SpectralRange flatMap { scalaxb.toXML[models.binding.EnumSpectralRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SpectralRange"), __scope, false) },
        __obj.ObservedRegion flatMap { scalaxb.toXML[models.binding.EnumRegion](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ObservedRegion"), __scope, false) },
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Keyword flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Keyword"), __scope, false) },
        __obj.InputResourceID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputResourceID"), __scope, false) },
        __obj.Parameter flatMap { scalaxb.toXML[models.binding.ParameterType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Parameter"), __scope, false) },
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingDocumentFormat extends scalaxb.ElemNameParser[models.binding.Document] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Document")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Document] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessInformation")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Keyword")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DocumentType")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "MIMEType")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputResourceID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.Document(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.AccessInformation](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumDocumentType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[Boolean](scala.xml.Text("true"), scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Document, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.AccessInformation flatMap { scalaxb.toXML[models.binding.AccessInformation](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessInformation"), __scope, false) },
        __obj.Keyword flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Keyword"), __scope, false) },
        scalaxb.toXML[models.binding.EnumDocumentType](__obj.DocumentType, Some("http://impex-fp7.oeaw.ac.at"), Some("DocumentType"), __scope, false),
        scalaxb.toXML[Boolean](__obj.MIMEType, Some("http://impex-fp7.oeaw.ac.at"), Some("MIMEType"), __scope, false),
        __obj.InputResourceID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputResourceID"), __scope, false) })

  }

  trait DefaultBindingSourceFormat extends scalaxb.ElemNameParser[models.binding.Source] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Source")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Source] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SourceType")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "URL")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "MirrorURL")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Checksum")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DataExtent")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.Source(scalaxb.fromXML[models.binding.EnumSourceType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.Checksum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[models.binding.DataExtent](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Source, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.EnumSourceType](__obj.SourceType, Some("http://impex-fp7.oeaw.ac.at"), Some("SourceType"), __scope, false),
        scalaxb.toXML[String](__obj.URL, Some("http://impex-fp7.oeaw.ac.at"), Some("URL"), __scope, false),
        __obj.MirrorURL flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("MirrorURL"), __scope, false) },
        __obj.Checksum map { scalaxb.toXML[models.binding.Checksum](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Checksum"), __scope, false) } getOrElse {Nil},
        __obj.DataExtent map { scalaxb.toXML[models.binding.DataExtent](_, Some("http://impex-fp7.oeaw.ac.at"), Some("DataExtent"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingChecksumFormat extends scalaxb.ElemNameParser[models.binding.Checksum] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Checksum")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Checksum] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "HashValue")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "HashFunction")) ^^
      { case p1 ~ p2 =>
      models.binding.Checksum(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.EnumHashFunction](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.Checksum, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.HashValue, Some("http://impex-fp7.oeaw.ac.at"), Some("HashValue"), __scope, false),
        scalaxb.toXML[models.binding.EnumHashFunction](__obj.HashFunction, Some("http://impex-fp7.oeaw.ac.at"), Some("HashFunction"), __scope, false))

  }

  trait DefaultBindingInstrumentTypeFormat extends scalaxb.ElemNameParser[models.binding.InstrumentType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Instrument")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InstrumentType] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InstrumentType")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InvestigationName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "OperatingSpan")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObservatoryID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      models.binding.InstrumentType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.EnumInstrumentType](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[models.binding.OperatingSpan](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.InstrumentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.InstrumentType flatMap { scalaxb.toXML[models.binding.EnumInstrumentType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InstrumentType"), __scope, false) },
        __obj.InvestigationName flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InvestigationName"), __scope, false) },
        __obj.OperatingSpan map { scalaxb.toXML[models.binding.OperatingSpan](_, Some("http://impex-fp7.oeaw.ac.at"), Some("OperatingSpan"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.ObservatoryID, Some("http://impex-fp7.oeaw.ac.at"), Some("ObservatoryID"), __scope, false),
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingOperatingSpanFormat extends scalaxb.ElemNameParser[models.binding.OperatingSpan] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("OperatingSpan")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.OperatingSpan] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StartDate")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StopDate")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Note")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.OperatingSpan(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.OperatingSpan, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartDate, Some("http://impex-fp7.oeaw.ac.at"), Some("StartDate"), __scope, false),
        __obj.StopDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://impex-fp7.oeaw.ac.at"), Some("StopDate"), __scope, false) } getOrElse {Nil},
        __obj.Note flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Note"), __scope, false) })

  }

  trait DefaultBindingObservatoryFormat extends scalaxb.ElemNameParser[models.binding.Observatory] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Observatory")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Observatory] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObservatoryGroupID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Location")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "OperatingSpan")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      models.binding.Observatory(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.Location](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[models.binding.OperatingSpan](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Observatory, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.ObservatoryGroupID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ObservatoryGroupID"), __scope, false) },
        scalaxb.toXML[models.binding.Location](__obj.Location, Some("http://impex-fp7.oeaw.ac.at"), Some("Location"), __scope, false),
        __obj.OperatingSpan map { scalaxb.toXML[models.binding.OperatingSpan](_, Some("http://impex-fp7.oeaw.ac.at"), Some("OperatingSpan"), __scope, false) } getOrElse {Nil},
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingLocationFormat extends scalaxb.ElemNameParser[models.binding.Location] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Location")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Location] =
      phrase(rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObservatoryRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinateSystemName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Latitude")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Longitude")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Elevation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.Location(p1.toSeq map { scalaxb.fromXML[models.binding.EnumRegion](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.EnumCoordinateSystemName](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Location, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ObservatoryRegion flatMap { scalaxb.toXML[models.binding.EnumRegion](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ObservatoryRegion"), __scope, false) },
        __obj.CoordinateSystemName map { scalaxb.toXML[models.binding.EnumCoordinateSystemName](_, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinateSystemName"), __scope, false) } getOrElse {Nil},
        __obj.Latitude map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Latitude"), __scope, false) } getOrElse {Nil},
        __obj.Longitude map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Longitude"), __scope, false) } getOrElse {Nil},
        __obj.Elevation map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Elevation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingPersonFormat extends scalaxb.ElemNameParser[models.binding.Person] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Person")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Person] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ReleaseDate")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PersonName")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "OrganizationName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Address")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Email")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PhoneNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FaxNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Note")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      models.binding.Person(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Person, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        __obj.ReleaseDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ReleaseDate"), __scope, false) } getOrElse {Nil},
        __obj.PersonName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PersonName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.OrganizationName, Some("http://impex-fp7.oeaw.ac.at"), Some("OrganizationName"), __scope, false),
        __obj.Address map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Address"), __scope, false) } getOrElse {Nil},
        __obj.Email flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Email"), __scope, false) },
        __obj.PhoneNumber flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PhoneNumber"), __scope, false) },
        __obj.FaxNumber map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FaxNumber"), __scope, false) } getOrElse {Nil},
        __obj.Note map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Note"), __scope, false) } getOrElse {Nil},
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingRegistryFormat extends scalaxb.ElemNameParser[models.binding.Registry] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Registry")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Registry] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessURL")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.Registry(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.AccessURL](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Registry, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        scalaxb.toXML[models.binding.AccessURL](__obj.AccessURL, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessURL"), __scope, false),
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingRepositoryFormat extends scalaxb.ElemNameParser[models.binding.Repository] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Repository")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Repository] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessURL")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.Repository(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.AccessURL](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Repository, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        scalaxb.toXML[models.binding.AccessURL](__obj.AccessURL, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessURL"), __scope, false),
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingServiceFormat extends scalaxb.ElemNameParser[models.binding.Service] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Service")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Service] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessURL")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.Service(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.AccessURL](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Service, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        scalaxb.toXML[models.binding.AccessURL](__obj.AccessURL, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessURL"), __scope, false),
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingAnnotationFormat extends scalaxb.ElemNameParser[models.binding.Annotation] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Annotation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Annotation] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ImageURL")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AnnotationType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PhenomenonType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ClassificationMethod")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ConfidenceRating")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TimeSpan")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObservationExtent")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      models.binding.Annotation(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumAnnotationType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[models.binding.EnumPhenomenonType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[models.binding.EnumClassificationMethod](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.EnumConfidenceRating](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[models.binding.TimeSpan](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[models.binding.ObservationExtent](_, scalaxb.ElemName(node) :: stack) },
        p10.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Annotation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.ImageURL map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ImageURL"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[models.binding.EnumAnnotationType](__obj.AnnotationType, Some("http://impex-fp7.oeaw.ac.at"), Some("AnnotationType"), __scope, false),
        __obj.PhenomenonType map { scalaxb.toXML[models.binding.EnumPhenomenonType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PhenomenonType"), __scope, false) } getOrElse {Nil},
        __obj.ClassificationMethod map { scalaxb.toXML[models.binding.EnumClassificationMethod](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ClassificationMethod"), __scope, false) } getOrElse {Nil},
        __obj.ConfidenceRating map { scalaxb.toXML[models.binding.EnumConfidenceRating](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ConfidenceRating"), __scope, false) } getOrElse {Nil},
        __obj.TimeSpan flatMap { scalaxb.toXML[models.binding.TimeSpan](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TimeSpan"), __scope, false) },
        __obj.ObservationExtent flatMap { scalaxb.toXML[models.binding.ObservationExtent](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ObservationExtent"), __scope, false) },
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingObservationExtentFormat extends scalaxb.ElemNameParser[models.binding.ObservationExtent] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("ObservationExtent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ObservationExtent] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObservedRegion")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StartLocation")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StopLocation")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Note")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.ObservationExtent(p1.headOption map { scalaxb.fromXML[models.binding.EnumRegion](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ObservationExtent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ObservedRegion map { scalaxb.toXML[models.binding.EnumRegion](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ObservedRegion"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.StartLocation, Some("http://impex-fp7.oeaw.ac.at"), Some("StartLocation"), __scope, false),
        scalaxb.toXML[String](__obj.StopLocation, Some("http://impex-fp7.oeaw.ac.at"), Some("StopLocation"), __scope, false),
        __obj.Note flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Note"), __scope, false) })

  }

  def buildBindingEnumVersionFormat = new DefaultBindingEnumVersionFormat {}
  trait DefaultBindingEnumVersionFormat extends scalaxb.XMLFormat[models.binding.EnumVersion] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumVersion] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumVersion.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumVersion.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumVersion, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumAccessRightsFormat = new DefaultBindingEnumAccessRightsFormat {}
  trait DefaultBindingEnumAccessRightsFormat extends scalaxb.XMLFormat[models.binding.EnumAccessRights] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumAccessRights] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumAccessRights.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumAccessRights.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumAccessRights, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumAnnotationTypeFormat = new DefaultBindingEnumAnnotationTypeFormat {}
  trait DefaultBindingEnumAnnotationTypeFormat extends scalaxb.XMLFormat[models.binding.EnumAnnotationType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumAnnotationType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumAnnotationType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumAnnotationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumAnnotationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumAssociationTypeFormat = new DefaultBindingEnumAssociationTypeFormat {}
  trait DefaultBindingEnumAssociationTypeFormat extends scalaxb.XMLFormat[models.binding.EnumAssociationType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumAssociationType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumAssociationType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumAssociationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumAssociationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumAvailabilityFormat = new DefaultBindingEnumAvailabilityFormat {}
  trait DefaultBindingEnumAvailabilityFormat extends scalaxb.XMLFormat[models.binding.EnumAvailability] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumAvailability] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumAvailability.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumAvailability.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumAvailability, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumClassificationMethodFormat = new DefaultBindingEnumClassificationMethodFormat {}
  trait DefaultBindingEnumClassificationMethodFormat extends scalaxb.XMLFormat[models.binding.EnumClassificationMethod] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumClassificationMethod] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumClassificationMethod.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumClassificationMethod.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumClassificationMethod, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumComponentFormat = new DefaultBindingEnumComponentFormat {}
  trait DefaultBindingEnumComponentFormat extends scalaxb.XMLFormat[models.binding.EnumComponent] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumComponent] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumComponent.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumComponent.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumComponent, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumConfidenceRatingFormat = new DefaultBindingEnumConfidenceRatingFormat {}
  trait DefaultBindingEnumConfidenceRatingFormat extends scalaxb.XMLFormat[models.binding.EnumConfidenceRating] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumConfidenceRating] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumConfidenceRating.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumConfidenceRating.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumConfidenceRating, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumCoordinateRepresentationFormat = new DefaultBindingEnumCoordinateRepresentationFormat {}
  trait DefaultBindingEnumCoordinateRepresentationFormat extends scalaxb.XMLFormat[models.binding.EnumCoordinateRepresentation] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumCoordinateRepresentation] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumCoordinateRepresentation.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumCoordinateRepresentation.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumCoordinateRepresentation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumCoordinateSystemNameFormat = new DefaultBindingEnumCoordinateSystemNameFormat {}
  trait DefaultBindingEnumCoordinateSystemNameFormat extends scalaxb.XMLFormat[models.binding.EnumCoordinateSystemName] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumCoordinateSystemName] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumCoordinateSystemName.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumCoordinateSystemName.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumCoordinateSystemName, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumDirectionAngleFormat = new DefaultBindingEnumDirectionAngleFormat {}
  trait DefaultBindingEnumDirectionAngleFormat extends scalaxb.XMLFormat[models.binding.EnumDirectionAngle] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumDirectionAngle] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumDirectionAngle.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumDirectionAngle.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumDirectionAngle, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumDisplayTypeFormat = new DefaultBindingEnumDisplayTypeFormat {}
  trait DefaultBindingEnumDisplayTypeFormat extends scalaxb.XMLFormat[models.binding.EnumDisplayType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumDisplayType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumDisplayType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumDisplayType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumDisplayType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumDocumentTypeFormat = new DefaultBindingEnumDocumentTypeFormat {}
  trait DefaultBindingEnumDocumentTypeFormat extends scalaxb.XMLFormat[models.binding.EnumDocumentType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumDocumentType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumDocumentType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumDocumentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumDocumentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumEarthFormat = new DefaultBindingEnumEarthFormat {}
  trait DefaultBindingEnumEarthFormat extends scalaxb.XMLFormat[models.binding.EnumEarth] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumEarth] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumEarth.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumEarth.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumEarth, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumEncodingFormat = new DefaultBindingEnumEncodingFormat {}
  trait DefaultBindingEnumEncodingFormat extends scalaxb.XMLFormat[models.binding.EnumEncoding] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumEncoding] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumEncoding.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumEncoding.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumEncoding, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumFieldQuantityFormat = new DefaultBindingEnumFieldQuantityFormat {}
  trait DefaultBindingEnumFieldQuantityFormat extends scalaxb.XMLFormat[models.binding.EnumFieldQuantity] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumFieldQuantity] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumFieldQuantity.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumFieldQuantity.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumFieldQuantity, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumFormatFormat = new DefaultBindingEnumFormatFormat {}
  trait DefaultBindingEnumFormatFormat extends scalaxb.XMLFormat[models.binding.EnumFormat] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumFormat] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumFormat.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumFormat.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumFormat, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumHardcopyFormat = new DefaultBindingEnumHardcopyFormat {}
  trait DefaultBindingEnumHardcopyFormat extends scalaxb.XMLFormat[models.binding.EnumHardcopy] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumHardcopy] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumHardcopy.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumHardcopy.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumHardcopy, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumHashFunctionFormat = new DefaultBindingEnumHashFunctionFormat {}
  trait DefaultBindingEnumHashFunctionFormat extends scalaxb.XMLFormat[models.binding.EnumHashFunction] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumHashFunction] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumHashFunction.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumHashFunction.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumHashFunction, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumHeliosphereFormat = new DefaultBindingEnumHeliosphereFormat {}
  trait DefaultBindingEnumHeliosphereFormat extends scalaxb.XMLFormat[models.binding.EnumHeliosphere] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumHeliosphere] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumHeliosphere.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumHeliosphere.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumHeliosphere, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumInstrumentTypeFormat = new DefaultBindingEnumInstrumentTypeFormat {}
  trait DefaultBindingEnumInstrumentTypeFormat extends scalaxb.XMLFormat[models.binding.EnumInstrumentType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumInstrumentType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumInstrumentType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumInstrumentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumInstrumentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumIntegralFormat = new DefaultBindingEnumIntegralFormat {}
  trait DefaultBindingEnumIntegralFormat extends scalaxb.XMLFormat[models.binding.EnumIntegral] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumIntegral] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumIntegral.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumIntegral.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumIntegral, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumIonosphereFormat = new DefaultBindingEnumIonosphereFormat {}
  trait DefaultBindingEnumIonosphereFormat extends scalaxb.XMLFormat[models.binding.EnumIonosphere] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumIonosphere] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumIonosphere.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumIonosphere.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumIonosphere, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumMagnetosphereFormat = new DefaultBindingEnumMagnetosphereFormat {}
  trait DefaultBindingEnumMagnetosphereFormat extends scalaxb.XMLFormat[models.binding.EnumMagnetosphere] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumMagnetosphere] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumMagnetosphere.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumMagnetosphere.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumMagnetosphere, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumMeasurementTypeFormat = new DefaultBindingEnumMeasurementTypeFormat {}
  trait DefaultBindingEnumMeasurementTypeFormat extends scalaxb.XMLFormat[models.binding.EnumMeasurementType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumMeasurementType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumMeasurementType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumMeasurementType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumMeasurementType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumMixedQuantityFormat = new DefaultBindingEnumMixedQuantityFormat {}
  trait DefaultBindingEnumMixedQuantityFormat extends scalaxb.XMLFormat[models.binding.EnumMixedQuantity] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumMixedQuantity] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumMixedQuantity.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumMixedQuantity.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumMixedQuantity, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumNearSurfaceFormat = new DefaultBindingEnumNearSurfaceFormat {}
  trait DefaultBindingEnumNearSurfaceFormat extends scalaxb.XMLFormat[models.binding.EnumNearSurface] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumNearSurface] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumNearSurface.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumNearSurface.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumNearSurface, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumParticleQuantityFormat = new DefaultBindingEnumParticleQuantityFormat {}
  trait DefaultBindingEnumParticleQuantityFormat extends scalaxb.XMLFormat[models.binding.EnumParticleQuantity] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumParticleQuantity] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumParticleQuantity.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumParticleQuantity.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumParticleQuantity, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumParticleTypeFormat = new DefaultBindingEnumParticleTypeFormat {}
  trait DefaultBindingEnumParticleTypeFormat extends scalaxb.XMLFormat[models.binding.EnumParticleType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumParticleType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumParticleType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumParticleType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumParticleType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumPhenomenonTypeFormat = new DefaultBindingEnumPhenomenonTypeFormat {}
  trait DefaultBindingEnumPhenomenonTypeFormat extends scalaxb.XMLFormat[models.binding.EnumPhenomenonType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumPhenomenonType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumPhenomenonType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumPhenomenonType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumPhenomenonType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumProcessingLevelFormat = new DefaultBindingEnumProcessingLevelFormat {}
  trait DefaultBindingEnumProcessingLevelFormat extends scalaxb.XMLFormat[models.binding.EnumProcessingLevel] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumProcessingLevel] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumProcessingLevel.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumProcessingLevel.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumProcessingLevel, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumProjectionFormat = new DefaultBindingEnumProjectionFormat {}
  trait DefaultBindingEnumProjectionFormat extends scalaxb.XMLFormat[models.binding.EnumProjection] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumProjection] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumProjection.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumProjection.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumProjection, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumImpexSpecialRegionFormat = new DefaultBindingEnumImpexSpecialRegionFormat {}
  trait DefaultBindingEnumImpexSpecialRegionFormat extends scalaxb.XMLFormat[models.binding.EnumImpexSpecialRegion] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumImpexSpecialRegion] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumImpexSpecialRegion.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumImpexSpecialRegion.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumImpexSpecialRegion, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumQualifierFormat = new DefaultBindingEnumQualifierFormat {}
  trait DefaultBindingEnumQualifierFormat extends scalaxb.XMLFormat[models.binding.EnumQualifier] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumQualifier] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumQualifier.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumQualifier.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumQualifier, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumRegionFormat = new DefaultBindingEnumRegionFormat {}
  trait DefaultBindingEnumRegionFormat extends scalaxb.XMLFormat[models.binding.EnumRegion] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumRegion] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumRegion.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumRegion.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumRegion, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumRenderingAxisFormat = new DefaultBindingEnumRenderingAxisFormat {}
  trait DefaultBindingEnumRenderingAxisFormat extends scalaxb.XMLFormat[models.binding.EnumRenderingAxis] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumRenderingAxis] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumRenderingAxis.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumRenderingAxis.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumRenderingAxis, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumRoleFormat = new DefaultBindingEnumRoleFormat {}
  trait DefaultBindingEnumRoleFormat extends scalaxb.XMLFormat[models.binding.EnumRole] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumRole] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumRole.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumRole.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumRole, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumScaleTypeFormat = new DefaultBindingEnumScaleTypeFormat {}
  trait DefaultBindingEnumScaleTypeFormat extends scalaxb.XMLFormat[models.binding.EnumScaleType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumScaleType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumScaleType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumScaleType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumScaleType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumSourceTypeFormat = new DefaultBindingEnumSourceTypeFormat {}
  trait DefaultBindingEnumSourceTypeFormat extends scalaxb.XMLFormat[models.binding.EnumSourceType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumSourceType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumSourceType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumSourceType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumSourceType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumSpectralRangeFormat = new DefaultBindingEnumSpectralRangeFormat {}
  trait DefaultBindingEnumSpectralRangeFormat extends scalaxb.XMLFormat[models.binding.EnumSpectralRange] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumSpectralRange] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumSpectralRange.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumSpectralRange.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumSpectralRange, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumSunFormat = new DefaultBindingEnumSunFormat {}
  trait DefaultBindingEnumSunFormat extends scalaxb.XMLFormat[models.binding.EnumSun] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumSun] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumSun.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumSun.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumSun, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumSupportQuantityFormat = new DefaultBindingEnumSupportQuantityFormat {}
  trait DefaultBindingEnumSupportQuantityFormat extends scalaxb.XMLFormat[models.binding.EnumSupportQuantity] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumSupportQuantity] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumSupportQuantity.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumSupportQuantity.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumSupportQuantity, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumTextFormat = new DefaultBindingEnumTextFormat {}
  trait DefaultBindingEnumTextFormat extends scalaxb.XMLFormat[models.binding.EnumText] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumText] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumText.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumText.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumText, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumWaveQuantityFormat = new DefaultBindingEnumWaveQuantityFormat {}
  trait DefaultBindingEnumWaveQuantityFormat extends scalaxb.XMLFormat[models.binding.EnumWaveQuantity] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumWaveQuantity] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumWaveQuantity.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumWaveQuantity.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumWaveQuantity, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumWaveTypeFormat = new DefaultBindingEnumWaveTypeFormat {}
  trait DefaultBindingEnumWaveTypeFormat extends scalaxb.XMLFormat[models.binding.EnumWaveType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumWaveType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumWaveType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumWaveType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumWaveType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumWavesFormat = new DefaultBindingEnumWavesFormat {}
  trait DefaultBindingEnumWavesFormat extends scalaxb.XMLFormat[models.binding.EnumWaves] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumWaves] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumWaves.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumWaves.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumWaves, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  // ATTENTION WE HAVE CHANGED THE RegionBegin/RegionEnd element to String from Float
  trait DefaultBindingGranuleFormat extends scalaxb.ElemNameParser[models.binding.Granule] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Granule")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Granule] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ReleaseDate")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ExpirationDate")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParentID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PriorID")) ~ 
      (((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StartDate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionBegin")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StopDate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionEnd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Source")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      models.binding.Granule(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6,
        p7,
        p8.toSeq map { scalaxb.fromXML[models.binding.Source](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Granule, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.ReleaseDate, Some("http://impex-fp7.oeaw.ac.at"), Some("ReleaseDate"), __scope, false),
        __obj.ExpirationDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ExpirationDate"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.ParentID, Some("http://impex-fp7.oeaw.ac.at"), Some("ParentID"), __scope, false),
        __obj.PriorID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PriorID"), __scope, false) },
        Some(__obj.granuleoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)} get,
        __obj.granuleoption2 map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Source flatMap { scalaxb.toXML[models.binding.Source](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Source"), __scope, false) })

  }

  trait DefaultBindingNumericalOutputFormat extends scalaxb.ElemNameParser[models.binding.NumericalOutput] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("NumericalOutput")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.NumericalOutput] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderResourceName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderVersion")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedInstrumentID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "MeasurementType")) ~ 
      opt(((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TemporalDescription")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.TemporalDescription](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpatialDescription")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SpatialDescription](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpectralRange")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Keyword")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputResourceID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Parameter")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationProduct")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Property")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 =>
      models.binding.NumericalOutput(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.AccessInformation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.EnumProcessingLevel](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[models.binding.EnumMeasurementType](_, scalaxb.ElemName(node) :: stack) },
        p10,
        p11.toSeq map { scalaxb.fromXML[models.binding.EnumSpectralRange](_, scalaxb.ElemName(node) :: stack) },
        p12.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.toSeq map { scalaxb.fromXML[models.binding.ParameterType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumProduct](p17, scalaxb.ElemName(node) :: stack),
        p18.toSeq map { scalaxb.fromXML[models.binding.Property](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.NumericalOutput, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.AccessInformation flatMap { scalaxb.toXML[models.binding.AccessInformation](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessInformation"), __scope, false) },
        __obj.ProcessingLevel map { scalaxb.toXML[models.binding.EnumProcessingLevel](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderResourceName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderResourceName"), __scope, false) } getOrElse {Nil},
        __obj.ProviderProcessingLevel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderVersion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderVersion"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedInstrumentID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedInstrumentID"), __scope, false) },
        __obj.MeasurementType flatMap { scalaxb.toXML[models.binding.EnumMeasurementType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("MeasurementType"), __scope, false) },
        __obj.numericaloutputoption map { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.NumericalOutputOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.SpectralRange flatMap { scalaxb.toXML[models.binding.EnumSpectralRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SpectralRange"), __scope, false) },
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Keyword flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Keyword"), __scope, false) },
        __obj.InputResourceID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputResourceID"), __scope, false) },
        __obj.Parameter flatMap { scalaxb.toXML[models.binding.ParameterType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Parameter"), __scope, false) },
        scalaxb.toXML[models.binding.EnumProduct](__obj.SimulationProduct, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulationProduct"), __scope, false),
        __obj.Property flatMap { scalaxb.toXML[models.binding.Property](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Property"), __scope, false) },
        __obj.Extension map { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingDisplayOutputFormat extends scalaxb.ElemNameParser[models.binding.DisplayOutput] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("DisplayOutput")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DisplayOutput] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderResourceName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderVersion")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedInstrumentID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "MeasurementType")) ~ 
      opt(((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TemporalDescription")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.TemporalDescription](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpatialDescription")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SpatialDescription](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpectralRange")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DisplayCadence")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Keyword")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputResourceID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Parameter")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationProduct")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Property")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      models.binding.DisplayOutput(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.AccessInformation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.EnumProcessingLevel](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[models.binding.EnumMeasurementType](_, scalaxb.ElemName(node) :: stack) },
        p10,
        p11.toSeq map { scalaxb.fromXML[models.binding.EnumSpectralRange](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) },
        p13.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.toSeq map { scalaxb.fromXML[models.binding.ParameterType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumProduct](p18, scalaxb.ElemName(node) :: stack),
        p19.toSeq map { scalaxb.fromXML[models.binding.Property](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DisplayOutput, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.AccessInformation flatMap { scalaxb.toXML[models.binding.AccessInformation](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessInformation"), __scope, false) },
        __obj.ProcessingLevel map { scalaxb.toXML[models.binding.EnumProcessingLevel](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderResourceName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderResourceName"), __scope, false) } getOrElse {Nil},
        __obj.ProviderProcessingLevel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderVersion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderVersion"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedInstrumentID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedInstrumentID"), __scope, false) },
        __obj.MeasurementType flatMap { scalaxb.toXML[models.binding.EnumMeasurementType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("MeasurementType"), __scope, false) },
        __obj.displayoutputoption map { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.DisplayOutputOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.SpectralRange flatMap { scalaxb.toXML[models.binding.EnumSpectralRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SpectralRange"), __scope, false) },
        __obj.DisplayCadence map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("DisplayCadence"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Keyword flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Keyword"), __scope, false) },
        __obj.InputResourceID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputResourceID"), __scope, false) },
        __obj.Parameter flatMap { scalaxb.toXML[models.binding.ParameterType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Parameter"), __scope, false) },
        scalaxb.toXML[models.binding.EnumProduct](__obj.SimulationProduct, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulationProduct"), __scope, false),
        __obj.Property flatMap { scalaxb.toXML[models.binding.Property](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Property"), __scope, false) },
        __obj.Extension map { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingSimulationModelTypeFormat extends scalaxb.ElemNameParser[models.binding.SimulationModelType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("SimulationModel")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SimulationModelType] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Versions")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CodeLanguage")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TemporalDependence")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpatialDescription")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputProperties")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "OutputParameters")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ModelURL")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      models.binding.SimulationModelType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[models.binding.Versions](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumSimulationType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[models.binding.EnumYN](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.SpatialDescription](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[models.binding.InputProperties](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[models.binding.OutputParameters](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SimulationModelType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.Versions map { scalaxb.toXML[models.binding.Versions](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Versions"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[models.binding.EnumSimulationType](__obj.SimulationType, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulationType"), __scope, false),
        __obj.CodeLanguage map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("CodeLanguage"), __scope, false) } getOrElse {Nil},
        __obj.TemporalDependence map { scalaxb.toXML[models.binding.EnumYN](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TemporalDependence"), __scope, false) } getOrElse {Nil},
        __obj.SpatialDescription map { scalaxb.toXML[models.binding.SpatialDescription](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SpatialDescription"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        __obj.InputProperties map { scalaxb.toXML[models.binding.InputProperties](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputProperties"), __scope, false) } getOrElse {Nil},
        __obj.OutputParameters map { scalaxb.toXML[models.binding.OutputParameters](_, Some("http://impex-fp7.oeaw.ac.at"), Some("OutputParameters"), __scope, false) } getOrElse {Nil},
        __obj.ModelURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ModelURL"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingInputPropertiesFormat extends scalaxb.ElemNameParser[models.binding.InputProperties] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("InputProperties")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InputProperties] =
      phrase(rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Property")) ^^
      { case p1 =>
      models.binding.InputProperties(p1.toSeq map { scalaxb.fromXML[models.binding.Property](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: models.binding.InputProperties, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Property flatMap { scalaxb.toXML[models.binding.Property](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Property"), __scope, false) })

  }

  trait DefaultBindingOutputParametersFormat extends scalaxb.ElemNameParser[models.binding.OutputParameters] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("OutputParameters")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.OutputParameters] =
      phrase(rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Parameter")) ^^
      { case p1 =>
      models.binding.OutputParameters(p1.toSeq map { scalaxb.fromXML[models.binding.ParameterType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: models.binding.OutputParameters, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Parameter flatMap { scalaxb.toXML[models.binding.ParameterType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Parameter"), __scope, false) })

  }

  trait DefaultBindingSimulationRunFormat extends scalaxb.ElemNameParser[models.binding.SimulationRun] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("SimulationRun")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SimulationRun] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderResourceName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderVersion")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Model")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TemporalDependence")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "LikelihoodRating")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Keyword")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationTime")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationDomain")) ~ 
      rep(((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputPopulation")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputPopulation](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputParameter")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputParameter](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionParameter")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.RegionParameter](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputPopulation")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputPopulation](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputParameter")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputParameter](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionParameter")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.RegionParameter](x, scalaxb.ElemName(node) :: stack)))) | 
      ((any(_ => true) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputField")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputField](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputProcess")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputProcess](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputField")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputField](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputProcess")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputProcess](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      models.binding.SimulationRun(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.AccessInformation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.Model](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[models.binding.EnumYN](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumConfidenceRating](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.SimulationTime](p14, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.SimulationDomain](p15, scalaxb.ElemName(node) :: stack),
        p16,
        p17.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SimulationRun, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.AccessInformation flatMap { scalaxb.toXML[models.binding.AccessInformation](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessInformation"), __scope, false) },
        __obj.ProviderResourceName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderResourceName"), __scope, false) } getOrElse {Nil},
        __obj.ProviderProcessingLevel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderVersion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderVersion"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[models.binding.Model](__obj.Model, Some("http://impex-fp7.oeaw.ac.at"), Some("Model"), __scope, false),
        __obj.TemporalDependence map { scalaxb.toXML[models.binding.EnumYN](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TemporalDependence"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        scalaxb.toXML[models.binding.EnumConfidenceRating](__obj.LikelihoodRating, Some("http://impex-fp7.oeaw.ac.at"), Some("LikelihoodRating"), __scope, false),
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Keyword flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Keyword"), __scope, false) },
        __obj.InputResourceID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputResourceID"), __scope, false) },
        scalaxb.toXML[models.binding.SimulationTime](__obj.SimulationTime, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulationTime"), __scope, false),
        scalaxb.toXML[models.binding.SimulationDomain](__obj.SimulationDomain, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulationDomain"), __scope, false),
        __obj.InputEntity flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingModelFormat extends scalaxb.ElemNameParser[models.binding.Model] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Model")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Model] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ModelID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "VersionID")) ^^
      { case p1 ~ p2 =>
      models.binding.Model(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Model, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ModelID, Some("http://impex-fp7.oeaw.ac.at"), Some("ModelID"), __scope, false),
        __obj.VersionID map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("VersionID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingModelVersionFormat extends scalaxb.ElemNameParser[models.binding.ModelVersion] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("ModelVersion")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ModelVersion] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "VersionID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ReleaseDate")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.ModelVersion(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ModelVersion, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.VersionID, Some("http://impex-fp7.oeaw.ac.at"), Some("VersionID"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.ReleaseDate, Some("http://impex-fp7.oeaw.ac.at"), Some("ReleaseDate"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingVersionsFormat extends scalaxb.ElemNameParser[models.binding.Versions] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Versions")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Versions] =
      phrase(rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ModelVersion")) ^^
      { case p1 =>
      models.binding.Versions(p1.toSeq map { scalaxb.fromXML[models.binding.ModelVersion](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: models.binding.Versions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ModelVersion flatMap { scalaxb.toXML[models.binding.ModelVersion](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ModelVersion"), __scope, false) })

  }

  trait DefaultBindingRegionParameterFormat extends scalaxb.ElemNameParser[models.binding.RegionParameter] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("RegionParameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.RegionParameter] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Radius")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SubLongitude")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Period")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObjectMass")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputTableURL")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Property")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      models.binding.RegionParameter(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[models.binding.Property](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.RegionParameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.SimulatedRegion, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Radius map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Radius"), __scope, false) } getOrElse {Nil},
        __obj.SubLongitude map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SubLongitude"), __scope, false) } getOrElse {Nil},
        __obj.Period map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Period"), __scope, false) } getOrElse {Nil},
        __obj.ObjectMass map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ObjectMass"), __scope, false) } getOrElse {Nil},
        __obj.InputTableURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputTableURL"), __scope, false) } getOrElse {Nil},
        __obj.Property flatMap { scalaxb.toXML[models.binding.Property](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Property"), __scope, false) })

  }

  trait DefaultBindingInputParameterFormat extends scalaxb.ElemNameParser[models.binding.InputParameter] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("InputParameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InputParameter] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParameterQuantity")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Property")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.InputParameter(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        p7.toSeq map { scalaxb.fromXML[models.binding.Property](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.InputParameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[String](__obj.ParameterQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("ParameterQuantity"), __scope, false),
        __obj.Property flatMap { scalaxb.toXML[models.binding.Property](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Property"), __scope, false) })

  }

  trait DefaultBindingPropertyFormat extends scalaxb.ElemNameParser[models.binding.Property] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Property")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Property] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PropertyQuantity")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "UnitsConversion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PropertyLabel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PropertyValue")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PropertyTableURL")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMin")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMax")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PropertyModel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ModelURL")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      models.binding.Property(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Property, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Name map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.PropertyQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("PropertyQuantity"), __scope, false),
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        __obj.Units map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false) } getOrElse {Nil},
        __obj.UnitsConversion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("UnitsConversion"), __scope, false) } getOrElse {Nil},
        __obj.PropertyLabel map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PropertyLabel"), __scope, false) } getOrElse {Nil},
        __obj.PropertyValue map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PropertyValue"), __scope, false) } getOrElse {Nil},
        __obj.PropertyTableURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PropertyTableURL"), __scope, false) } getOrElse {Nil},
        __obj.ValidMin map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMin"), __scope, false) } getOrElse {Nil},
        __obj.ValidMax map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMax"), __scope, false) } getOrElse {Nil},
        __obj.PropertyModel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PropertyModel"), __scope, false) } getOrElse {Nil},
        __obj.ModelURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ModelURL"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingInputPopulationFormat extends scalaxb.ElemNameParser[models.binding.InputPopulation] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("InputPopulation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InputPopulation] =
      phrase((((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Set")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParameterKey")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParticleType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ChemicalFormula")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AtomicNumber"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => models.binding.InputPopulationSequence1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumParticleType](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationMassNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationChargeState")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationDensity")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationTemperature")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationFlowSpeed")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Distribution")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProductionRate")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TotalProductionRate")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputTableURL")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Profile"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => models.binding.InputPopulationSequence2(p1.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ModelURL"))) ^^ 
        { case p1 => models.binding.InputPopulationSequence3(p1.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.InputPopulation(p1,
        p2,
        p3) })
    
    def writesChildNodes(__obj: models.binding.InputPopulation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.InputPopulationSequence1](__obj.inputpopulationsequence1, None, Some("inputpopulationsequence1"), __scope, false),
        scalaxb.toXML[models.binding.InputPopulationSequence2](__obj.inputpopulationsequence2, None, Some("inputpopulationsequence2"), __scope, false),
        scalaxb.toXML[models.binding.InputPopulationSequence3](__obj.inputpopulationsequence3, None, Some("inputpopulationsequence3"), __scope, false))

  }

  trait DefaultBindingInputPopulationSequence3Format extends scalaxb.XMLFormat[models.binding.InputPopulationSequence3] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.InputPopulationSequence3] = Left("don't call me.")
    
    def writes(__obj: models.binding.InputPopulationSequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      __obj.ModelURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ModelURL"), __scope, false) } getOrElse {Nil}


  }

  trait DefaultBindingInputPopulationSequence2Format extends scalaxb.XMLFormat[models.binding.InputPopulationSequence2] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.InputPopulationSequence2] = Left("don't call me.")
    
    def writes(__obj: models.binding.InputPopulationSequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.PopulationMassNumber map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationMassNumber"), __scope, false) } getOrElse {Nil},
        __obj.PopulationChargeState map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationChargeState"), __scope, false) } getOrElse {Nil},
        __obj.PopulationDensity map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationDensity"), __scope, false) } getOrElse {Nil},
        __obj.PopulationTemperature map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationTemperature"), __scope, false) } getOrElse {Nil},
        __obj.PopulationFlowSpeed map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationFlowSpeed"), __scope, false) } getOrElse {Nil},
        __obj.Distribution map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Distribution"), __scope, false) } getOrElse {Nil},
        __obj.ProductionRate map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProductionRate"), __scope, false) } getOrElse {Nil},
        __obj.TotalProductionRate map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TotalProductionRate"), __scope, false) } getOrElse {Nil},
        __obj.InputTableURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputTableURL"), __scope, false) } getOrElse {Nil},
        __obj.Profile map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Profile"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultBindingInputPopulationSequence1Format extends scalaxb.XMLFormat[models.binding.InputPopulationSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.InputPopulationSequence1] = Left("don't call me.")
    
    def writes(__obj: models.binding.InputPopulationSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false),
        __obj.Set flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Set"), __scope, false) },
        __obj.ParameterKey map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParameterKey"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[models.binding.EnumParticleType](__obj.ParticleType, Some("http://impex-fp7.oeaw.ac.at"), Some("ParticleType"), __scope, false),
        __obj.ChemicalFormula map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ChemicalFormula"), __scope, false) } getOrElse {Nil},
        __obj.AtomicNumber map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AtomicNumber"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultBindingInputFieldFormat extends scalaxb.ElemNameParser[models.binding.InputField] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("InputField")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InputField] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Set")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParameterKey")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinateSystem")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FieldQuantity")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "UnitsConversion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputLabel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FieldValue")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputTableURL")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMin")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMax")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FieldModel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ModelURL")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      models.binding.InputField(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.CoordinateSystem](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumFieldQuantity](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.InputField, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false),
        __obj.Set flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Set"), __scope, false) },
        __obj.ParameterKey map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParameterKey"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        __obj.CoordinateSystem map { scalaxb.toXML[models.binding.CoordinateSystem](_, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinateSystem"), __scope, false) } getOrElse {Nil},
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[models.binding.EnumFieldQuantity](__obj.FieldQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("FieldQuantity"), __scope, false),
        __obj.Units map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false) } getOrElse {Nil},
        __obj.UnitsConversion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("UnitsConversion"), __scope, false) } getOrElse {Nil},
        __obj.InputLabel map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputLabel"), __scope, false) } getOrElse {Nil},
        __obj.FieldValue map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FieldValue"), __scope, false) } getOrElse {Nil},
        __obj.InputTableURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputTableURL"), __scope, false) } getOrElse {Nil},
        __obj.ValidMin map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMin"), __scope, false) } getOrElse {Nil},
        __obj.ValidMax map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMax"), __scope, false) } getOrElse {Nil},
        __obj.FieldModel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FieldModel"), __scope, false) } getOrElse {Nil},
        __obj.ModelURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ModelURL"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingInputProcessFormat extends scalaxb.ElemNameParser[models.binding.InputProcess] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("InputProcess")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InputProcess] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Set")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParameterKey")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "UnitsConversion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessCoefficient")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessCoeffType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessModel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ModelURL")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      models.binding.InputProcess(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumProcessType](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[models.binding.EnumProcCoefType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.InputProcess, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false),
        __obj.Set flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Set"), __scope, false) },
        __obj.ParameterKey map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParameterKey"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        scalaxb.toXML[models.binding.EnumProcessType](__obj.ProcessType, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessType"), __scope, false),
        __obj.Units map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false) } getOrElse {Nil},
        __obj.UnitsConversion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("UnitsConversion"), __scope, false) } getOrElse {Nil},
        __obj.ProcessCoefficient map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessCoefficient"), __scope, false) } getOrElse {Nil},
        __obj.ProcessCoeffType map { scalaxb.toXML[models.binding.EnumProcCoefType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessCoeffType"), __scope, false) } getOrElse {Nil},
        __obj.ProcessModel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessModel"), __scope, false) } getOrElse {Nil},
        __obj.ModelURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ModelURL"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingSimulationDomainFormat extends scalaxb.ElemNameParser[models.binding.SimulationDomain] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("SimulationDomain")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SimulationDomain] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinateSystem")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpatialDimension")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "VelocityDimension")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FieldDimension")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "UnitsConversion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinatesLabel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMin")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMax")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "GridStructure")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "GridCellSize")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Symmetry")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "BoundaryConditions")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      models.binding.SimulationDomain(scalaxb.fromXML[models.binding.CoordinateSystem](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigInt](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Seq[Float]](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[models.binding.EnumSymmetry](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[models.binding.BoundaryConditions](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SimulationDomain, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.CoordinateSystem](__obj.CoordinateSystem, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinateSystem"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigInt](__obj.SpatialDimension, Some("http://impex-fp7.oeaw.ac.at"), Some("SpatialDimension"), __scope, false),
        __obj.VelocityDimension map { scalaxb.toXML[BigInt](_, Some("http://impex-fp7.oeaw.ac.at"), Some("VelocityDimension"), __scope, false) } getOrElse {Nil},
        __obj.FieldDimension map { scalaxb.toXML[BigInt](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FieldDimension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.Units, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false),
        __obj.UnitsConversion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("UnitsConversion"), __scope, false) } getOrElse {Nil},
        __obj.CoordinatesLabel map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinatesLabel"), __scope, false) } getOrElse {Nil},
        __obj.ValidMin map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMin"), __scope, false) } getOrElse {Nil},
        __obj.ValidMax map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMax"), __scope, false) } getOrElse {Nil},
        __obj.GridStructure map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("GridStructure"), __scope, false) } getOrElse {Nil},
        __obj.GridCellSize map { scalaxb.toXML[Seq[Float]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("GridCellSize"), __scope, false) } getOrElse {Nil},
        __obj.Symmetry map { scalaxb.toXML[models.binding.EnumSymmetry](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Symmetry"), __scope, false) } getOrElse {Nil},
        __obj.BoundaryConditions map { scalaxb.toXML[models.binding.BoundaryConditions](_, Some("http://impex-fp7.oeaw.ac.at"), Some("BoundaryConditions"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingBoundaryConditionsFormat extends scalaxb.ElemNameParser[models.binding.BoundaryConditions] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("BoundaryConditions")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.BoundaryConditions] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParticleBoundary")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FieldBoundary")) ^^
      { case p1 ~ p2 =>
      models.binding.BoundaryConditions(p1.headOption map { scalaxb.fromXML[models.binding.ElementBoundary](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.ElementBoundary](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.BoundaryConditions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ParticleBoundary map { scalaxb.toXML[models.binding.ElementBoundary](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParticleBoundary"), __scope, false) } getOrElse {Nil},
        __obj.FieldBoundary map { scalaxb.toXML[models.binding.ElementBoundary](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FieldBoundary"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingSimulationTimeFormat extends scalaxb.ElemNameParser[models.binding.SimulationTime] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("SimulationTime")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SimulationTime] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Duration")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TimeStart")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TimeStop")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TimeStep")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DiagnosisTimeStep")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.SimulationTime(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.DiagnosisTimeStep](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SimulationTime, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Duration map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Duration"), __scope, false) } getOrElse {Nil},
        __obj.TimeStart map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TimeStart"), __scope, false) } getOrElse {Nil},
        __obj.TimeStop map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TimeStop"), __scope, false) } getOrElse {Nil},
        __obj.TimeStep map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TimeStep"), __scope, false) } getOrElse {Nil},
        __obj.DiagnosisTimeStep map { scalaxb.toXML[models.binding.DiagnosisTimeStep](_, Some("http://impex-fp7.oeaw.ac.at"), Some("DiagnosisTimeStep"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingDiagnosisTimeStepFormat extends scalaxb.ElemNameParser[models.binding.DiagnosisTimeStep] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("DiagnosisTimeStep")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DiagnosisTimeStep] =
      phrase(rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SavedQuantity")) ^^
      { case p1 =>
      models.binding.DiagnosisTimeStep(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@TimeStart").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@Duration").headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.DiagnosisTimeStep, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.TimeStart foreach { x => attr = scala.xml.Attribute(null, "TimeStart", x.toString, attr) }
      __obj.Duration foreach { x => attr = scala.xml.Attribute(null, "Duration", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.DiagnosisTimeStep, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.SavedQuantity flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SavedQuantity"), __scope, false) })

  }

  trait DefaultBindingElementBoundaryFormat extends scalaxb.ElemNameParser[models.binding.ElementBoundary] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("ElementBoundary")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ElementBoundary] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FrontWall")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "BackWall")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SideWall")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Obstacle")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.ElementBoundary(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ElementBoundary, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.FrontWall map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FrontWall"), __scope, false) } getOrElse {Nil},
        __obj.BackWall map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("BackWall"), __scope, false) } getOrElse {Nil},
        __obj.SideWall map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SideWall"), __scope, false) } getOrElse {Nil},
        __obj.Obstacle map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Obstacle"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingSpatialDescriptionFormat extends scalaxb.ElemNameParser[models.binding.SpatialDescription] with BindingCutsDescriptionGroupFormat with BindingCubesDescriptionGroupFormat {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("SpatialDescription")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SpatialDescription] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Dimension")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinateSystem")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "UnitsConversion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinatesLabel")) ~ 
      ((parseCutsDescriptionGroup(node, scalaxb.ElemName(node) :: stack, true)) ||| 
      (parseCubesDescriptionGroup(node, scalaxb.ElemName(node) :: stack, true))) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Step")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.SpatialDescription(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.CoordinateSystem](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        p6,
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SpatialDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.Dimension, Some("http://impex-fp7.oeaw.ac.at"), Some("Dimension"), __scope, false),
        scalaxb.toXML[models.binding.CoordinateSystem](__obj.CoordinateSystem, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinateSystem"), __scope, false),
        scalaxb.toXML[String](__obj.Units, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false),
        __obj.UnitsConversion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("UnitsConversion"), __scope, false) } getOrElse {Nil},
        __obj.CoordinatesLabel map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinatesLabel"), __scope, false) } getOrElse {Nil},
        Some(__obj.spatialdescriptionoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)} get,
        __obj.Step map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Step"), __scope, false) } getOrElse {Nil})

  }

  def buildBindingEnumProcessTypeFormat = new DefaultBindingEnumProcessTypeFormat {}
  trait DefaultBindingEnumProcessTypeFormat extends scalaxb.XMLFormat[models.binding.EnumProcessType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumProcessType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumProcessType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumProcessType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumProcessType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumProcCoefTypeFormat = new DefaultBindingEnumProcCoefTypeFormat {}
  trait DefaultBindingEnumProcCoefTypeFormat extends scalaxb.XMLFormat[models.binding.EnumProcCoefType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumProcCoefType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumProcCoefType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumProcCoefType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumProcCoefType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumSymmetryFormat = new DefaultBindingEnumSymmetryFormat {}
  trait DefaultBindingEnumSymmetryFormat extends scalaxb.XMLFormat[models.binding.EnumSymmetry] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumSymmetry] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumSymmetry.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumSymmetry.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumSymmetry, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumYNFormat = new DefaultBindingEnumYNFormat {}
  trait DefaultBindingEnumYNFormat extends scalaxb.XMLFormat[models.binding.EnumYN] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumYN] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumYN.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumYN.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumYN, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumSimulationTypeFormat = new DefaultBindingEnumSimulationTypeFormat {}
  trait DefaultBindingEnumSimulationTypeFormat extends scalaxb.XMLFormat[models.binding.EnumSimulationType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumSimulationType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumSimulationType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumSimulationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumSimulationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumProductFormat = new DefaultBindingEnumProductFormat {}
  trait DefaultBindingEnumProductFormat extends scalaxb.XMLFormat[models.binding.EnumProduct] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumProduct] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumProduct.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumProduct.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumProduct, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumImpexQuantityFormat = new DefaultBindingEnumImpexQuantityFormat {}
  trait DefaultBindingEnumImpexQuantityFormat extends scalaxb.XMLFormat[models.binding.EnumImpexQuantity] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumImpexQuantity] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumImpexQuantity.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumImpexQuantity.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumImpexQuantity, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  trait DefaultBindingParticleFormat extends scalaxb.ElemNameParser[models.binding.Particle] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Particle")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Particle] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParticleType")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParticleQuantity")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ChemicalFormula")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AtomicNumber")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationMassNumber")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationChargeState")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "EnergyRange")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AzimuthalAngleRange")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PolarAngleRange")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      models.binding.Particle(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[models.binding.EnumParticleType](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumParticleQuantity](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[models.binding.EnergyRange](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[models.binding.AzimuthalAngleRange](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[models.binding.PolarAngleRange](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Particle, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.PopulationID map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationID"), __scope, false) } getOrElse {Nil},
        __obj.ParticleType flatMap { scalaxb.toXML[models.binding.EnumParticleType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParticleType"), __scope, false) },
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[models.binding.EnumParticleQuantity](__obj.ParticleQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("ParticleQuantity"), __scope, false),
        __obj.ChemicalFormula map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ChemicalFormula"), __scope, false) } getOrElse {Nil},
        __obj.AtomicNumber flatMap { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AtomicNumber"), __scope, false) },
        __obj.PopulationMassNumber flatMap { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationMassNumber"), __scope, false) },
        __obj.PopulationChargeState flatMap { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationChargeState"), __scope, false) },
        __obj.EnergyRange map { scalaxb.toXML[models.binding.EnergyRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("EnergyRange"), __scope, false) } getOrElse {Nil},
        __obj.AzimuthalAngleRange map { scalaxb.toXML[models.binding.AzimuthalAngleRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AzimuthalAngleRange"), __scope, false) } getOrElse {Nil},
        __obj.PolarAngleRange map { scalaxb.toXML[models.binding.PolarAngleRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PolarAngleRange"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingInputValueFormat extends scalaxb.ElemNameParser[models.binding.InputValue] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("InputValue")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InputValue] =
      phrase(optTextRecord ^^
      { case p1 =>
      models.binding.InputValue(Seq.concat(p1.toList),
        (node \ "@Units").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@UnitsConversion").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.InputValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.Units foreach { x => attr = scala.xml.Attribute(null, "Units", x.toString, attr) }
      __obj.UnitsConversion foreach { x => attr = scala.xml.Attribute(null, "UnitsConversion", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.InputValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }


  trait BindingCubesDescriptionGroupFormat extends scalaxb.AnyElemNameParser {
    def parseCubesDescriptionGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CubesDescriptionSequence] =
      (((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionBegin")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionEnd"))) ^^ 
        { case p1 ~ p2 => models.binding.CubesDescriptionSequence(scalaxb.fromXML[Seq[Float]](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Seq[Float]](p2, scalaxb.ElemName(node) :: stack)) })
  
    def parseCubesDescriptionGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      (((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionBegin")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionEnd"))) ^^ 
        { case p1 ~ p2 => scalaxb.DataRecord(models.binding.CubesDescriptionSequence(scalaxb.fromXML[Seq[Float]](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Seq[Float]](p2, scalaxb.ElemName(node) :: stack))) })
    
    def parsemixedCubesDescriptionGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      ((((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionBegin")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord ~ 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionEnd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => Seq.concat(Seq(p1),
        p2.toList,
        Seq(p3),
        p4.toList) })
  }

  trait DefaultBindingCubesDescriptionSequenceFormat extends scalaxb.XMLFormat[models.binding.CubesDescriptionSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.CubesDescriptionSequence] = Left("don't call me.")
    
    def writes(__obj: models.binding.CubesDescriptionSequence, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Seq[Float]](__obj.RegionBegin, Some("http://impex-fp7.oeaw.ac.at"), Some("RegionBegin"), __scope, false),
        scalaxb.toXML[Seq[Float]](__obj.RegionEnd, Some("http://impex-fp7.oeaw.ac.at"), Some("RegionEnd"), __scope, false))


  }


/** Substitution group to use with 3D simulation products
*/
  trait BindingCutsDescriptionGroupFormat extends scalaxb.AnyElemNameParser {
    def parseCutsDescriptionGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CutsDescriptionSequence] =
      (((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PlaneNormalVector")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PlanePoint"))) ^^ 
        { case p1 ~ p2 => models.binding.CutsDescriptionSequence(scalaxb.fromXML[Seq[Float]](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Seq[Float]](p2, scalaxb.ElemName(node) :: stack)) })
  
    def parseCutsDescriptionGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      (((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PlaneNormalVector")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PlanePoint"))) ^^ 
        { case p1 ~ p2 => scalaxb.DataRecord(models.binding.CutsDescriptionSequence(scalaxb.fromXML[Seq[Float]](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Seq[Float]](p2, scalaxb.ElemName(node) :: stack))) })
    
    def parsemixedCutsDescriptionGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      ((((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PlaneNormalVector")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Seq[Float]](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord ~ 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PlanePoint")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Seq[Float]](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => Seq.concat(Seq(p1),
        p2.toList,
        Seq(p3),
        p4.toList) })
  }

  trait DefaultBindingCutsDescriptionSequenceFormat extends scalaxb.XMLFormat[models.binding.CutsDescriptionSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.CutsDescriptionSequence] = Left("don't call me.")
    
    def writes(__obj: models.binding.CutsDescriptionSequence, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Seq[Float]](__obj.PlaneNormalVector, Some("http://impex-fp7.oeaw.ac.at"), Some("PlaneNormalVector"), __scope, false),
        scalaxb.toXML[Seq[Float]](__obj.PlanePoint, Some("http://impex-fp7.oeaw.ac.at"), Some("PlanePoint"), __scope, false))


  }


}

