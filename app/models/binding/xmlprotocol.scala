// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package models.binding

//additional manual imports
import scala.language.postfixOps

/**
usage:
val obj = scalaxb.fromXML[models.binding.Foo](node)
val document = scalaxb.toXML[models.binding.Foo](obj, "foo", models.binding.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(//None -> "http://www.w3.org/XML/1998/namespace",
    Some("fr") -> "http://impex.latmos.ipsl.fr",
    Some("idm") -> "http://impex-fp7.oeaw.ac.at",
	Some("imp") -> "http://www.impex.org/2012/configuration.xsd",
    Some("tns2") -> "http://cdpp-irap/IMPEX/v0.1",
	Some("tns1") -> "http://clweb.cesr.fr",
	Some("tns0") -> "http://impex-fp7.fmi.fi",
	Some("tns") -> "http://smdc.sinp.msu.ru",
	Some("vot") -> "http://www.ivoa.net/xml/VOTable/v1.2",
	Some("xml") -> "http://www.w3.org/XML/1998/namespace",
	Some("xs") -> "http://www.w3.org/2001/XMLSchema",
	Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  //implicit lazy val BindingEnumDirectionTypeFormat: scalaxb.XMLFormat[models.binding.EnumDirectionType] = new DefaultBindingEnumDirectionTypeFormat {}
  implicit lazy val BindingOutputFormatTypeFormat: scalaxb.XMLFormat[models.binding.OutputFormatType] = new DefaultBindingOutputFormatTypeFormat {}
  implicit lazy val BindingEnumInterpolationFormat: scalaxb.XMLFormat[models.binding.EnumInterpolation] = new DefaultBindingEnumInterpolationFormat {}
  implicit lazy val BindingSpacecraftTypeFormat: scalaxb.XMLFormat[models.binding.SpacecraftType] = new DefaultBindingSpacecraftTypeFormat {}
  // FMI methods
  implicit lazy val BindingDataPointValueFMIFormat: scalaxb.XMLFormat[models.binding.DataPointValueFMI] = new DefaultBindingDataPointValueFMIFormat {}
  implicit lazy val BindingExtraParams_getDataPointValueFMIFormat: scalaxb.XMLFormat[models.binding.ExtraParams_getDataPointValueFMI] = new DefaultBindingExtraParams_getDataPointValueFMIFormat {}
  implicit lazy val BindingDataPointSpectraFMIFormat: scalaxb.XMLFormat[models.binding.DataPointSpectraFMI] = new DefaultBindingDataPointSpectraFMIFormat {}
  implicit lazy val BindingExtraParams_getDataPointSpectraFMIFormat: scalaxb.XMLFormat[models.binding.ExtraParams_getDataPointSpectraFMI] = new DefaultBindingExtraParams_getDataPointSpectraFMIFormat {}
  implicit lazy val BindingSurfaceFMIFormat: scalaxb.XMLFormat[models.binding.SurfaceFMI] = new DefaultBindingSurfaceFMIFormat {}
  implicit lazy val BindingExtraParams_getSurfaceFMIFormat: scalaxb.XMLFormat[models.binding.ExtraParams_getSurfaceFMI] = new DefaultBindingExtraParams_getSurfaceFMIFormat {}
  implicit lazy val BindingDataPointValueSpacecraftFMIFormat: scalaxb.XMLFormat[models.binding.DataPointValueSpacecraftFMI] = new DefaultBindingDataPointValueSpacecraftFMIFormat {}
  implicit lazy val BindingDataPointSpectraSpacecraftFMIFormat: scalaxb.XMLFormat[models.binding.DataPointSpectraSpacecraftFMI] = new DefaultBindingDataPointSpectraSpacecraftFMIFormat {}
  implicit lazy val BindingFieldLineFMIFormat: scalaxb.XMLFormat[models.binding.FieldLineFMI] = new DefaultBindingFieldLineFMIFormat {}
  implicit lazy val BindingExtraParams_getFieldLineFMIFormat: scalaxb.XMLFormat[models.binding.ExtraParams_getFieldLineFMI] = new DefaultBindingExtraParams_getFieldLineFMIFormat {}
  implicit lazy val BindingParticleTrajectoryFormat: scalaxb.XMLFormat[models.binding.ParticleTrajectory] = new DefaultBindingParticleTrajectoryFormat {}
  implicit lazy val BindingExtraParams_getParticleTrajectoryFormat: scalaxb.XMLFormat[models.binding.ExtraParams_getParticleTrajectory] = new DefaultBindingExtraParams_getParticleTrajectoryFormat {}
  implicit lazy val BindingMostRelevantRunFormat: scalaxb.XMLFormat[models.binding.MostRelevantRun] = new DefaultBindingMostRelevantRunFormat {}
  implicit lazy val BindingSW_parameter_listFormat: scalaxb.XMLFormat[models.binding.SW_parameter_list] = new DefaultBindingSW_parameter_listFormat {}
  implicit lazy val BindingSW_parameterFormat: scalaxb.XMLFormat[models.binding.SW_parameter] = new DefaultBindingSW_parameterFormat {}
  implicit lazy val BindingVOTableURLFormat: scalaxb.XMLFormat[models.binding.VOTableURL] = new DefaultBindingVOTableURLFormat {}
  implicit lazy val BindingVOTable_fieldFormat: scalaxb.XMLFormat[models.binding.VOTable_field] = new DefaultBindingVOTable_fieldFormat {}
  //implicit lazy val BindingOutputFormatFormat: scalaxb.XMLFormat[models.binding.OutputFormat] = new DefaultBindingOutputFormatFormat {}
  //implicit lazy val BindingSpacecraftFormat: scalaxb.XMLFormat[models.binding.Spacecraft] = new DefaultBindingSpacecraftFormat {}
  // LATMOS methods
  implicit lazy val BindingDataPointValueLATMOSFormat: scalaxb.XMLFormat[models.binding.DataPointValueLATMOS] = new DefaultBindingDataPointValueLATMOSFormat {}
  implicit lazy val BindingExtraParams_getDataPointValueLATMOSFormat: scalaxb.XMLFormat[models.binding.ExtraParams_getDataPointValueLATMOS] = new DefaultBindingExtraParams_getDataPointValueLATMOSFormat {}
  implicit lazy val BindingDataPointSpectraLATMOSFormat: scalaxb.XMLFormat[models.binding.DataPointSpectraLATMOS] = new DefaultBindingDataPointSpectraLATMOSFormat {}
  implicit lazy val BindingExtraParams_getDataPointSpectraLATMOSFormat: scalaxb.XMLFormat[models.binding.ExtraParams_getDataPointSpectraLATMOS] = new DefaultBindingExtraParams_getDataPointSpectraLATMOSFormat {}
  implicit lazy val BindingSurfaceLATMOSFormat: scalaxb.XMLFormat[models.binding.SurfaceLATMOS] = new DefaultBindingSurfaceLATMOSFormat {}
  implicit lazy val BindingExtraParams_getSurfaceLATMOSFormat: scalaxb.XMLFormat[models.binding.ExtraParams_getSurfaceLATMOS] = new DefaultBindingExtraParams_getSurfaceLATMOSFormat {}
  implicit lazy val BindingDataPointValueSpacecraftLATMOSFormat: scalaxb.XMLFormat[models.binding.DataPointValueSpacecraftLATMOS] = new DefaultBindingDataPointValueSpacecraftLATMOSFormat {}
  implicit lazy val BindingDataPointSpectraSpacecraftLATMOSFormat: scalaxb.XMLFormat[models.binding.DataPointSpectraSpacecraftLATMOS] = new DefaultBindingDataPointSpectraSpacecraftLATMOSFormat {}
  implicit lazy val BindingFileURLFormat: scalaxb.XMLFormat[models.binding.FileURL] = new DefaultBindingFileURLFormat {}
  implicit lazy val BindingFieldLineLATMOSFormat: scalaxb.XMLFormat[models.binding.FieldLineLATMOS] = new DefaultBindingFieldLineLATMOSFormat {}
  implicit lazy val BindingExtraParams_getFieldLineLATMOSFormat: scalaxb.XMLFormat[models.binding.ExtraParams_getFieldLineLATMOS] = new DefaultBindingExtraParams_getFieldLineLATMOSFormat {}
  implicit lazy val BindingEnumDirectionFormat: scalaxb.XMLFormat[models.binding.EnumDirection] = new DefaultBindingEnumDirectionFormat {}
  //implicit lazy val BindingOutputFormatType2Format: scalaxb.XMLFormat[models.binding.OutputFormatType2] = new DefaultBindingOutputFormatType2Format {}
  //implicit lazy val BindingInterpolationFormat: scalaxb.XMLFormat[models.binding.Interpolation] = new DefaultBindingInterpolationFormat {}
  // SINP methods and types
  implicit lazy val BindingSpacecraftTypeSINPFormat: scalaxb.XMLFormat[models.binding.SpacecraftTypeSINP] = new DefaultBindingSpacecraftTypeSINPFormat {}
  implicit lazy val BindingListOfDoubleFormat: scalaxb.XMLFormat[models.binding.ListOfDouble] = new DefaultBindingListOfDoubleFormat {}
  implicit lazy val BindingCube_size_arrayFormat: scalaxb.XMLFormat[models.binding.Cube_size_array] = new DefaultBindingCube_size_arrayFormat {}
  implicit lazy val BindingExtraParams_getDataPointValueSINPFormat: scalaxb.XMLFormat[models.binding.ExtraParams_getDataPointValueSINP] = new DefaultBindingExtraParams_getDataPointValueSINPFormat {}
  implicit lazy val BindingExtraParams_calculateDataPointValueFixedTimeFormat: scalaxb.XMLFormat[models.binding.ExtraParams_calculateDataPointValueFixedTime] = new DefaultBindingExtraParams_calculateDataPointValueFixedTimeFormat {}
  implicit lazy val BindingExtraParams_calculateDataPointValueFormat: scalaxb.XMLFormat[models.binding.ExtraParams_calculateDataPointValue] = new DefaultBindingExtraParams_calculateDataPointValueFormat {}
  implicit lazy val BindingExtraParams_calculateDataPointValueMercuryFormat: scalaxb.XMLFormat[models.binding.ExtraParams_calculateDataPointValueMercury] = new DefaultBindingExtraParams_calculateDataPointValueMercuryFormat {}
  implicit lazy val BindingExtraParams_calculateDataPointValueSaturnFormat: scalaxb.XMLFormat[models.binding.ExtraParams_calculateDataPointValueSaturn] = new DefaultBindingExtraParams_calculateDataPointValueSaturnFormat {}
  implicit lazy val BindingExtraParams_calculateDataPointValueJupiterFormat: scalaxb.XMLFormat[models.binding.ExtraParams_calculateDataPointValueJupiter] = new DefaultBindingExtraParams_calculateDataPointValueJupiterFormat {}
  implicit lazy val BindingExtraParams_calculateDataPointValueSpacecraftFormat: scalaxb.XMLFormat[models.binding.ExtraParams_calculateDataPointValueSpacecraft] = new DefaultBindingExtraParams_calculateDataPointValueSpacecraftFormat {}
  implicit lazy val BindingExtraParams_calculateFieldLineFormat: scalaxb.XMLFormat[models.binding.ExtraParams_calculateFieldLine] = new DefaultBindingExtraParams_calculateFieldLineFormat {}
  implicit lazy val BindingExtraParams_calculateCubeFormat: scalaxb.XMLFormat[models.binding.ExtraParams_calculateCube] = new DefaultBindingExtraParams_calculateCubeFormat {}
  implicit lazy val BindingExtraParams_calculateCubeMercuryFormat: scalaxb.XMLFormat[models.binding.ExtraParams_calculateCubeMercury] = new DefaultBindingExtraParams_calculateCubeMercuryFormat {}
  implicit lazy val BindingExtraParams_calculateCubeSaturnFormat: scalaxb.XMLFormat[models.binding.ExtraParams_calculateCubeSaturn] = new DefaultBindingExtraParams_calculateCubeSaturnFormat {}
  implicit lazy val BindingExtraParams_calculateCubeJupiterFormat: scalaxb.XMLFormat[models.binding.ExtraParams_calculateCubeJupiter] = new DefaultBindingExtraParams_calculateCubeJupiterFormat {}
  implicit lazy val BindingExtraParams_getSurfaceSINPFormat: scalaxb.XMLFormat[models.binding.ExtraParams_getSurfaceSINP] = new DefaultBindingExtraParams_getSurfaceSINPFormat {}
  // isAlive() request is used by all services
  implicit lazy val BindingEmptyElementFormat: scalaxb.XMLFormat[models.binding.EmptyElement] = new DefaultBindingEmptyElementFormat {}
  implicit lazy val BindingDataPointValueSINPFormat: scalaxb.XMLFormat[models.binding.DataPointValueSINP] = new DefaultBindingDataPointValueSINPFormat {}
  implicit lazy val BindingCalculateDataPointValueFixedTimeFormat: scalaxb.XMLFormat[models.binding.CalculateDataPointValueFixedTime] = new DefaultBindingCalculateDataPointValueFixedTimeFormat {}
  implicit lazy val BindingCalculateDataPointValueFormat: scalaxb.XMLFormat[models.binding.CalculateDataPointValue] = new DefaultBindingCalculateDataPointValueFormat {}
  implicit lazy val BindingCalculateDataPointValueMercuryFormat: scalaxb.XMLFormat[models.binding.CalculateDataPointValueMercury] = new DefaultBindingCalculateDataPointValueMercuryFormat {}
  implicit lazy val BindingCalculateDataPointValueSaturnFormat: scalaxb.XMLFormat[models.binding.CalculateDataPointValueSaturn] = new DefaultBindingCalculateDataPointValueSaturnFormat {}
  implicit lazy val BindingCalculateDataPointValueJupiterFormat: scalaxb.XMLFormat[models.binding.CalculateDataPointValueJupiter] = new DefaultBindingCalculateDataPointValueJupiterFormat {}
  implicit lazy val BindingCalculateDataPointValueSpacecraftFormat: scalaxb.XMLFormat[models.binding.CalculateDataPointValueSpacecraft] = new DefaultBindingCalculateDataPointValueSpacecraftFormat {}
  implicit lazy val BindingCalculateFieldLineFormat: scalaxb.XMLFormat[models.binding.CalculateFieldLine] = new DefaultBindingCalculateFieldLineFormat {}
  implicit lazy val BindingCalculateCubeFormat: scalaxb.XMLFormat[models.binding.CalculateCube] = new DefaultBindingCalculateCubeFormat {}
  implicit lazy val BindingCalculateCubeMercuryFormat: scalaxb.XMLFormat[models.binding.CalculateCubeMercury] = new DefaultBindingCalculateCubeMercuryFormat {}
  implicit lazy val BindingCalculateCubeSaturnFormat: scalaxb.XMLFormat[models.binding.CalculateCubeSaturn] = new DefaultBindingCalculateCubeSaturnFormat {}
  implicit lazy val BindingSurfaceSINPFormat: scalaxb.XMLFormat[models.binding.SurfaceSINP] = new DefaultBindingSurfaceSINPFormat {}
  // AMDA/ CLWEB specific types (data model)
  implicit lazy val BindingIdoptFormat: scalaxb.AttributeGroupFormat[models.binding.Idopt] = new DefaultBindingIdoptFormat {}
  implicit lazy val BindingIdFormat: scalaxb.AttributeGroupFormat[models.binding.Id] = new DefaultBindingIdFormat {}
  implicit lazy val BindingDataRootFormat: scalaxb.XMLFormat[models.binding.DataRoot] = new DefaultBindingDataRootFormat {}
  implicit lazy val BindingDataCenterFormat: scalaxb.XMLFormat[models.binding.DataCenter] = new DefaultBindingDataCenterFormat {}
  implicit lazy val BindingMissionFormat: scalaxb.XMLFormat[models.binding.Mission] = new DefaultBindingMissionFormat {}
  implicit lazy val BindingObservatoryTypeFormat: scalaxb.XMLFormat[models.binding.ObservatoryType] = new DefaultBindingObservatoryTypeFormat {}
  implicit lazy val BindingGroupTypeFormat: scalaxb.XMLFormat[models.binding.GroupType] = new DefaultBindingGroupTypeFormat {}
  implicit lazy val BindingInstrumentTypeFormat: scalaxb.XMLFormat[models.binding.InstrumentType] = new DefaultBindingInstrumentTypeFormat {}
  implicit lazy val BindingSimulationModelTypeFormat: scalaxb.XMLFormat[models.binding.SimulationModelType] = new DefaultBindingSimulationModelTypeFormat {}
  implicit lazy val BindingRunIDFormat: scalaxb.XMLFormat[models.binding.RunID] = new DefaultBindingRunIDFormat {}
  implicit lazy val BindingMeasurementTypeFormat: scalaxb.XMLFormat[models.binding.MeasurementType] = new DefaultBindingMeasurementTypeFormat {}
  implicit lazy val BindingDatasetFormat: scalaxb.XMLFormat[models.binding.Dataset] = new DefaultBindingDatasetFormat {}
  implicit lazy val BindingParameterTypeFormat: scalaxb.XMLFormat[models.binding.ParameterType] = new DefaultBindingParameterTypeFormat {}
  implicit lazy val BindingComponentFormat: scalaxb.XMLFormat[models.binding.Component] = new DefaultBindingComponentFormat {}
  // AMDA/ CLWEB specific types (methods)
  //implicit lazy val BindingEmptyElement2Format: scalaxb.XMLFormat[models.binding.EmptyElement2] = new DefaultBindingEmptyElement2Format {}
  //implicit lazy val BindingEmptyAliveFormat: scalaxb.XMLFormat[models.binding.EmptyAlive] = new DefaultBindingEmptyAliveFormat {}
  implicit lazy val BindingGetObsDataTreeResponseAMDAFormat: scalaxb.XMLFormat[models.binding.GetObsDataTreeResponseAMDA] = new DefaultBindingGetObsDataTreeResponseAMDAFormat {}
  //implicit lazy val BindingGetTimeTablesListTypeFormat: scalaxb.XMLFormat[models.binding.GetTimeTablesListType] = new DefaultBindingGetTimeTablesListTypeFormat {}
  //implicit lazy val BindingGetTimeTablesListResponseTypeFormat: scalaxb.XMLFormat[models.binding.GetTimeTablesListResponseType] = new DefaultBindingGetTimeTablesListResponseTypeFormat {}
  implicit lazy val BindingGetParameterListFormat: scalaxb.XMLFormat[models.binding.GetParameterList] = new DefaultBindingGetParameterListFormat {}
  implicit lazy val BindingGetParameterListResponseFormat: scalaxb.XMLFormat[models.binding.GetParameterListResponse] = new DefaultBindingGetParameterListResponseFormat {}
  implicit lazy val BindingEnumSpacecraftFormat: scalaxb.XMLFormat[models.binding.EnumSpacecraft] = new DefaultBindingEnumSpacecraftFormat {}
  implicit lazy val BindingWorkSpaceValueFormat: scalaxb.XMLFormat[models.binding.WorkSpaceValue] = new DefaultBindingWorkSpaceValueFormat {}
  //implicit lazy val BindingEnumCoordinateSystemNameFormat: scalaxb.XMLFormat[models.binding.EnumCoordinateSystemName] = new DefaultBindingEnumCoordinateSystemNameFormat {}
  implicit lazy val BindingParameterListFormat: scalaxb.XMLFormat[models.binding.ParameterList] = new DefaultBindingParameterListFormat {}
  implicit lazy val BindingWorkSpaceFormat: scalaxb.XMLFormat[models.binding.WorkSpace] = new DefaultBindingWorkSpaceFormat {}
  //implicit lazy val BindingOutputFormatTypeFormat: scalaxb.XMLFormat[models.binding.OutputFormatType] = new DefaultBindingOutputFormatTypeFormat {}
  //implicit lazy val BindingTimeFormatTypeFormat: scalaxb.XMLFormat[models.binding.TimeFormatType] = new DefaultBindingTimeFormatTypeFormat {}
  //implicit lazy val BindingGetParameterTypeFormat: scalaxb.XMLFormat[models.binding.GetParameterType] = new DefaultBindingGetParameterTypeFormat {}
  //implicit lazy val BindingGetParameterResponseTypeFormat: scalaxb.XMLFormat[models.binding.GetParameterResponseType] = new DefaultBindingGetParameterResponseTypeFormat {}
  //implicit lazy val BindingOutputFormatType2Format: scalaxb.XMLFormat[models.binding.OutputFormatType2] = new DefaultBindingOutputFormatType2Format {}
  //implicit lazy val BindingTimeFormatType2Format: scalaxb.XMLFormat[models.binding.TimeFormatType2] = new DefaultBindingTimeFormatType2Format {}
  implicit lazy val BindingGetDatasetFormat: scalaxb.XMLFormat[models.binding.GetDataset] = new DefaultBindingGetDatasetFormat {}
  implicit lazy val BindingGetDatasetResponseFormat: scalaxb.XMLFormat[models.binding.GetDatasetResponse] = new DefaultBindingGetDatasetResponseFormat {}
  implicit lazy val BindingUnitsFormat: scalaxb.XMLFormat[models.binding.Units] = new DefaultBindingUnitsFormat {}
  //implicit lazy val BindingOutputFormatType3Format: scalaxb.XMLFormat[models.binding.OutputFormatType3] = new DefaultBindingOutputFormatType3Format {}
  //implicit lazy val BindingTimeFormatType3Format: scalaxb.XMLFormat[models.binding.TimeFormatType3] = new DefaultBindingTimeFormatType3Format {}
  implicit lazy val BindingGetOrbitesFormat: scalaxb.XMLFormat[models.binding.GetOrbites] = new DefaultBindingGetOrbitesFormat {}
  implicit lazy val BindingGetOrbitesResponseFormat: scalaxb.XMLFormat[models.binding.GetOrbitesResponse] = new DefaultBindingGetOrbitesResponseFormat {}
  //implicit lazy val BindingGetTimeTableTypeFormat: scalaxb.XMLFormat[models.binding.GetTimeTableType] = new DefaultBindingGetTimeTableTypeFormat {}
  //implicit lazy val BindingGetTimeTableResponseTypeFormat: scalaxb.XMLFormat[models.binding.GetTimeTableResponseType] = new DefaultBindingGetTimeTableResponseTypeFormat {}
  //implicit lazy val BindingEmptyElementFormat: scalaxb.XMLFormat[models.binding.EmptyElement] = new DefaultBindingEmptyElementFormat {}
  implicit lazy val BindingGetObsDataTreeResponseCLWEBFormat: scalaxb.XMLFormat[models.binding.GetObsDataTreeResponseCLWEB] = new DefaultBindingGetObsDataTreeResponseCLWEBFormat {}
  implicit lazy val BindingGetTimeTablesListFormat: scalaxb.XMLFormat[models.binding.GetTimeTablesList] = new DefaultBindingGetTimeTablesListFormat {}
  implicit lazy val BindingGetTimeTablesListResponseFormat: scalaxb.XMLFormat[models.binding.GetTimeTablesListResponse] = new DefaultBindingGetTimeTablesListResponseFormat {}
  implicit lazy val BindingOutputFormatFormat: scalaxb.XMLFormat[models.binding.OutputFormat] = new DefaultBindingOutputFormatFormat {}
  implicit lazy val BindingTimeFormatFormat: scalaxb.XMLFormat[models.binding.TimeFormat] = new DefaultBindingTimeFormatFormat {}
  implicit lazy val BindingGetParameterFormat: scalaxb.XMLFormat[models.binding.GetParameter] = new DefaultBindingGetParameterFormat {}
  implicit lazy val BindingGetParameterResponseFormat: scalaxb.XMLFormat[models.binding.GetParameterResponse] = new DefaultBindingGetParameterResponseFormat {}
  implicit lazy val BindingGetTimeTableFormat: scalaxb.XMLFormat[models.binding.GetTimeTable] = new DefaultBindingGetTimeTableFormat {}
  implicit lazy val BindingGetTimeTableResponseFormat: scalaxb.XMLFormat[models.binding.GetTimeTableResponse] = new DefaultBindingGetTimeTableResponseFormat {}
  // configuration types
  implicit lazy val BindingDatabaseFormat: scalaxb.XMLFormat[models.binding.Database] = new DefaultBindingDatabaseFormat {}
  implicit lazy val BindingToolFormat: scalaxb.XMLFormat[models.binding.Tool] = new DefaultBindingToolFormat {}
  implicit lazy val BindingImpexconfigurationFormat: scalaxb.XMLFormat[models.binding.Impexconfiguration] = new DefaultBindingImpexconfigurationFormat {}
  implicit lazy val BindingDatabasetypeFormat: scalaxb.XMLFormat[models.binding.Databasetype] = new DefaultBindingDatabasetypeFormat {}
  // SPASE/ IMPEx specific types
  implicit lazy val BindingSpaseFormat: scalaxb.XMLFormat[models.binding.Spase] = new DefaultBindingSpaseFormat {}
  implicit lazy val BindingCatalogFormat: scalaxb.XMLFormat[models.binding.Catalog] = new DefaultBindingCatalogFormat {}
  implicit lazy val BindingResourceHeaderFormat: scalaxb.XMLFormat[models.binding.ResourceHeader] = new DefaultBindingResourceHeaderFormat {}
  implicit lazy val BindingContactFormat: scalaxb.XMLFormat[models.binding.Contact] = new DefaultBindingContactFormat {}
  implicit lazy val BindingInformationURLFormat: scalaxb.XMLFormat[models.binding.InformationURL] = new DefaultBindingInformationURLFormat {}
  implicit lazy val BindingAssociationFormat: scalaxb.XMLFormat[models.binding.Association] = new DefaultBindingAssociationFormat {}
  implicit lazy val BindingAccessInformationFormat: scalaxb.XMLFormat[models.binding.AccessInformation] = new DefaultBindingAccessInformationFormat {}
  implicit lazy val BindingAccessURLFormat: scalaxb.XMLFormat[models.binding.AccessURL] = new DefaultBindingAccessURLFormat {}
  implicit lazy val BindingDataExtentFormat: scalaxb.XMLFormat[models.binding.DataExtent] = new DefaultBindingDataExtentFormat {}
  implicit lazy val BindingTimeSpanFormat: scalaxb.XMLFormat[models.binding.TimeSpan] = new DefaultBindingTimeSpanFormat {}
  implicit lazy val BindingParameterFormat: scalaxb.XMLFormat[models.binding.Parameter] = new DefaultBindingParameterFormat {}
  implicit lazy val BindingCoordinateSystemTypeFormat: scalaxb.XMLFormat[models.binding.CoordinateSystemType] = new DefaultBindingCoordinateSystemTypeFormat {}
  implicit lazy val BindingRenderingHintsFormat: scalaxb.XMLFormat[models.binding.RenderingHints] = new DefaultBindingRenderingHintsFormat {}
  implicit lazy val BindingStructureFormat: scalaxb.XMLFormat[models.binding.Structure] = new DefaultBindingStructureFormat {}
  implicit lazy val BindingElementFormat: scalaxb.XMLFormat[models.binding.Element] = new DefaultBindingElementFormat {}
  implicit lazy val BindingFieldTypeFormat: scalaxb.XMLFormat[models.binding.FieldType] = new DefaultBindingFieldTypeFormat {}
  implicit lazy val BindingFrequencyRangeFormat: scalaxb.XMLFormat[models.binding.FrequencyRange] = new DefaultBindingFrequencyRangeFormat {}
  implicit lazy val BindingBinFormat: scalaxb.XMLFormat[models.binding.Bin] = new DefaultBindingBinFormat {}
  implicit lazy val BindingEnergyRangeFormat: scalaxb.XMLFormat[models.binding.EnergyRange] = new DefaultBindingEnergyRangeFormat {}
  implicit lazy val BindingAzimuthalAngleRangeFormat: scalaxb.XMLFormat[models.binding.AzimuthalAngleRange] = new DefaultBindingAzimuthalAngleRangeFormat {}
  implicit lazy val BindingPolarAngleRangeFormat: scalaxb.XMLFormat[models.binding.PolarAngleRange] = new DefaultBindingPolarAngleRangeFormat {}
  implicit lazy val BindingWaveFormat: scalaxb.XMLFormat[models.binding.Wave] = new DefaultBindingWaveFormat {}
  implicit lazy val BindingWavelengthRangeFormat: scalaxb.XMLFormat[models.binding.WavelengthRange] = new DefaultBindingWavelengthRangeFormat {}
  implicit lazy val BindingMixedFormat: scalaxb.XMLFormat[models.binding.Mixed] = new DefaultBindingMixedFormat {}
  implicit lazy val BindingSupportFormat: scalaxb.XMLFormat[models.binding.Support] = new DefaultBindingSupportFormat {}
  implicit lazy val BindingExtensionFormat: scalaxb.XMLFormat[models.binding.Extension] = new DefaultBindingExtensionFormat {}
  implicit lazy val BindingDisplayDataFormat: scalaxb.XMLFormat[models.binding.DisplayData] = new DefaultBindingDisplayDataFormat {}
  implicit lazy val BindingTemporalDescriptionFormat: scalaxb.XMLFormat[models.binding.TemporalDescription] = new DefaultBindingTemporalDescriptionFormat {}
  implicit lazy val BindingNumericalDataFormat: scalaxb.XMLFormat[models.binding.NumericalData] = new DefaultBindingNumericalDataFormat {}
  implicit lazy val BindingDocumentFormat: scalaxb.XMLFormat[models.binding.Document] = new DefaultBindingDocumentFormat {}
  implicit lazy val BindingSourceFormat: scalaxb.XMLFormat[models.binding.Source] = new DefaultBindingSourceFormat {}
  implicit lazy val BindingChecksumFormat: scalaxb.XMLFormat[models.binding.Checksum] = new DefaultBindingChecksumFormat {}
  implicit lazy val BindingInstrumentFormat: scalaxb.XMLFormat[models.binding.Instrument] = new DefaultBindingInstrumentFormat {}
  implicit lazy val BindingOperatingSpanFormat: scalaxb.XMLFormat[models.binding.OperatingSpan] = new DefaultBindingOperatingSpanFormat {}
  implicit lazy val BindingObservatoryFormat: scalaxb.XMLFormat[models.binding.Observatory] = new DefaultBindingObservatoryFormat {}
  implicit lazy val BindingLocationFormat: scalaxb.XMLFormat[models.binding.Location] = new DefaultBindingLocationFormat {}
  implicit lazy val BindingPersonFormat: scalaxb.XMLFormat[models.binding.Person] = new DefaultBindingPersonFormat {}
  implicit lazy val BindingRegistryFormat: scalaxb.XMLFormat[models.binding.Registry] = new DefaultBindingRegistryFormat {}
  implicit lazy val BindingRepositoryFormat: scalaxb.XMLFormat[models.binding.Repository] = new DefaultBindingRepositoryFormat {}
  implicit lazy val BindingServiceFormat: scalaxb.XMLFormat[models.binding.Service] = new DefaultBindingServiceFormat {}
  implicit lazy val BindingAnnotationFormat: scalaxb.XMLFormat[models.binding.Annotation] = new DefaultBindingAnnotationFormat {}
  implicit lazy val BindingObservationExtentFormat: scalaxb.XMLFormat[models.binding.ObservationExtent] = new DefaultBindingObservationExtentFormat {}
  implicit lazy val BindingEnumVersionFormat: scalaxb.XMLFormat[models.binding.EnumVersion] = new DefaultBindingEnumVersionFormat {}
  implicit lazy val BindingEnumAccessRightsFormat: scalaxb.XMLFormat[models.binding.EnumAccessRights] = new DefaultBindingEnumAccessRightsFormat {}
  implicit lazy val BindingEnumAnnotationTypeFormat: scalaxb.XMLFormat[models.binding.EnumAnnotationType] = new DefaultBindingEnumAnnotationTypeFormat {}
  implicit lazy val BindingEnumAssociationTypeFormat: scalaxb.XMLFormat[models.binding.EnumAssociationType] = new DefaultBindingEnumAssociationTypeFormat {}
  implicit lazy val BindingEnumAvailabilityFormat: scalaxb.XMLFormat[models.binding.EnumAvailability] = new DefaultBindingEnumAvailabilityFormat {}
  implicit lazy val BindingEnumClassificationMethodFormat: scalaxb.XMLFormat[models.binding.EnumClassificationMethod] = new DefaultBindingEnumClassificationMethodFormat {}
  implicit lazy val BindingEnumComponentFormat: scalaxb.XMLFormat[models.binding.EnumComponent] = new DefaultBindingEnumComponentFormat {}
  implicit lazy val BindingEnumConfidenceRatingFormat: scalaxb.XMLFormat[models.binding.EnumConfidenceRating] = new DefaultBindingEnumConfidenceRatingFormat {}
  implicit lazy val BindingEnumCoordinateRepresentationFormat: scalaxb.XMLFormat[models.binding.EnumCoordinateRepresentation] = new DefaultBindingEnumCoordinateRepresentationFormat {}
  implicit lazy val BindingEnumCoordinateSystemNameFormat: scalaxb.XMLFormat[models.binding.EnumCoordinateSystemName] = new DefaultBindingEnumCoordinateSystemNameFormat {}
  implicit lazy val BindingEnumDirectionAngleFormat: scalaxb.XMLFormat[models.binding.EnumDirectionAngle] = new DefaultBindingEnumDirectionAngleFormat {}
  implicit lazy val BindingEnumDisplayTypeFormat: scalaxb.XMLFormat[models.binding.EnumDisplayType] = new DefaultBindingEnumDisplayTypeFormat {}
  implicit lazy val BindingEnumDocumentTypeFormat: scalaxb.XMLFormat[models.binding.EnumDocumentType] = new DefaultBindingEnumDocumentTypeFormat {}
  implicit lazy val BindingEnumEarthFormat: scalaxb.XMLFormat[models.binding.EnumEarth] = new DefaultBindingEnumEarthFormat {}
  implicit lazy val BindingEnumEncodingFormat: scalaxb.XMLFormat[models.binding.EnumEncoding] = new DefaultBindingEnumEncodingFormat {}
  implicit lazy val BindingEnumFieldQuantityFormat: scalaxb.XMLFormat[models.binding.EnumFieldQuantity] = new DefaultBindingEnumFieldQuantityFormat {}
  implicit lazy val BindingEnumFormatFormat: scalaxb.XMLFormat[models.binding.EnumFormat] = new DefaultBindingEnumFormatFormat {}
  implicit lazy val BindingEnumHardcopyFormat: scalaxb.XMLFormat[models.binding.EnumHardcopy] = new DefaultBindingEnumHardcopyFormat {}
  implicit lazy val BindingEnumHashFunctionFormat: scalaxb.XMLFormat[models.binding.EnumHashFunction] = new DefaultBindingEnumHashFunctionFormat {}
  implicit lazy val BindingEnumHeliosphereFormat: scalaxb.XMLFormat[models.binding.EnumHeliosphere] = new DefaultBindingEnumHeliosphereFormat {}
  implicit lazy val BindingEnumInstrumentTypeFormat: scalaxb.XMLFormat[models.binding.EnumInstrumentType] = new DefaultBindingEnumInstrumentTypeFormat {}
  implicit lazy val BindingEnumIntegralFormat: scalaxb.XMLFormat[models.binding.EnumIntegral] = new DefaultBindingEnumIntegralFormat {}
  implicit lazy val BindingEnumIonosphereFormat: scalaxb.XMLFormat[models.binding.EnumIonosphere] = new DefaultBindingEnumIonosphereFormat {}
  implicit lazy val BindingEnumMagnetosphereFormat: scalaxb.XMLFormat[models.binding.EnumMagnetosphere] = new DefaultBindingEnumMagnetosphereFormat {}
  implicit lazy val BindingEnumMeasurementTypeFormat: scalaxb.XMLFormat[models.binding.EnumMeasurementType] = new DefaultBindingEnumMeasurementTypeFormat {}
  implicit lazy val BindingEnumMixedQuantityFormat: scalaxb.XMLFormat[models.binding.EnumMixedQuantity] = new DefaultBindingEnumMixedQuantityFormat {}
  implicit lazy val BindingEnumNearSurfaceFormat: scalaxb.XMLFormat[models.binding.EnumNearSurface] = new DefaultBindingEnumNearSurfaceFormat {}
  implicit lazy val BindingEnumParticleQuantityFormat: scalaxb.XMLFormat[models.binding.EnumParticleQuantity] = new DefaultBindingEnumParticleQuantityFormat {}
  implicit lazy val BindingEnumParticleTypeFormat: scalaxb.XMLFormat[models.binding.EnumParticleType] = new DefaultBindingEnumParticleTypeFormat {}
  implicit lazy val BindingEnumPhenomenonTypeFormat: scalaxb.XMLFormat[models.binding.EnumPhenomenonType] = new DefaultBindingEnumPhenomenonTypeFormat {}
  implicit lazy val BindingEnumProcessingLevelFormat: scalaxb.XMLFormat[models.binding.EnumProcessingLevel] = new DefaultBindingEnumProcessingLevelFormat {}
  implicit lazy val BindingEnumProjectionFormat: scalaxb.XMLFormat[models.binding.EnumProjection] = new DefaultBindingEnumProjectionFormat {}
  implicit lazy val BindingEnumImpexSpecialRegionFormat: scalaxb.XMLFormat[models.binding.EnumImpexSpecialRegion] = new DefaultBindingEnumImpexSpecialRegionFormat {}
  implicit lazy val BindingEnumQualifierFormat: scalaxb.XMLFormat[models.binding.EnumQualifier] = new DefaultBindingEnumQualifierFormat {}
  implicit lazy val BindingEnumRegionFormat: scalaxb.XMLFormat[models.binding.EnumRegion] = new DefaultBindingEnumRegionFormat {}
  implicit lazy val BindingEnumRenderingAxisFormat: scalaxb.XMLFormat[models.binding.EnumRenderingAxis] = new DefaultBindingEnumRenderingAxisFormat {}
  implicit lazy val BindingEnumRoleFormat: scalaxb.XMLFormat[models.binding.EnumRole] = new DefaultBindingEnumRoleFormat {}
  implicit lazy val BindingEnumScaleTypeFormat: scalaxb.XMLFormat[models.binding.EnumScaleType] = new DefaultBindingEnumScaleTypeFormat {}
  implicit lazy val BindingEnumSourceTypeFormat: scalaxb.XMLFormat[models.binding.EnumSourceType] = new DefaultBindingEnumSourceTypeFormat {}
  implicit lazy val BindingEnumSpectralRangeFormat: scalaxb.XMLFormat[models.binding.EnumSpectralRange] = new DefaultBindingEnumSpectralRangeFormat {}
  implicit lazy val BindingEnumSunFormat: scalaxb.XMLFormat[models.binding.EnumSun] = new DefaultBindingEnumSunFormat {}
  implicit lazy val BindingEnumSupportQuantityFormat: scalaxb.XMLFormat[models.binding.EnumSupportQuantity] = new DefaultBindingEnumSupportQuantityFormat {}
  implicit lazy val BindingEnumTextFormat: scalaxb.XMLFormat[models.binding.EnumText] = new DefaultBindingEnumTextFormat {}
  implicit lazy val BindingEnumWaveQuantityFormat: scalaxb.XMLFormat[models.binding.EnumWaveQuantity] = new DefaultBindingEnumWaveQuantityFormat {}
  implicit lazy val BindingEnumWaveTypeFormat: scalaxb.XMLFormat[models.binding.EnumWaveType] = new DefaultBindingEnumWaveTypeFormat {}
  implicit lazy val BindingEnumWavesFormat: scalaxb.XMLFormat[models.binding.EnumWaves] = new DefaultBindingEnumWavesFormat {}
  implicit lazy val BindingGranuleFormat: scalaxb.XMLFormat[models.binding.Granule] = new DefaultBindingGranuleFormat {}
  implicit lazy val BindingNumericalOutputFormat: scalaxb.XMLFormat[models.binding.NumericalOutput] = new DefaultBindingNumericalOutputFormat {}
  implicit lazy val BindingDisplayOutputFormat: scalaxb.XMLFormat[models.binding.DisplayOutput] = new DefaultBindingDisplayOutputFormat {}
  implicit lazy val BindingSimulationModelFormat: scalaxb.XMLFormat[models.binding.SimulationModel] = new DefaultBindingSimulationModelFormat {}
  implicit lazy val BindingInputPropertiesFormat: scalaxb.XMLFormat[models.binding.InputProperties] = new DefaultBindingInputPropertiesFormat {}
  implicit lazy val BindingOutputParametersFormat: scalaxb.XMLFormat[models.binding.OutputParameters] = new DefaultBindingOutputParametersFormat {}
  implicit lazy val BindingSimulationRunFormat: scalaxb.XMLFormat[models.binding.SimulationRun] = new DefaultBindingSimulationRunFormat {}
  implicit lazy val BindingModelFormat: scalaxb.XMLFormat[models.binding.Model] = new DefaultBindingModelFormat {}
  implicit lazy val BindingModelVersionFormat: scalaxb.XMLFormat[models.binding.ModelVersion] = new DefaultBindingModelVersionFormat {}
  implicit lazy val BindingVersionsFormat: scalaxb.XMLFormat[models.binding.Versions] = new DefaultBindingVersionsFormat {}
  implicit lazy val BindingRegionParameterFormat: scalaxb.XMLFormat[models.binding.RegionParameter] = new DefaultBindingRegionParameterFormat {}
  implicit lazy val BindingInputParameterFormat: scalaxb.XMLFormat[models.binding.InputParameter] = new DefaultBindingInputParameterFormat {}
  implicit lazy val BindingPropertyFormat: scalaxb.XMLFormat[models.binding.Property] = new DefaultBindingPropertyFormat {}
  implicit lazy val BindingInputPopulationFormat: scalaxb.XMLFormat[models.binding.InputPopulation] = new DefaultBindingInputPopulationFormat {}
  implicit lazy val BindingInputPopulationSequence3Format: scalaxb.XMLFormat[models.binding.InputPopulationSequence3] = new DefaultBindingInputPopulationSequence3Format {}
  implicit lazy val BindingInputPopulationSequence2Format: scalaxb.XMLFormat[models.binding.InputPopulationSequence2] = new DefaultBindingInputPopulationSequence2Format {}
  implicit lazy val BindingInputPopulationSequence1Format: scalaxb.XMLFormat[models.binding.InputPopulationSequence1] = new DefaultBindingInputPopulationSequence1Format {}
  implicit lazy val BindingInputFieldFormat: scalaxb.XMLFormat[models.binding.InputField] = new DefaultBindingInputFieldFormat {}
  implicit lazy val BindingInputProcessFormat: scalaxb.XMLFormat[models.binding.InputProcess] = new DefaultBindingInputProcessFormat {}
  implicit lazy val BindingSimulationDomainFormat: scalaxb.XMLFormat[models.binding.SimulationDomain] = new DefaultBindingSimulationDomainFormat {}
  implicit lazy val BindingBoundaryConditionsFormat: scalaxb.XMLFormat[models.binding.BoundaryConditions] = new DefaultBindingBoundaryConditionsFormat {}
  implicit lazy val BindingSimulationTimeFormat: scalaxb.XMLFormat[models.binding.SimulationTime] = new DefaultBindingSimulationTimeFormat {}
  implicit lazy val BindingDiagnosisTimeStepFormat: scalaxb.XMLFormat[models.binding.DiagnosisTimeStep] = new DefaultBindingDiagnosisTimeStepFormat {}
  implicit lazy val BindingElementBoundaryFormat: scalaxb.XMLFormat[models.binding.ElementBoundary] = new DefaultBindingElementBoundaryFormat {}
  implicit lazy val BindingSpatialDescriptionFormat: scalaxb.XMLFormat[models.binding.SpatialDescription] = new DefaultBindingSpatialDescriptionFormat {}
  implicit lazy val BindingEnumProcessTypeFormat: scalaxb.XMLFormat[models.binding.EnumProcessType] = new DefaultBindingEnumProcessTypeFormat {}
  implicit lazy val BindingEnumProcCoefTypeFormat: scalaxb.XMLFormat[models.binding.EnumProcCoefType] = new DefaultBindingEnumProcCoefTypeFormat {}
  implicit lazy val BindingEnumSymmetryFormat: scalaxb.XMLFormat[models.binding.EnumSymmetry] = new DefaultBindingEnumSymmetryFormat {}
  implicit lazy val BindingEnumYNFormat: scalaxb.XMLFormat[models.binding.EnumYN] = new DefaultBindingEnumYNFormat {}
  implicit lazy val BindingEnumSimulationTypeFormat: scalaxb.XMLFormat[models.binding.EnumSimulationType] = new DefaultBindingEnumSimulationTypeFormat {}
  implicit lazy val BindingEnumProductFormat: scalaxb.XMLFormat[models.binding.EnumProduct] = new DefaultBindingEnumProductFormat {}
  implicit lazy val BindingEnumImpexQuantityFormat: scalaxb.XMLFormat[models.binding.EnumImpexQuantity] = new DefaultBindingEnumImpexQuantityFormat {}
  implicit lazy val BindingParticleFormat: scalaxb.XMLFormat[models.binding.Particle] = new DefaultBindingParticleFormat {}
  implicit lazy val BindingInputValueFormat: scalaxb.XMLFormat[models.binding.InputValue] = new DefaultBindingInputValueFormat {}
  implicit lazy val BindingCubesDescriptionSequenceFormat: scalaxb.XMLFormat[models.binding.CubesDescriptionSequence] = new DefaultBindingCubesDescriptionSequenceFormat {}
  implicit lazy val BindingCutsDescriptionSequenceFormat: scalaxb.XMLFormat[models.binding.CutsDescriptionSequence] = new DefaultBindingCutsDescriptionSequenceFormat {}
  implicit lazy val BindingAnyTEXTFormat: scalaxb.XMLFormat[models.binding.AnyTEXT] = new DefaultBindingAnyTEXTFormat {}
  implicit lazy val BindingEncodingTypeFormat: scalaxb.XMLFormat[models.binding.EncodingType] = new DefaultBindingEncodingTypeFormat {}
  implicit lazy val BindingDataTypeFormat: scalaxb.XMLFormat[models.binding.DataType] = new DefaultBindingDataTypeFormat {}
  implicit lazy val BindingYesnoFormat: scalaxb.XMLFormat[models.binding.Yesno] = new DefaultBindingYesnoFormat {}
  implicit lazy val BindingMinFormat: scalaxb.XMLFormat[models.binding.Min] = new DefaultBindingMinFormat {}
  implicit lazy val BindingMaxFormat: scalaxb.XMLFormat[models.binding.Max] = new DefaultBindingMaxFormat {}
  implicit lazy val BindingOptionTypeFormat: scalaxb.XMLFormat[models.binding.OptionType] = new DefaultBindingOptionTypeFormat {}
  implicit lazy val BindingTypeFormat: scalaxb.XMLFormat[models.binding.Type] = new DefaultBindingTypeFormat {}
  implicit lazy val BindingValuesFormat: scalaxb.XMLFormat[models.binding.Values] = new DefaultBindingValuesFormat {}
  implicit lazy val BindingLinkFormat: scalaxb.XMLFormat[models.binding.Link] = new DefaultBindingLinkFormat {}
  implicit lazy val BindingInfoFormat: scalaxb.XMLFormat[models.binding.Info] = new DefaultBindingInfoFormat {}
  implicit lazy val BindingSystemFormat: scalaxb.XMLFormat[models.binding.System] = new DefaultBindingSystemFormat {}
  implicit lazy val BindingCoordinateSystemFormat: scalaxb.XMLFormat[models.binding.CoordinateSystem] = new DefaultBindingCoordinateSystemFormat {}
  implicit lazy val BindingDefinitionsFormat: scalaxb.XMLFormat[models.binding.Definitions] = new DefaultBindingDefinitionsFormat {}
  implicit lazy val BindingTypeTypeFormat: scalaxb.XMLFormat[models.binding.TypeType] = new DefaultBindingTypeTypeFormat {}
  implicit lazy val BindingFieldableFormat: scalaxb.XMLFormat[models.binding.Fieldable] = new DefaultBindingFieldableFormat {}
  implicit lazy val BindingFieldFormat: scalaxb.XMLFormat[models.binding.Field] = new DefaultBindingFieldFormat {}
  implicit lazy val BindingParamFormat: scalaxb.XMLFormat[models.binding.Param] = new DefaultBindingParamFormat {}
  implicit lazy val BindingGroupFormat: scalaxb.XMLFormat[models.binding.Group] = new DefaultBindingGroupFormat {}
  implicit lazy val BindingFieldRefFormat: scalaxb.XMLFormat[models.binding.FieldRef] = new DefaultBindingFieldRefFormat {}
  implicit lazy val BindingParamRefFormat: scalaxb.XMLFormat[models.binding.ParamRef] = new DefaultBindingParamRefFormat {}
  implicit lazy val BindingDataFormat: scalaxb.XMLFormat[models.binding.Data] = new DefaultBindingDataFormat {}
  implicit lazy val BindingTableDataFormat: scalaxb.XMLFormat[models.binding.TableData] = new DefaultBindingTableDataFormat {}
  implicit lazy val BindingTdFormat: scalaxb.XMLFormat[models.binding.Td] = new DefaultBindingTdFormat {}
  implicit lazy val BindingTrFormat: scalaxb.XMLFormat[models.binding.Tr] = new DefaultBindingTrFormat {}
  implicit lazy val BindingFITSFormat: scalaxb.XMLFormat[models.binding.FITS] = new DefaultBindingFITSFormat {}
  implicit lazy val BindingBinaryFormat: scalaxb.XMLFormat[models.binding.Binary] = new DefaultBindingBinaryFormat {}
  implicit lazy val BindingTypeType2Format: scalaxb.XMLFormat[models.binding.TypeType2] = new DefaultBindingTypeType2Format {}
  implicit lazy val BindingActuateFormat: scalaxb.XMLFormat[models.binding.Actuate] = new DefaultBindingActuateFormat {}
  implicit lazy val BindingStreamTypeFormat: scalaxb.XMLFormat[models.binding.StreamType] = new DefaultBindingStreamTypeFormat {}
  implicit lazy val BindingTableFormat: scalaxb.XMLFormat[models.binding.Table] = new DefaultBindingTableFormat {}
  implicit lazy val BindingTypeType3Format: scalaxb.XMLFormat[models.binding.TypeType3] = new DefaultBindingTypeType3Format {}
  implicit lazy val BindingResourceFormat: scalaxb.XMLFormat[models.binding.Resource] = new DefaultBindingResourceFormat {}
  implicit lazy val BindingResourceSequence1Format: scalaxb.XMLFormat[models.binding.ResourceSequence1] = new DefaultBindingResourceSequence1Format {}
  implicit lazy val BindingVersionFormat: scalaxb.XMLFormat[models.binding.Version] = new DefaultBindingVersionFormat {}
  implicit lazy val BindingVOTABLEFormat: scalaxb.XMLFormat[models.binding.VOTABLE] = new DefaultBindingVOTABLEFormat {}

  /*def buildBindingEnumDirectionTypeFormat = new DefaultBindingEnumDirectionTypeFormat {}
  trait DefaultBindingEnumDirectionTypeFormat extends scalaxb.XMLFormat[models.binding.EnumDirectionType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumDirectionType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumDirectionType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumDirectionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumDirectionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }*/

  def buildBindingOutputFormatTypeFormat = new DefaultBindingOutputFormatTypeFormat {}
  trait DefaultBindingOutputFormatTypeFormat extends scalaxb.XMLFormat[models.binding.OutputFormatType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.OutputFormatType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.OutputFormatType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.OutputFormatType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.OutputFormatType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumInterpolationFormat = new DefaultBindingEnumInterpolationFormat {}
  trait DefaultBindingEnumInterpolationFormat extends scalaxb.XMLFormat[models.binding.EnumInterpolation] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumInterpolation] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumInterpolation.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumInterpolation.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumInterpolation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingSpacecraftTypeFormat = new DefaultBindingSpacecraftTypeFormat {}
  trait DefaultBindingSpacecraftTypeFormat extends scalaxb.XMLFormat[models.binding.SpacecraftType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.SpacecraftType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.SpacecraftType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.SpacecraftType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.SpacecraftType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  trait DefaultBindingDataPointValueFMIFormat extends scalaxb.ElemNameParser[models.binding.DataPointValueFMI] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("DataPointValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataPointValueFMI] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "Variable")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "url_XYZ")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.DataPointValueFMI(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[java.net.URI](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getDataPointValueFMI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DataPointValueFMI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.fmi.fi"), Some("ResourceID"), __scope, false),
        __obj.Variable map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.fmi.fi"), Some("Variable"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[java.net.URI](__obj.url_XYZ, Some("http://impex-fp7.fmi.fi"), Some("url_XYZ"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getDataPointValueFMI](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_getDataPointValueFMIFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_getDataPointValueFMI] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("extraParams_getDataPointValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_getDataPointValueFMI] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "InterpolationMethod")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "OutputFileType")) ^^
      { case p1 ~ p2 =>
      models.binding.ExtraParams_getDataPointValueFMI(p1.headOption map { scalaxb.fromXML[models.binding.EnumInterpolation](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_getDataPointValueFMI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.InterpolationMethod map { scalaxb.toXML[models.binding.EnumInterpolation](_, Some("http://impex-fp7.fmi.fi"), Some("InterpolationMethod"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, Some("http://impex-fp7.fmi.fi"), Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingDataPointSpectraFMIFormat extends scalaxb.ElemNameParser[models.binding.DataPointSpectraFMI] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("DataPointSpectra")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataPointSpectraFMI] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "url_XYZ")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.DataPointSpectraFMI(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[java.net.URI](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getDataPointSpectraFMI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DataPointSpectraFMI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.fmi.fi"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[java.net.URI](__obj.url_XYZ, Some("http://impex-fp7.fmi.fi"), Some("url_XYZ"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getDataPointSpectraFMI](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_getDataPointSpectraFMIFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_getDataPointSpectraFMI] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("extraParams_getDataPointSpectra")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_getDataPointSpectraFMI] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "InterpolationMethod")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "OutputFileType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "EnergyChannel")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.ExtraParams_getDataPointSpectraFMI(p1.headOption map { scalaxb.fromXML[models.binding.EnumInterpolation](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_getDataPointSpectraFMI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.InterpolationMethod map { scalaxb.toXML[models.binding.EnumInterpolation](_, Some("http://impex-fp7.fmi.fi"), Some("InterpolationMethod"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, Some("http://impex-fp7.fmi.fi"), Some("OutputFileType"), __scope, false) } getOrElse {Nil},
        __obj.EnergyChannel map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.fmi.fi"), Some("EnergyChannel"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingSurfaceFMIFormat extends scalaxb.ElemNameParser[models.binding.SurfaceFMI] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("Surface")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SurfaceFMI] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "Variable")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "PlanePoint")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "PlaneNormalVector")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.SurfaceFMI(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Seq[Float]](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Seq[Float]](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getSurfaceFMI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SurfaceFMI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.fmi.fi"), Some("ResourceID"), __scope, false),
        __obj.Variable map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.fmi.fi"), Some("Variable"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Seq[Float]](__obj.PlanePoint, Some("http://impex-fp7.fmi.fi"), Some("PlanePoint"), __scope, false),
        scalaxb.toXML[Seq[Float]](__obj.PlaneNormalVector, Some("http://impex-fp7.fmi.fi"), Some("PlaneNormalVector"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getSurfaceFMI](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_getSurfaceFMIFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_getSurfaceFMI] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("extraParams_getSurface")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_getSurfaceFMI] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "Resolution")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "OutputFileType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "InterpolationMethod")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.ExtraParams_getSurfaceFMI(p1.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[models.binding.EnumInterpolation](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_getSurfaceFMI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Resolution map { scalaxb.toXML[Double](_, Some("http://impex-fp7.fmi.fi"), Some("Resolution"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, Some("http://impex-fp7.fmi.fi"), Some("OutputFileType"), __scope, false) } getOrElse {Nil},
        __obj.InterpolationMethod map { scalaxb.toXML[models.binding.EnumInterpolation](_, Some("http://impex-fp7.fmi.fi"), Some("InterpolationMethod"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingDataPointValueSpacecraftFMIFormat extends scalaxb.ElemNameParser[models.binding.DataPointValueSpacecraftFMI] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("DataPointValueSpacecraft")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataPointValueSpacecraftFMI] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "Variable")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "Spacecraft_name")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "StartTime")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "StopTime")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "Sampling")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.DataPointValueSpacecraftFMI(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.SpacecraftType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.Duration](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getDataPointValueFMI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DataPointValueSpacecraftFMI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.fmi.fi"), Some("ResourceID"), __scope, false),
        __obj.Variable map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.fmi.fi"), Some("Variable"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[models.binding.SpacecraftType](__obj.Spacecraft_name, Some("http://impex-fp7.fmi.fi"), Some("Spacecraft_name"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartTime, Some("http://impex-fp7.fmi.fi"), Some("StartTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StopTime, Some("http://impex-fp7.fmi.fi"), Some("StopTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.Duration](__obj.Sampling, Some("http://impex-fp7.fmi.fi"), Some("Sampling"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getDataPointValueFMI](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingDataPointSpectraSpacecraftFMIFormat extends scalaxb.ElemNameParser[models.binding.DataPointSpectraSpacecraftFMI] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("DataPointSpectraSpacecraft")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataPointSpectraSpacecraftFMI] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "Spacecraft_name")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "StartTime")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "StopTime")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "Sampling")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      models.binding.DataPointSpectraSpacecraftFMI(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.SpacecraftType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.Duration](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getDataPointSpectraFMI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DataPointSpectraSpacecraftFMI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.fmi.fi"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.SpacecraftType](__obj.Spacecraft_name, Some("http://impex-fp7.fmi.fi"), Some("Spacecraft_name"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartTime, Some("http://impex-fp7.fmi.fi"), Some("StartTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StopTime, Some("http://impex-fp7.fmi.fi"), Some("StopTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.Duration](__obj.Sampling, Some("http://impex-fp7.fmi.fi"), Some("Sampling"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getDataPointSpectraFMI](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingFieldLineFMIFormat extends scalaxb.ElemNameParser[models.binding.FieldLineFMI] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("FieldLine")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.FieldLineFMI] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "Variable")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "url_XYZ")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.FieldLineFMI(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[java.net.URI](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getFieldLineFMI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.FieldLineFMI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.fmi.fi"), Some("ResourceID"), __scope, false),
        __obj.Variable map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.fmi.fi"), Some("Variable"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[java.net.URI](__obj.url_XYZ, Some("http://impex-fp7.fmi.fi"), Some("url_XYZ"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getFieldLineFMI](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_getFieldLineFMIFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_getFieldLineFMI] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("extraParams_getFieldLine")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_getFieldLineFMI] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "Direction")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "StepSize")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "MaxSteps")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "StopCondition_Radius")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "StopCondition_Region")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "OutputFileType")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      models.binding.ExtraParams_getFieldLineFMI(p1.headOption map { scalaxb.fromXML[models.binding.EnumDirection](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Seq[Float]](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_getFieldLineFMI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Direction map { scalaxb.toXML[models.binding.EnumDirection](_, Some("http://impex-fp7.fmi.fi"), Some("Direction"), __scope, false) } getOrElse {Nil},
        __obj.StepSize map { scalaxb.toXML[Double](_, Some("http://impex-fp7.fmi.fi"), Some("StepSize"), __scope, false) } getOrElse {Nil},
        __obj.MaxSteps map { scalaxb.toXML[BigInt](_, Some("http://impex-fp7.fmi.fi"), Some("MaxSteps"), __scope, false) } getOrElse {Nil},
        __obj.StopCondition_Radius map { scalaxb.toXML[Double](_, Some("http://impex-fp7.fmi.fi"), Some("StopCondition_Radius"), __scope, false) } getOrElse {Nil},
        __obj.StopCondition_Region map { scalaxb.toXML[Seq[Float]](_, Some("http://impex-fp7.fmi.fi"), Some("StopCondition_Region"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, Some("http://impex-fp7.fmi.fi"), Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingParticleTrajectoryFormat extends scalaxb.ElemNameParser[models.binding.ParticleTrajectory] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("ParticleTrajectory")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ParticleTrajectory] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "url_XYZ")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.ParticleTrajectory(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[java.net.URI](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getParticleTrajectory](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ParticleTrajectory, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.fmi.fi"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[java.net.URI](__obj.url_XYZ, Some("http://impex-fp7.fmi.fi"), Some("url_XYZ"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getParticleTrajectory](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_getParticleTrajectoryFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_getParticleTrajectory] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("extraParams_getParticleTrajectory")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_getParticleTrajectory] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "Direction")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "StepSize")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "MaxSteps")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "StopCondition_Radius")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "StopCondition_Region")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "InterpolationMethod")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "OutputFileType")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.ExtraParams_getParticleTrajectory(p1.headOption map { scalaxb.fromXML[models.binding.EnumDirection](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Seq[Float]](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[models.binding.EnumInterpolation](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_getParticleTrajectory, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Direction map { scalaxb.toXML[models.binding.EnumDirection](_, Some("http://impex-fp7.fmi.fi"), Some("Direction"), __scope, false) } getOrElse {Nil},
        __obj.StepSize map { scalaxb.toXML[Double](_, Some("http://impex-fp7.fmi.fi"), Some("StepSize"), __scope, false) } getOrElse {Nil},
        __obj.MaxSteps map { scalaxb.toXML[BigInt](_, Some("http://impex-fp7.fmi.fi"), Some("MaxSteps"), __scope, false) } getOrElse {Nil},
        __obj.StopCondition_Radius map { scalaxb.toXML[Double](_, Some("http://impex-fp7.fmi.fi"), Some("StopCondition_Radius"), __scope, false) } getOrElse {Nil},
        __obj.StopCondition_Region map { scalaxb.toXML[Seq[Float]](_, Some("http://impex-fp7.fmi.fi"), Some("StopCondition_Region"), __scope, false) } getOrElse {Nil},
        __obj.InterpolationMethod map { scalaxb.toXML[models.binding.EnumInterpolation](_, Some("http://impex-fp7.fmi.fi"), Some("InterpolationMethod"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, Some("http://impex-fp7.fmi.fi"), Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingMostRelevantRunFormat extends scalaxb.ElemNameParser[models.binding.MostRelevantRun] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("MostRelevantRun")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.MostRelevantRun] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "Object")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.fmi.fi"), "RunCount")) ~ 
      (scalaxb.ElemName(None, "SW_parameters")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.MostRelevantRun(scalaxb.fromXML[EnumRegion](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[SW_parameter_list](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.MostRelevantRun, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[EnumRegion](__obj.Object, Some("http://impex-fp7.fmi.fi"), Some("Object"), __scope, false),
        __obj.RunCount map { scalaxb.toXML[BigInt](_, Some("http://impex-fp7.fmi.fi"), Some("RunCount"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[SW_parameter_list](__obj.SW_parameters, None, Some("SW_parameters"), __scope, false))

  }

  trait DefaultBindingSW_parameter_listFormat extends scalaxb.ElemNameParser[models.binding.SW_parameter_list] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("SW_parameter_list")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SW_parameter_list] =
      phrase(opt(scalaxb.ElemName(None, "SW_Density")) ~ 
      opt(scalaxb.ElemName(None, "SW_Utot")) ~ 
      opt(scalaxb.ElemName(None, "SW_Temperature")) ~ 
      opt(scalaxb.ElemName(None, "SW_Btot")) ~ 
      opt(scalaxb.ElemName(None, "SW_Bx")) ~ 
      opt(scalaxb.ElemName(None, "SW_By")) ~ 
      opt(scalaxb.ElemName(None, "SW_Bz")) ~ 
      opt(scalaxb.ElemName(None, "Solar_F10.7")) ~ 
      opt(scalaxb.ElemName(None, "SW_Function")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      models.binding.SW_parameter_list(p1.headOption map { scalaxb.fromXML[models.binding.SW_parameter](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.SW_parameter](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[models.binding.SW_parameter](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.SW_parameter](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[models.binding.SW_parameter](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[models.binding.SW_parameter](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.SW_parameter](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[models.binding.SW_parameter](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[models.binding.SW_parameter](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SW_parameter_list, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SW_Density map { scalaxb.toXML[models.binding.SW_parameter](_, None, Some("SW_Density"), __scope, false) } getOrElse {Nil},
        __obj.SW_Utot map { scalaxb.toXML[models.binding.SW_parameter](_, None, Some("SW_Utot"), __scope, false) } getOrElse {Nil},
        __obj.SW_Temperature map { scalaxb.toXML[models.binding.SW_parameter](_, None, Some("SW_Temperature"), __scope, false) } getOrElse {Nil},
        __obj.SW_Btot map { scalaxb.toXML[models.binding.SW_parameter](_, None, Some("SW_Btot"), __scope, false) } getOrElse {Nil},
        __obj.SW_Bx map { scalaxb.toXML[models.binding.SW_parameter](_, None, Some("SW_Bx"), __scope, false) } getOrElse {Nil},
        __obj.SW_By map { scalaxb.toXML[models.binding.SW_parameter](_, None, Some("SW_By"), __scope, false) } getOrElse {Nil},
        __obj.SW_Bz map { scalaxb.toXML[models.binding.SW_parameter](_, None, Some("SW_Bz"), __scope, false) } getOrElse {Nil},
        __obj.Solar_F10u467 map { scalaxb.toXML[models.binding.SW_parameter](_, None, Some("Solar_F10.7"), __scope, false) } getOrElse {Nil},
        __obj.SW_Function map { scalaxb.toXML[models.binding.SW_parameter](_, None, Some("SW_Function"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingSW_parameterFormat extends scalaxb.ElemNameParser[models.binding.SW_parameter] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("SW_parameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SW_parameter] =
      phrase((scalaxb.ElemName(None, "value")) ~ 
      opt(scalaxb.ElemName(None, "weight")) ~ 
      opt(scalaxb.ElemName(None, "scale")) ~ 
      opt(scalaxb.ElemName(None, "function")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.SW_parameter(scalaxb.fromXML[Double](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SW_parameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Double](__obj.value, None, Some("value"), __scope, false),
        __obj.weight map { scalaxb.toXML[Double](_, None, Some("weight"), __scope, false) } getOrElse {Nil},
        __obj.scale map { scalaxb.toXML[Double](_, None, Some("scale"), __scope, false) } getOrElse {Nil},
        __obj.function map { scalaxb.toXML[String](_, None, Some("function"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingVOTableURLFormat extends scalaxb.ElemNameParser[models.binding.VOTableURL] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("VOTableURL")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.VOTableURL] =
      phrase(opt(scalaxb.ElemName(None, "Table_name")) ~ 
      opt(scalaxb.ElemName(None, "Description")) ~ 
      rep(scalaxb.ElemName(None, "Fields")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.VOTableURL(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[models.binding.VOTable_field](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.VOTableURL, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Table_name map { scalaxb.toXML[String](_, None, Some("Table_name"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, None, Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Fields flatMap { scalaxb.toXML[models.binding.VOTable_field](_, None, Some("Fields"), __scope, false) })

  }

  trait DefaultBindingVOTable_fieldFormat extends scalaxb.ElemNameParser[models.binding.VOTable_field] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    
    override def typeName: Option[String] = Some("VOTable_field")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.VOTable_field] =
      phrase((scalaxb.ElemName(None, "data")) ~ 
      (scalaxb.ElemName(None, "name")) ~ 
      opt(scalaxb.ElemName(None, "ID")) ~ 
      opt(scalaxb.ElemName(None, "unit")) ~ 
      opt(scalaxb.ElemName(None, "datatype")) ~ 
      opt(scalaxb.ElemName(None, "xtype")) ~ 
      opt(scalaxb.ElemName(None, "ucd")) ~ 
      opt(scalaxb.ElemName(None, "utype")) ~ 
      opt(scalaxb.ElemName(None, "description")) ~ 
      opt(scalaxb.ElemName(None, "arraysize")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      models.binding.VOTable_field(scalaxb.fromXML[Seq[String]](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[models.binding.DataType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.VOTable_field, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Seq[String]](__obj.data, None, Some("data"), __scope, false),
        scalaxb.toXML[String](__obj.name, None, Some("name"), __scope, false),
        __obj.ID map { scalaxb.toXML[String](_, None, Some("ID"), __scope, false) } getOrElse {Nil},
        __obj.unit map { scalaxb.toXML[String](_, None, Some("unit"), __scope, false) } getOrElse {Nil},
        __obj.datatype map { scalaxb.toXML[models.binding.DataType](_, None, Some("datatype"), __scope, false) } getOrElse {Nil},
        __obj.xtype map { scalaxb.toXML[String](_, None, Some("xtype"), __scope, false) } getOrElse {Nil},
        __obj.ucd map { scalaxb.toXML[String](_, None, Some("ucd"), __scope, false) } getOrElse {Nil},
        __obj.utype map { scalaxb.toXML[String](_, None, Some("utype"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, None, Some("description"), __scope, false) } getOrElse {Nil},
        __obj.arraysize map { scalaxb.toXML[String](_, None, Some("arraysize"), __scope, false) } getOrElse {Nil})

  }


  trait Methods_FMISoapBindings { this: scalaxb.Soap11Clients =>
    lazy val targetNamespace: Option[String] = Some("http://impex-fp7.fmi.fi")
    lazy val service: models.binding.Methods_FMI = new Methods_FMISoapBinding {}
    def baseAddress = new java.net.URI("http://impex-fp7.fmi.fi/ws/Methods_FMI.php")

    trait Methods_FMISoapBinding extends models.binding.Methods_FMI {
      def getDataPointValue(resourceID: String, variable: Option[Seq[String]], url_XYZ: java.net.URI, extraParams: Option[models.binding.ExtraParams_getDataPointValueFMI]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.DataPointValueFMI(resourceID, variable, url_XYZ, extraParams), Some("http://impex-fp7.fmi.fi"), "getDataPointValue", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("DataPointValue"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def getDataPointValueSpacecraft(resourceID: String, variable: Option[Seq[String]], spacecraft_name: models.binding.SpacecraftType, startTime: javax.xml.datatype.XMLGregorianCalendar, stopTime: javax.xml.datatype.XMLGregorianCalendar, 
        sampling: javax.xml.datatype.Duration, extraParams: Option[models.binding.ExtraParams_getDataPointValueFMI]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.DataPointValueSpacecraftFMI(resourceID, variable, spacecraft_name, startTime, stopTime, sampling, extraParams), Some("http://impex-fp7.fmi.fi"), "getDataPointValueSpacecraft", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("DataPointValueSpacecraft"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def getDataPointSpectra(resourceID: String, url_XYZ: java.net.URI, extraParams: Option[models.binding.ExtraParams_getDataPointSpectraFMI]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.DataPointSpectraFMI(resourceID, url_XYZ, extraParams), Some("http://impex-fp7.fmi.fi"), "getDataPointSpectra", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("DataPointSpectra"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def getSurface(resourceID: String, variable: Option[Seq[String]], planePoint: Seq[Float], planeNormalVector: Seq[Float], extraParams: Option[models.binding.ExtraParams_getSurfaceFMI]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.SurfaceFMI(resourceID, variable, planePoint, planeNormalVector, extraParams), Some("http://impex-fp7.fmi.fi"), "getSurface", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("Surface"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def getDataPointSpectraSpacecraft(resourceID: String, spacecraft_name: models.binding.SpacecraftType, startTime: javax.xml.datatype.XMLGregorianCalendar, stopTime: javax.xml.datatype.XMLGregorianCalendar, 
        sampling: javax.xml.datatype.Duration, extraParams: Option[models.binding.ExtraParams_getDataPointSpectraFMI]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.DataPointSpectraSpacecraftFMI(resourceID, spacecraft_name, startTime, stopTime, sampling, extraParams), Some("http://impex-fp7.fmi.fi"), "getDataPointSpectraSpacecraft", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("DataPointSpectraSpacecraft"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def getFieldLine(resourceID: String, variable: Option[Seq[String]], url_XYZ: java.net.URI, extraParams: Option[models.binding.ExtraParams_getFieldLineFMI]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.FieldLineFMI(resourceID, variable, url_XYZ, extraParams), Some("http://impex-fp7.fmi.fi"), "getFieldLine", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("FieldLine"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def getParticleTrajectory(resourceID: String, url_XYZ: java.net.URI, extraParams: Option[models.binding.ExtraParams_getParticleTrajectory]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.ParticleTrajectory(resourceID, url_XYZ, extraParams), Some("http://impex-fp7.fmi.fi"), "getParticleTrajectory", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("ParticleTrajectory"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def getMostRelevantRun(objectValue: EnumRegion, runCount: Option[BigInt], sW_parameters: models.binding.SW_parameter_list): Either[scalaxb.Soap11Fault[Any], String] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.MostRelevantRun(objectValue, runCount, sW_parameters), Some("http://impex-fp7.fmi.fi"), "getMostRelevantRun", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("MostRelevantRun"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[String](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def getVOTableURL(table_name: Option[String], description: Option[String], fields: Seq[models.binding.VOTable_field]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.VOTableURL(table_name, description, fields), Some("http://impex-fp7.fmi.fi"), "getVOTableURL", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("VOTableURL"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def isAlive(): Either[scalaxb.Soap11Fault[Any], Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.EmptyElement(), Some("http://impex-fp7.fmi.fi"), "emptyElement", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("Alive"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[Boolean](body.headOption getOrElse {body}))
        }
    }
  }


  /*def buildBindingOutputFormatFormat = new DefaultBindingOutputFormatFormat {}
  trait DefaultBindingOutputFormatFormat extends scalaxb.XMLFormat[models.binding.OutputFormat] {
    val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.OutputFormat] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.OutputFormat.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.OutputFormat.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.OutputFormat, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  def buildBindingSpacecraftFormat = new DefaultBindingSpacecraftFormat {}
  trait DefaultBindingSpacecraftFormat extends scalaxb.XMLFormat[models.binding.Spacecraft] {
    val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Spacecraft] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.Spacecraft.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.Spacecraft.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.Spacecraft, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }*/

  trait DefaultBindingDataPointValueLATMOSFormat extends scalaxb.ElemNameParser[models.binding.DataPointValueLATMOS] {
    val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    
    override def typeName: Option[String] = Some("DataPointValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataPointValueLATMOS] =
      phrase((scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "Variable")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "url_XYZ")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.DataPointValueLATMOS(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[java.net.URI](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getDataPointValueLATMOS](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DataPointValueLATMOS, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex.latmos.ipsl.fr"), Some("ResourceID"), __scope, false),
        __obj.Variable map { scalaxb.toXML[Seq[String]](_, Some("http://impex.latmos.ipsl.fr"), Some("Variable"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[java.net.URI](__obj.url_XYZ, Some("http://impex.latmos.ipsl.fr"), Some("url_XYZ"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getDataPointValueLATMOS](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_getDataPointValueLATMOSFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_getDataPointValueLATMOS] {
    val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    
    override def typeName: Option[String] = Some("extraParams_getDataPointValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_getDataPointValueLATMOS] =
      phrase(opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "IMFClockAngle")) ~ 
      opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "OutputFileType")) ^^
      { case p1 ~ p2 =>
      models.binding.ExtraParams_getDataPointValueLATMOS(p1.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_getDataPointValueLATMOS, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.IMFClockAngle map { scalaxb.toXML[Double](_, Some("http://impex.latmos.ipsl.fr"), Some("IMFClockAngle"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, Some("http://impex.latmos.ipsl.fr"), Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingDataPointSpectraLATMOSFormat extends scalaxb.ElemNameParser[models.binding.DataPointSpectraLATMOS] {
    val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    
    override def typeName: Option[String] = Some("DataPointSpectra")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataPointSpectraLATMOS] =
      phrase((scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "url_XYZ")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.DataPointSpectraLATMOS(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[java.net.URI](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getDataPointSpectraLATMOS](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DataPointSpectraLATMOS, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex.latmos.ipsl.fr"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[java.net.URI](__obj.url_XYZ, Some("http://impex.latmos.ipsl.fr"), Some("url_XYZ"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getDataPointSpectraLATMOS](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_getDataPointSpectraLATMOSFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_getDataPointSpectraLATMOS] {
    val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    
    override def typeName: Option[String] = Some("extraParams_getDataPointSpectra")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_getDataPointSpectraLATMOS] =
      phrase(opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "IMFClockAngle")) ~ 
      opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "OutputFileType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "EnergyChannel")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.ExtraParams_getDataPointSpectraLATMOS(p1.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_getDataPointSpectraLATMOS, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.IMFClockAngle map { scalaxb.toXML[Double](_, Some("http://impex.latmos.ipsl.fr"), Some("IMFClockAngle"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, Some("http://impex.latmos.ipsl.fr"), Some("OutputFileType"), __scope, false) } getOrElse {Nil},
        __obj.EnergyChannel map { scalaxb.toXML[Seq[String]](_, Some("http://impex.latmos.ipsl.fr"), Some("EnergyChannel"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingSurfaceLATMOSFormat extends scalaxb.ElemNameParser[models.binding.SurfaceLATMOS] {
    val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    
    override def typeName: Option[String] = Some("Surface")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SurfaceLATMOS] =
      phrase((scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "Variable")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "PlanePoint")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "PlaneNormalVector")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.SurfaceLATMOS(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Seq[Float]](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Seq[Float]](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getSurfaceLATMOS](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SurfaceLATMOS, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex.latmos.ipsl.fr"), Some("ResourceID"), __scope, false),
        __obj.Variable map { scalaxb.toXML[Seq[String]](_, Some("http://impex.latmos.ipsl.fr"), Some("Variable"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Seq[Float]](__obj.PlanePoint, Some("http://impex.latmos.ipsl.fr"), Some("PlanePoint"), __scope, false),
        scalaxb.toXML[Seq[Float]](__obj.PlaneNormalVector, Some("http://impex.latmos.ipsl.fr"), Some("PlaneNormalVector"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getSurfaceLATMOS](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_getSurfaceLATMOSFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_getSurfaceLATMOS] {
    val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    
    override def typeName: Option[String] = Some("extraParams_getSurface")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_getSurfaceLATMOS] =
      phrase(opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "Resolution")) ~ 
      opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "IMFClockAngle")) ~ 
      opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "OutputFileType")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.ExtraParams_getSurfaceLATMOS(p1.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_getSurfaceLATMOS, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Resolution map { scalaxb.toXML[Double](_, Some("http://impex.latmos.ipsl.fr"), Some("Resolution"), __scope, false) } getOrElse {Nil},
        __obj.IMFClockAngle map { scalaxb.toXML[Double](_, Some("http://impex.latmos.ipsl.fr"), Some("IMFClockAngle"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, Some("http://impex.latmos.ipsl.fr"), Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingDataPointValueSpacecraftLATMOSFormat extends scalaxb.ElemNameParser[models.binding.DataPointValueSpacecraftLATMOS] {
    val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    
    override def typeName: Option[String] = Some("DataPointValueSpacecraft")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataPointValueSpacecraftLATMOS] =
      phrase((scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "Variable")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "Spacecraft_name")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "StartTime")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "StopTime")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "Sampling")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.DataPointValueSpacecraftLATMOS(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.SpacecraftType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.Duration](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getDataPointValueLATMOS](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DataPointValueSpacecraftLATMOS, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex.latmos.ipsl.fr"), Some("ResourceID"), __scope, false),
        __obj.Variable map { scalaxb.toXML[Seq[String]](_, Some("http://impex.latmos.ipsl.fr"), Some("Variable"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[models.binding.SpacecraftType](__obj.Spacecraft_name, Some("http://impex.latmos.ipsl.fr"), Some("Spacecraft_name"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartTime, Some("http://impex.latmos.ipsl.fr"), Some("StartTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StopTime, Some("http://impex.latmos.ipsl.fr"), Some("StopTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.Duration](__obj.Sampling, Some("http://impex.latmos.ipsl.fr"), Some("Sampling"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getDataPointValueLATMOS](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingDataPointSpectraSpacecraftLATMOSFormat extends scalaxb.ElemNameParser[models.binding.DataPointSpectraSpacecraftLATMOS] {
    val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    
    override def typeName: Option[String] = Some("DataPointSpectraSpacecraft")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataPointSpectraSpacecraftLATMOS] =
      phrase((scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "Spacecraft_name")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "StartTime")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "StopTime")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "Sampling")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      models.binding.DataPointSpectraSpacecraftLATMOS(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.SpacecraftType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.Duration](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getDataPointSpectraLATMOS](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DataPointSpectraSpacecraftLATMOS, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex.latmos.ipsl.fr"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.SpacecraftType](__obj.Spacecraft_name, Some("http://impex.latmos.ipsl.fr"), Some("Spacecraft_name"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartTime, Some("http://impex.latmos.ipsl.fr"), Some("StartTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StopTime, Some("http://impex.latmos.ipsl.fr"), Some("StopTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.Duration](__obj.Sampling, Some("http://impex.latmos.ipsl.fr"), Some("Sampling"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getDataPointSpectraLATMOS](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingFileURLFormat extends scalaxb.ElemNameParser[models.binding.FileURL] {
    val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    
    override def typeName: Option[String] = Some("FileURL")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.FileURL] =
      phrase((scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "StartTime")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "StopTime")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.FileURL(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.FileURL, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex.latmos.ipsl.fr"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartTime, Some("http://impex.latmos.ipsl.fr"), Some("StartTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StopTime, Some("http://impex.latmos.ipsl.fr"), Some("StopTime"), __scope, false))

  }

  trait DefaultBindingFieldLineLATMOSFormat extends scalaxb.ElemNameParser[models.binding.FieldLineLATMOS] {
    val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    
    override def typeName: Option[String] = Some("FieldLine")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.FieldLineLATMOS] =
      phrase((scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "Variable")) ~ 
      (scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "url_XYZ")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.FieldLineLATMOS(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[java.net.URI](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getFieldLineLATMOS](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.FieldLineLATMOS, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex.latmos.ipsl.fr"), Some("ResourceID"), __scope, false),
        __obj.Variable map { scalaxb.toXML[Seq[String]](_, Some("http://impex.latmos.ipsl.fr"), Some("Variable"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[java.net.URI](__obj.url_XYZ, Some("http://impex.latmos.ipsl.fr"), Some("url_XYZ"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getFieldLineLATMOS](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_getFieldLineLATMOSFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_getFieldLineLATMOS] {
    val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    
    override def typeName: Option[String] = Some("extraParams_getFieldLine")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_getFieldLineLATMOS] =
      phrase(opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "Direction")) ~ 
      opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "StepSize")) ~ 
      opt(scalaxb.ElemName(Some("http://impex.latmos.ipsl.fr"), "OutputFileType")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.ExtraParams_getFieldLineLATMOS(p1.headOption map { scalaxb.fromXML[models.binding.EnumDirection](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_getFieldLineLATMOS, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Direction map { scalaxb.toXML[models.binding.EnumDirection](_, Some("http://impex.latmos.ipsl.fr"), Some("Direction"), __scope, false) } getOrElse {Nil},
        __obj.StepSize map { scalaxb.toXML[Double](_, Some("http://impex.latmos.ipsl.fr"), Some("StepSize"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, Some("http://impex.latmos.ipsl.fr"), Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }

  def buildBindingEnumDirectionFormat = new DefaultBindingEnumDirectionFormat {}
  trait DefaultBindingEnumDirectionFormat extends scalaxb.XMLFormat[models.binding.EnumDirection] {
    val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumDirection] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumDirection.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumDirection.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumDirection, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }


  trait Methods_LATMOSSoapBindings { this: scalaxb.Soap11Clients =>
    lazy val targetNamespace: Option[String] = Some("http://impex.latmos.ipsl.fr")
    lazy val service: models.binding.Methods_LATMOS = new Methods_LATMOSSoapBinding {}
    def baseAddress = new java.net.URI("http://impex.latmos.ipsl.fr/IMPExWS.php")

    trait Methods_LATMOSSoapBinding extends models.binding.Methods_LATMOS {
      def getDataPointValue(resourceID: String, variable: Option[Seq[String]], url_XYZ: java.net.URI, extraParams: Option[models.binding.ExtraParams_getDataPointValueLATMOS]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.DataPointValueLATMOS(resourceID, variable, url_XYZ, extraParams), Some("http://impex.latmos.ipsl.fr"), "getDataPointValue", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("DataPointValue"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def getDataPointSpectra(resourceID: String, url_XYZ: java.net.URI, extraParams: Option[models.binding.ExtraParams_getDataPointSpectraLATMOS]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.DataPointSpectraLATMOS(resourceID, url_XYZ, extraParams), Some("http://impex.latmos.ipsl.fr"), "getDataPointSpectra", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("DataPointSpectra"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def getSurface(resourceID: String, variable: Option[Seq[String]], planePoint: Seq[Float], planeNormalVector: Seq[Float], extraParams: Option[models.binding.ExtraParams_getSurfaceLATMOS]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.SurfaceLATMOS(resourceID, variable, planePoint, planeNormalVector, extraParams), Some("http://impex.latmos.ipsl.fr"), "getSurface", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("Surface"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def getDataPointValueSpacecraft(resourceID: String, variable: Option[Seq[String]], spacecraft_name: models.binding.SpacecraftType, startTime: javax.xml.datatype.XMLGregorianCalendar, 
        stopTime: javax.xml.datatype.XMLGregorianCalendar, sampling: javax.xml.datatype.Duration, extraParams: Option[models.binding.ExtraParams_getDataPointValueLATMOS]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.DataPointValueSpacecraftLATMOS(resourceID, variable, spacecraft_name, startTime, stopTime, sampling, extraParams), Some("http://impex.latmos.ipsl.fr"), "getDataPointValueSpacecraft", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("DataPointValueSpacecraft"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def getDataPointSpectraSpacecraft(resourceID: String, spacecraft_name: models.binding.SpacecraftType, startTime: javax.xml.datatype.XMLGregorianCalendar, 
        stopTime: javax.xml.datatype.XMLGregorianCalendar, sampling: javax.xml.datatype.Duration, extraParams: Option[models.binding.ExtraParams_getDataPointSpectraLATMOS]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.DataPointSpectraSpacecraftLATMOS(resourceID, spacecraft_name, startTime, stopTime, sampling, extraParams), Some("http://impex.latmos.ipsl.fr"), "getDataPointSpectraSpacecraft", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("DataPointSpectraSpacecraft"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def getFileURL(resourceID: String, startTime: javax.xml.datatype.XMLGregorianCalendar, stopTime: javax.xml.datatype.XMLGregorianCalendar): Either[scalaxb.Soap11Fault[Any], models.binding.VOTABLE] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.FileURL(resourceID, startTime, stopTime), Some("http://impex.latmos.ipsl.fr"), "getFileURL", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("FileURL"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[models.binding.VOTABLE](body.headOption getOrElse {body}))
        }
      def getFieldLine(resourceID: String, variable: Option[Seq[String]], url_XYZ: java.net.URI, extraParams: Option[models.binding.ExtraParams_getFieldLineLATMOS]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.FieldLineLATMOS(resourceID, variable, url_XYZ, extraParams), Some("http://impex.latmos.ipsl.fr"), "getFieldLine", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("FieldLine"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      // @FIXME emptyAlive => should be emptyElement 
      def isAlive(): Either[scalaxb.Soap11Fault[Any], Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.EmptyElement(), Some("http://impex.latmos.ipsl.fr"), "emptyAlive", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("Alive"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[Boolean](body.headOption getOrElse {body}))
        }
    }
  }


  /*def buildBindingOutputFormatType2Format = new DefaultBindingOutputFormatType2Format {}
  trait DefaultBindingOutputFormatType2Format extends scalaxb.XMLFormat[models.binding.OutputFormatType2] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.OutputFormatType2] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.OutputFormatType2.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.OutputFormatType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.OutputFormatType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  def buildBindingInterpolationFormat = new DefaultBindingInterpolationFormat {}
  trait DefaultBindingInterpolationFormat extends scalaxb.XMLFormat[models.binding.Interpolation] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Interpolation] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.Interpolation.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.Interpolation.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.Interpolation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }*/

  def buildBindingSpacecraftTypeSINPFormat = new DefaultBindingSpacecraftTypeSINPFormat {}
  trait DefaultBindingSpacecraftTypeSINPFormat extends scalaxb.XMLFormat[models.binding.SpacecraftTypeSINP] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.SpacecraftTypeSINP] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.SpacecraftTypeSINP.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.SpacecraftTypeSINP.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.SpacecraftTypeSINP, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  trait DefaultBindingListOfDoubleFormat extends scalaxb.ElemNameParser[models.binding.ListOfDouble] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("ListOfDouble")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ListOfDouble] =
      phrase(opt(scalaxb.ElemName(None, "x")) ~ 
      opt(scalaxb.ElemName(None, "y")) ~ 
      opt(scalaxb.ElemName(None, "z")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.ListOfDouble(p1.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ListOfDouble, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.x map { scalaxb.toXML[Double](_, None, Some("x"), __scope, false) } getOrElse {Nil},
        __obj.y map { scalaxb.toXML[Double](_, None, Some("y"), __scope, false) } getOrElse {Nil},
        __obj.z map { scalaxb.toXML[Double](_, None, Some("z"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingCube_size_arrayFormat extends scalaxb.ElemNameParser[models.binding.Cube_size_array] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("cube_size_array")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Cube_size_array] =
      phrase(opt(scalaxb.ElemName(None, "x_low")) ~ 
      opt(scalaxb.ElemName(None, "x_high")) ~ 
      opt(scalaxb.ElemName(None, "y_low")) ~ 
      opt(scalaxb.ElemName(None, "y_high")) ~ 
      opt(scalaxb.ElemName(None, "z_low")) ~ 
      opt(scalaxb.ElemName(None, "z_high")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      models.binding.Cube_size_array(p1.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Cube_size_array, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.x_low map { scalaxb.toXML[BigInt](_, None, Some("x_low"), __scope, false) } getOrElse {Nil},
        __obj.x_high map { scalaxb.toXML[BigInt](_, None, Some("x_high"), __scope, false) } getOrElse {Nil},
        __obj.y_low map { scalaxb.toXML[BigInt](_, None, Some("y_low"), __scope, false) } getOrElse {Nil},
        __obj.y_high map { scalaxb.toXML[BigInt](_, None, Some("y_high"), __scope, false) } getOrElse {Nil},
        __obj.z_low map { scalaxb.toXML[BigInt](_, None, Some("z_low"), __scope, false) } getOrElse {Nil},
        __obj.z_high map { scalaxb.toXML[BigInt](_, None, Some("z_high"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_getDataPointValueSINPFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_getDataPointValueSINP] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("extraParams_getDataPointValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_getDataPointValueSINP] =
      phrase(opt(scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "OutputFileType")) ~ 
      opt(scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "InterpolationMethod")) ^^
      { case p1 ~ p2 =>
      models.binding.ExtraParams_getDataPointValueSINP(p1.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.EnumInterpolation](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_getDataPointValueSINP, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, Some("http://smdc.sinp.msu.ru"), Some("OutputFileType"), __scope, false) } getOrElse {Nil},
        __obj.InterpolationMethod map { scalaxb.toXML[models.binding.EnumInterpolation](_, Some("http://smdc.sinp.msu.ru"), Some("InterpolationMethod"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_calculateDataPointValueFixedTimeFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_calculateDataPointValueFixedTime] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("extraParams_calculateDataPointValueFixedTime")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_calculateDataPointValueFixedTime] =
      phrase(opt(scalaxb.ElemName(None, "SWDensity")) ~ 
      opt(scalaxb.ElemName(None, "SWVelocity")) ~ 
      opt(scalaxb.ElemName(None, "IMF_B")) ~ 
      opt(scalaxb.ElemName(None, "Dst")) ~ 
      opt(scalaxb.ElemName(None, "AL")) ~ 
      opt(scalaxb.ElemName(None, "OutputFileType")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      models.binding.ExtraParams_calculateDataPointValueFixedTime(p1.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[models.binding.ListOfDouble](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_calculateDataPointValueFixedTime, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SWDensity map { scalaxb.toXML[Double](_, None, Some("SWDensity"), __scope, false) } getOrElse {Nil},
        __obj.SWVelocity map { scalaxb.toXML[Double](_, None, Some("SWVelocity"), __scope, false) } getOrElse {Nil},
        __obj.IMF_B map { scalaxb.toXML[models.binding.ListOfDouble](_, None, Some("IMF_B"), __scope, false) } getOrElse {Nil},
        __obj.Dst map { scalaxb.toXML[Double](_, None, Some("Dst"), __scope, false) } getOrElse {Nil},
        __obj.AL map { scalaxb.toXML[Double](_, None, Some("AL"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, None, Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_calculateDataPointValueFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_calculateDataPointValue] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("extraParams_calculateDataPointValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_calculateDataPointValue] =
      phrase(opt(scalaxb.ElemName(None, "OutputFileType")) ^^
      { case p1 =>
      models.binding.ExtraParams_calculateDataPointValue(p1.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_calculateDataPointValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, None, Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_calculateDataPointValueMercuryFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_calculateDataPointValueMercury] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("extraParams_calculateDataPointValueMercury")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_calculateDataPointValueMercury] =
      phrase(opt(scalaxb.ElemName(None, "OutputFileType")) ~ 
      opt(scalaxb.ElemName(None, "BD")) ~ 
      opt(scalaxb.ElemName(None, "Flux")) ~ 
      opt(scalaxb.ElemName(None, "Rss")) ~ 
      opt(scalaxb.ElemName(None, "R2")) ~ 
      opt(scalaxb.ElemName(None, "DZ")) ~ 
      opt(scalaxb.ElemName(None, "IMF_B")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.ExtraParams_calculateDataPointValueMercury(p1.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.ListOfDouble](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_calculateDataPointValueMercury, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, None, Some("OutputFileType"), __scope, false) } getOrElse {Nil},
        __obj.BD map { scalaxb.toXML[Double](_, None, Some("BD"), __scope, false) } getOrElse {Nil},
        __obj.Flux map { scalaxb.toXML[Double](_, None, Some("Flux"), __scope, false) } getOrElse {Nil},
        __obj.Rss map { scalaxb.toXML[Double](_, None, Some("Rss"), __scope, false) } getOrElse {Nil},
        __obj.R2 map { scalaxb.toXML[Double](_, None, Some("R2"), __scope, false) } getOrElse {Nil},
        __obj.DZ map { scalaxb.toXML[Double](_, None, Some("DZ"), __scope, false) } getOrElse {Nil},
        __obj.IMF_B map { scalaxb.toXML[models.binding.ListOfDouble](_, None, Some("IMF_B"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_calculateDataPointValueSaturnFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_calculateDataPointValueSaturn] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("extraParams_calculateDataPointValueSaturn")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_calculateDataPointValueSaturn] =
      phrase(opt(scalaxb.ElemName(None, "OutputFileType")) ~ 
      opt(scalaxb.ElemName(None, "BDC")) ~ 
      opt(scalaxb.ElemName(None, "BT")) ~ 
      opt(scalaxb.ElemName(None, "RD2")) ~ 
      opt(scalaxb.ElemName(None, "RD1")) ~ 
      opt(scalaxb.ElemName(None, "R2")) ~ 
      opt(scalaxb.ElemName(None, "Rss")) ~ 
      opt(scalaxb.ElemName(None, "IMF_B")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      models.binding.ExtraParams_calculateDataPointValueSaturn(p1.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[models.binding.ListOfDouble](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_calculateDataPointValueSaturn, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, None, Some("OutputFileType"), __scope, false) } getOrElse {Nil},
        __obj.BDC map { scalaxb.toXML[Double](_, None, Some("BDC"), __scope, false) } getOrElse {Nil},
        __obj.BT map { scalaxb.toXML[Double](_, None, Some("BT"), __scope, false) } getOrElse {Nil},
        __obj.RD2 map { scalaxb.toXML[Double](_, None, Some("RD2"), __scope, false) } getOrElse {Nil},
        __obj.RD1 map { scalaxb.toXML[Double](_, None, Some("RD1"), __scope, false) } getOrElse {Nil},
        __obj.R2 map { scalaxb.toXML[Double](_, None, Some("R2"), __scope, false) } getOrElse {Nil},
        __obj.Rss map { scalaxb.toXML[Double](_, None, Some("Rss"), __scope, false) } getOrElse {Nil},
        __obj.IMF_B map { scalaxb.toXML[models.binding.ListOfDouble](_, None, Some("IMF_B"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_calculateDataPointValueJupiterFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_calculateDataPointValueJupiter] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("extraParams_calculateDataPointValueJupiter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_calculateDataPointValueJupiter] =
      phrase(opt(scalaxb.ElemName(None, "OutputFileType")) ~ 
      opt(scalaxb.ElemName(None, "BD")) ~ 
      opt(scalaxb.ElemName(None, "BDC")) ~ 
      opt(scalaxb.ElemName(None, "BT")) ~ 
      opt(scalaxb.ElemName(None, "RD2")) ~ 
      opt(scalaxb.ElemName(None, "RD1")) ~ 
      opt(scalaxb.ElemName(None, "R2")) ~ 
      opt(scalaxb.ElemName(None, "Rss")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      models.binding.ExtraParams_calculateDataPointValueJupiter(p1.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_calculateDataPointValueJupiter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, None, Some("OutputFileType"), __scope, false) } getOrElse {Nil},
        __obj.BD map { scalaxb.toXML[Double](_, None, Some("BD"), __scope, false) } getOrElse {Nil},
        __obj.BDC map { scalaxb.toXML[Double](_, None, Some("BDC"), __scope, false) } getOrElse {Nil},
        __obj.BT map { scalaxb.toXML[Double](_, None, Some("BT"), __scope, false) } getOrElse {Nil},
        __obj.RD2 map { scalaxb.toXML[Double](_, None, Some("RD2"), __scope, false) } getOrElse {Nil},
        __obj.RD1 map { scalaxb.toXML[Double](_, None, Some("RD1"), __scope, false) } getOrElse {Nil},
        __obj.R2 map { scalaxb.toXML[Double](_, None, Some("R2"), __scope, false) } getOrElse {Nil},
        __obj.Rss map { scalaxb.toXML[Double](_, None, Some("Rss"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_calculateDataPointValueSpacecraftFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_calculateDataPointValueSpacecraft] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("extraParams_calculateDataPointValueSpacecraft")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_calculateDataPointValueSpacecraft] =
      phrase(opt(scalaxb.ElemName(None, "OutputFileType")) ^^
      { case p1 =>
      models.binding.ExtraParams_calculateDataPointValueSpacecraft(p1.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_calculateDataPointValueSpacecraft, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, None, Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_calculateFieldLineFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_calculateFieldLine] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("extraParams_calculateFieldLine")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_calculateFieldLine] =
      phrase(opt(scalaxb.ElemName(None, "LineLength")) ~ 
      opt(scalaxb.ElemName(None, "StepSize")) ~ 
      opt(scalaxb.ElemName(None, "OutputFileType")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.ExtraParams_calculateFieldLine(p1.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_calculateFieldLine, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.LineLength map { scalaxb.toXML[Double](_, None, Some("LineLength"), __scope, false) } getOrElse {Nil},
        __obj.StepSize map { scalaxb.toXML[Double](_, None, Some("StepSize"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, None, Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_calculateCubeFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_calculateCube] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("extraParams_calculateCube")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_calculateCube] =
      phrase(opt(scalaxb.ElemName(None, "SWDensity")) ~ 
      opt(scalaxb.ElemName(None, "SWVelocity")) ~ 
      opt(scalaxb.ElemName(None, "IMF_B")) ~ 
      opt(scalaxb.ElemName(None, "Dst")) ~ 
      opt(scalaxb.ElemName(None, "AL")) ~ 
      opt(scalaxb.ElemName(None, "OutputFileType")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      models.binding.ExtraParams_calculateCube(p1.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[models.binding.ListOfDouble](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_calculateCube, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SWDensity map { scalaxb.toXML[Double](_, None, Some("SWDensity"), __scope, false) } getOrElse {Nil},
        __obj.SWVelocity map { scalaxb.toXML[Double](_, None, Some("SWVelocity"), __scope, false) } getOrElse {Nil},
        __obj.IMF_B map { scalaxb.toXML[models.binding.ListOfDouble](_, None, Some("IMF_B"), __scope, false) } getOrElse {Nil},
        __obj.Dst map { scalaxb.toXML[Double](_, None, Some("Dst"), __scope, false) } getOrElse {Nil},
        __obj.AL map { scalaxb.toXML[Double](_, None, Some("AL"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, None, Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_calculateCubeMercuryFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_calculateCubeMercury] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("extraParams_calculateCubeMercury")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_calculateCubeMercury] =
      phrase(opt(scalaxb.ElemName(None, "BD")) ~ 
      opt(scalaxb.ElemName(None, "Flux")) ~ 
      opt(scalaxb.ElemName(None, "Rss")) ~ 
      opt(scalaxb.ElemName(None, "R2")) ~ 
      opt(scalaxb.ElemName(None, "DZ")) ~ 
      opt(scalaxb.ElemName(None, "IMF_B")) ~ 
      opt(scalaxb.ElemName(None, "OutputFileType")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.ExtraParams_calculateCubeMercury(p1.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[models.binding.ListOfDouble](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_calculateCubeMercury, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BD map { scalaxb.toXML[Double](_, None, Some("BD"), __scope, false) } getOrElse {Nil},
        __obj.Flux map { scalaxb.toXML[Double](_, None, Some("Flux"), __scope, false) } getOrElse {Nil},
        __obj.Rss map { scalaxb.toXML[Double](_, None, Some("Rss"), __scope, false) } getOrElse {Nil},
        __obj.R2 map { scalaxb.toXML[Double](_, None, Some("R2"), __scope, false) } getOrElse {Nil},
        __obj.DZ map { scalaxb.toXML[Double](_, None, Some("DZ"), __scope, false) } getOrElse {Nil},
        __obj.IMF_B map { scalaxb.toXML[models.binding.ListOfDouble](_, None, Some("IMF_B"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, None, Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_calculateCubeSaturnFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_calculateCubeSaturn] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("extraParams_calculateCubeSaturn")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_calculateCubeSaturn] =
      phrase(opt(scalaxb.ElemName(None, "BDC")) ~ 
      opt(scalaxb.ElemName(None, "BT")) ~ 
      opt(scalaxb.ElemName(None, "RD2")) ~ 
      opt(scalaxb.ElemName(None, "RD1")) ~ 
      opt(scalaxb.ElemName(None, "R2")) ~ 
      opt(scalaxb.ElemName(None, "Rss")) ~ 
      opt(scalaxb.ElemName(None, "IMF_B")) ~ 
      opt(scalaxb.ElemName(None, "OutputFileType")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      models.binding.ExtraParams_calculateCubeSaturn(p1.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.ListOfDouble](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_calculateCubeSaturn, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BDC map { scalaxb.toXML[Double](_, None, Some("BDC"), __scope, false) } getOrElse {Nil},
        __obj.BT map { scalaxb.toXML[Double](_, None, Some("BT"), __scope, false) } getOrElse {Nil},
        __obj.RD2 map { scalaxb.toXML[Double](_, None, Some("RD2"), __scope, false) } getOrElse {Nil},
        __obj.RD1 map { scalaxb.toXML[Double](_, None, Some("RD1"), __scope, false) } getOrElse {Nil},
        __obj.R2 map { scalaxb.toXML[Double](_, None, Some("R2"), __scope, false) } getOrElse {Nil},
        __obj.Rss map { scalaxb.toXML[Double](_, None, Some("Rss"), __scope, false) } getOrElse {Nil},
        __obj.IMF_B map { scalaxb.toXML[models.binding.ListOfDouble](_, None, Some("IMF_B"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, None, Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingExtraParams_calculateCubeJupiterFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_calculateCubeJupiter] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("extraParams_calculateCubeJupiter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_calculateCubeJupiter] =
      phrase(opt(scalaxb.ElemName(None, "BDC")) ~ 
      opt(scalaxb.ElemName(None, "BT")) ~ 
      opt(scalaxb.ElemName(None, "RD2")) ~ 
      opt(scalaxb.ElemName(None, "RD1")) ~ 
      opt(scalaxb.ElemName(None, "R2")) ~ 
      opt(scalaxb.ElemName(None, "Rss")) ~ 
      opt(scalaxb.ElemName(None, "IMF_B")) ~ 
      opt(scalaxb.ElemName(None, "OutputFileType")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      models.binding.ExtraParams_calculateCubeJupiter(p1.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.ListOfDouble](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_calculateCubeJupiter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BDC map { scalaxb.toXML[Double](_, None, Some("BDC"), __scope, false) } getOrElse {Nil},
        __obj.BT map { scalaxb.toXML[Double](_, None, Some("BT"), __scope, false) } getOrElse {Nil},
        __obj.RD2 map { scalaxb.toXML[Double](_, None, Some("RD2"), __scope, false) } getOrElse {Nil},
        __obj.RD1 map { scalaxb.toXML[Double](_, None, Some("RD1"), __scope, false) } getOrElse {Nil},
        __obj.R2 map { scalaxb.toXML[Double](_, None, Some("R2"), __scope, false) } getOrElse {Nil},
        __obj.Rss map { scalaxb.toXML[Double](_, None, Some("Rss"), __scope, false) } getOrElse {Nil},
        __obj.IMF_B map { scalaxb.toXML[models.binding.ListOfDouble](_, None, Some("IMF_B"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, None, Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }
  
  trait DefaultBindingExtraParams_getSurfaceSINPFormat extends scalaxb.ElemNameParser[models.binding.ExtraParams_getSurfaceSINP] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("extraParams_getSurface")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ExtraParams_getSurfaceSINP] =
      phrase(opt(scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "Resolution")) ~ 
      opt(scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "OutputFileType")) ^^
      { case p1 ~ p2 =>
      models.binding.ExtraParams_getSurfaceSINP(p1.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.OutputFormatType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ExtraParams_getSurfaceSINP, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Resolution map { scalaxb.toXML[Double](_, Some("http://smdc.sinp.msu.ru"), Some("Resolution"), __scope, false) } getOrElse {Nil},
        __obj.OutputFileType map { scalaxb.toXML[models.binding.OutputFormatType](_, Some("http://smdc.sinp.msu.ru"), Some("OutputFileType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingEmptyElementFormat extends scalaxb.XMLFormat[models.binding.EmptyElement] with scalaxb.CanWriteChildNodes[models.binding.EmptyElement] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EmptyElement] = seq match {
      case node: scala.xml.Node => Right(models.binding.EmptyElement())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: models.binding.EmptyElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultBindingDataPointValueSINPFormat extends scalaxb.ElemNameParser[models.binding.DataPointValueSINP] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("DataPointValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataPointValueSINP] =
      phrase((scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "Variable")) ~ 
      scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "url_XYZ") ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.DataPointValueSINP(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getDataPointValueSINP](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DataPointValueSINP, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://smdc.sinp.msu.ru"), Some("ResourceID"), __scope, false),
        __obj.Variable map { scalaxb.toXML[Seq[String]](_, Some("http://smdc.sinp.msu.ru"), Some("Variable"), __scope, false) } getOrElse {Nil},
        __obj.url_XYZ map { scalaxb.toXML[java.net.URI](_, Some("http://smdc.sinp.msu.ru"), Some("url_XYZ"), __scope, false) } getOrElse {Nil},
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getDataPointValueSINP](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingCalculateDataPointValueFixedTimeFormat extends scalaxb.ElemNameParser[models.binding.CalculateDataPointValueFixedTime] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("calculateDataPointValueFixedTime")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CalculateDataPointValueFixedTime] =
      phrase((scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "StartTime")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "url_XYZ")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.CalculateDataPointValueFixedTime(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[models.binding.ExtraParams_calculateDataPointValueFixedTime](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[java.net.URI](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.CalculateDataPointValueFixedTime, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://smdc.sinp.msu.ru"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartTime, Some("http://smdc.sinp.msu.ru"), Some("StartTime"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_calculateDataPointValueFixedTime](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[java.net.URI](__obj.url_XYZ, Some("http://smdc.sinp.msu.ru"), Some("url_XYZ"), __scope, false))

  }

  trait DefaultBindingCalculateDataPointValueFormat extends scalaxb.ElemNameParser[models.binding.CalculateDataPointValue] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("calculateDataPointValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CalculateDataPointValue] =
      phrase((scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "url_XYZ")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.CalculateDataPointValue(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[models.binding.ExtraParams_calculateDataPointValue](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[java.net.URI](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.CalculateDataPointValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://smdc.sinp.msu.ru"), Some("ResourceID"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_calculateDataPointValue](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[java.net.URI](__obj.url_XYZ, Some("http://smdc.sinp.msu.ru"), Some("url_XYZ"), __scope, false))

  }

  trait DefaultBindingCalculateDataPointValueMercuryFormat extends scalaxb.ElemNameParser[models.binding.CalculateDataPointValueMercury] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("calculateDataPointValueMercury")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CalculateDataPointValueMercury] =
      phrase((scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "url_XYZ")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.CalculateDataPointValueMercury(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[models.binding.ExtraParams_calculateDataPointValueMercury](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[java.net.URI](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.CalculateDataPointValueMercury, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://smdc.sinp.msu.ru"), Some("ResourceID"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_calculateDataPointValueMercury](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[java.net.URI](__obj.url_XYZ, Some("http://smdc.sinp.msu.ru"), Some("url_XYZ"), __scope, false))

  }

  trait DefaultBindingCalculateDataPointValueSaturnFormat extends scalaxb.ElemNameParser[models.binding.CalculateDataPointValueSaturn] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("calculateDataPointValueSaturn")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CalculateDataPointValueSaturn] =
      phrase((scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "url_XYZ")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.CalculateDataPointValueSaturn(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[models.binding.ExtraParams_calculateDataPointValueSaturn](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[java.net.URI](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.CalculateDataPointValueSaturn, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://smdc.sinp.msu.ru"), Some("ResourceID"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_calculateDataPointValueSaturn](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[java.net.URI](__obj.url_XYZ, Some("http://smdc.sinp.msu.ru"), Some("url_XYZ"), __scope, false))

  }

  trait DefaultBindingCalculateDataPointValueJupiterFormat extends scalaxb.ElemNameParser[models.binding.CalculateDataPointValueJupiter] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("calculateDataPointValueJupiter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CalculateDataPointValueJupiter] =
      phrase((scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "url_XYZ")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.CalculateDataPointValueJupiter(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[models.binding.ExtraParams_calculateDataPointValueJupiter](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[java.net.URI](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.CalculateDataPointValueJupiter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://smdc.sinp.msu.ru"), Some("ResourceID"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_calculateDataPointValueJupiter](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[java.net.URI](__obj.url_XYZ, Some("http://smdc.sinp.msu.ru"), Some("url_XYZ"), __scope, false))

  }

  trait DefaultBindingCalculateDataPointValueSpacecraftFormat extends scalaxb.ElemNameParser[models.binding.CalculateDataPointValueSpacecraft] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("calculateDataPointValueSpacecraft")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CalculateDataPointValueSpacecraft] =
      phrase((scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "Spacecraft_name")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "StartTime")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "StopTime")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "Sampling")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      models.binding.CalculateDataPointValueSpacecraft(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.SpacecraftTypeSINP](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.Duration](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[models.binding.ExtraParams_calculateDataPointValueSpacecraft](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.CalculateDataPointValueSpacecraft, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://smdc.sinp.msu.ru"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.SpacecraftTypeSINP](__obj.Spacecraft_name, Some("http://smdc.sinp.msu.ru"), Some("Spacecraft_name"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartTime, Some("http://smdc.sinp.msu.ru"), Some("StartTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StopTime, Some("http://smdc.sinp.msu.ru"), Some("StopTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.Duration](__obj.Sampling, Some("http://smdc.sinp.msu.ru"), Some("Sampling"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_calculateDataPointValueSpacecraft](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingCalculateFieldLineFormat extends scalaxb.ElemNameParser[models.binding.CalculateFieldLine] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("calculateFieldLine")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CalculateFieldLine] =
      phrase((scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "StartTime")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "url_XYZ")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.CalculateFieldLine(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[models.binding.ExtraParams_calculateFieldLine](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[java.net.URI](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.CalculateFieldLine, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://smdc.sinp.msu.ru"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartTime, Some("http://smdc.sinp.msu.ru"), Some("StartTime"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_calculateFieldLine](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[java.net.URI](__obj.url_XYZ, Some("http://smdc.sinp.msu.ru"), Some("url_XYZ"), __scope, false))

  }

  trait DefaultBindingCalculateCubeFormat extends scalaxb.ElemNameParser[models.binding.CalculateCube] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("calculateCube")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CalculateCube] =
      phrase((scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "StartTime")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ~ 
      opt(any(_ => true)) ~ 
      opt(scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "cube_size_array")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.CalculateCube(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[models.binding.ExtraParams_calculateCube](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[models.binding.Cube_size_array](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.CalculateCube, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://smdc.sinp.msu.ru"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartTime, Some("http://smdc.sinp.msu.ru"), Some("StartTime"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_calculateCube](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil},
        __obj.Sampling map { scalaxb.toXML[Double](_, None, Some("Sampling"), __scope, false) } getOrElse {Nil},
        __obj.cube_size_array map { scalaxb.toXML[models.binding.Cube_size_array](_, Some("http://smdc.sinp.msu.ru"), Some("cube_size_array"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingCalculateCubeMercuryFormat extends scalaxb.ElemNameParser[models.binding.CalculateCubeMercury] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("calculateCubeMercury")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CalculateCubeMercury] =
      phrase((scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 =>
      models.binding.CalculateCubeMercury(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[models.binding.ExtraParams_calculateCubeMercury](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.CalculateCubeMercury, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://smdc.sinp.msu.ru"), Some("ResourceID"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_calculateCubeMercury](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingCalculateCubeSaturnFormat extends scalaxb.ElemNameParser[models.binding.CalculateCubeSaturn] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("calculateCubeSaturn")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CalculateCubeSaturn] =
      phrase((scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "StartTime")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ~
      opt(scalaxb.ElemName(None, "Sampling")) ~ 
      opt(scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "cube_size_array")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.CalculateCubeSaturn(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[models.binding.ExtraParams_calculateCubeSaturn](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Cube_size_array](_, scalaxb.ElemName(node) :: stack) }) })
      
    def writesChildNodes(__obj: models.binding.CalculateCubeSaturn, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://smdc.sinp.msu.ru"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartTime, Some("http://smdc.sinp.msu.ru"), Some("StartTime"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_calculateCubeSaturn](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil},
        __obj.Sampling map { scalaxb.toXML[Double](_, None, Some("Sampling"), __scope, false) } getOrElse {Nil},
        __obj.cube_size_array map { scalaxb.toXML[models.binding.Cube_size_array](_, Some("http://smdc.sinp.msu.ru"), Some("cube_size_array"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingCalculateCubeJupiterFormat extends scalaxb.ElemNameParser[models.binding.CalculateCubeJupiter] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("calculateCubeJupiter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CalculateCubeJupiter] =
      phrase((scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 =>
      models.binding.CalculateCubeJupiter(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[models.binding.ExtraParams_calculateCubeJupiter](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.CalculateCubeJupiter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://smdc.sinp.msu.ru"), Some("ResourceID"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_calculateCubeJupiter](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }
  
  trait DefaultBindingSurfaceSINPFormat extends scalaxb.ElemNameParser[models.binding.SurfaceSINP] {
    val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    
    override def typeName: Option[String] = Some("Surface")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SurfaceSINP] =
      phrase((scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "Variable")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "PlaneNormalVector")) ~ 
      (scalaxb.ElemName(Some("http://smdc.sinp.msu.ru"), "PlanePoint")) ~ 
      opt(scalaxb.ElemName(None, "extraParams")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.SurfaceSINP(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Seq[Float]](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Seq[Float]](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[models.binding.ExtraParams_getSurfaceSINP](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SurfaceSINP, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://smdc.sinp.msu.ru"), Some("ResourceID"), __scope, false),
        __obj.Variable map { scalaxb.toXML[Seq[String]](_, Some("http://smdc.sinp.msu.ru"), Some("Variable"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Seq[Float]](__obj.PlaneNormalVector, Some("http://smdc.sinp.msu.ru"), Some("PlaneNormalVector"), __scope, false),
        scalaxb.toXML[Seq[Float]](__obj.PlanePoint, Some("http://smdc.sinp.msu.ru"), Some("PlanePoint"), __scope, false),
        __obj.extraParams map { scalaxb.toXML[models.binding.ExtraParams_getSurfaceSINP](_, None, Some("extraParams"), __scope, false) } getOrElse {Nil})

  }


  trait Methods_SINPSoapBindings { this: scalaxb.Soap11Clients =>
    lazy val targetNamespace: Option[String] = Some("http://smdc.sinp.msu.ru")
    lazy val service: models.binding.Methods_SINP = new Methods_SINPSoapBinding {}
    def baseAddress = new java.net.URI("http://smdc.sinp.msu.ru/impex/SINPWebServiceServer.php")

    trait Methods_SINPSoapBinding extends models.binding.Methods_SINP {
      def getDataPointValue(resourceID: String, variable: Option[Seq[String]], url_XYZ: Option[java.net.URI], extraParams: Option[models.binding.ExtraParams_getDataPointValueSINP]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.DataPointValueSINP(resourceID, variable, url_XYZ, extraParams), Some("http://smdc.sinp.msu.ru"), "getDataPointValue", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("DataPointValue"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def calculateDataPointValueFixedTime(resourceID: String, startTime: javax.xml.datatype.XMLGregorianCalendar, extraParams: Option[models.binding.ExtraParams_calculateDataPointValueFixedTime], url_XYZ: java.net.URI): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.CalculateDataPointValueFixedTime(resourceID, startTime, extraParams, url_XYZ), Some("http://smdc.sinp.msu.ru"), "calculateDataPointValueFixedTime", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("calculateDataPointValueFixedTime"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def calculateDataPointValue(resourceID: String, extraParams: Option[models.binding.ExtraParams_calculateDataPointValue], url_XYZ: java.net.URI): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.CalculateDataPointValue(resourceID, extraParams, url_XYZ), Some("http://smdc.sinp.msu.ru"), "calculateDataPointValue", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("calculateDataPointValue"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope,false, body.toSeq: _*)))
        }
      def calculateDataPointValueSaturn(resourceID: String, extraParams: Option[models.binding.ExtraParams_calculateDataPointValueSaturn], url_XYZ: java.net.URI): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.CalculateDataPointValueSaturn(resourceID, extraParams, url_XYZ), Some("http://smdc.sinp.msu.ru"), "calculateDataPointValueSaturn", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("calculateDataPointValueSaturn"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def calculateDataPointValueMercury(resourceID: String, extraParams: Option[models.binding.ExtraParams_calculateDataPointValueMercury], url_XYZ: java.net.URI): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.CalculateDataPointValueMercury(resourceID, extraParams, url_XYZ), Some("http://smdc.sinp.msu.ru"), "calculateDataPointValueMercury", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("calculateDataPointValueMercury"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def calculateDataPointValueJupiter(resourceID: String, extraParams: Option[models.binding.ExtraParams_calculateDataPointValueJupiter], url_XYZ: java.net.URI): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.CalculateDataPointValueJupiter(resourceID, extraParams, url_XYZ), Some("http://smdc.sinp.msu.ru"), "calculateDataPointValueJupiter", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("calculateDataPointValueJupiter"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def calculateDataPointValueSpacecraft(resourceID: String, spacecraft_name: models.binding.SpacecraftTypeSINP, startTime: javax.xml.datatype.XMLGregorianCalendar, stopTime: javax.xml.datatype.XMLGregorianCalendar, sampling: javax.xml.datatype.Duration, extraParams: Option[models.binding.ExtraParams_calculateDataPointValueSpacecraft]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.CalculateDataPointValueSpacecraft(resourceID, spacecraft_name, startTime, stopTime, sampling, extraParams), Some("http://smdc.sinp.msu.ru"), "calculateDataPointValueSpacecraft", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("calculateDataPointValueSpacecraft"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def calculateFieldLine(resourceID: String, startTime: javax.xml.datatype.XMLGregorianCalendar, extraParams: Option[models.binding.ExtraParams_calculateFieldLine], url_XYZ: java.net.URI): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.CalculateFieldLine(resourceID, startTime, extraParams, url_XYZ), Some("http://smdc.sinp.msu.ru"), "calculateFieldLine", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("calculateFieldLine"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def calculateCube(resourceID: String, startTime: javax.xml.datatype.XMLGregorianCalendar, extraParams: Option[models.binding.ExtraParams_calculateCube], sampling: Option[Double], cube_size_array: Option[models.binding.Cube_size_array]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.CalculateCube(resourceID, startTime, extraParams, sampling, cube_size_array), Some("http://smdc.sinp.msu.ru"), "calculateCube", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("calculateCube"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
      def calculateCubeMercury(resourceID: String, extraParams: Option[models.binding.ExtraParams_calculateCubeMercury]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.CalculateCubeMercury(resourceID, extraParams), Some("http://smdc.sinp.msu.ru"), "calculateCubeMercury", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("calculateCubeMercury"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
     def calculateCubeSaturn(resourceID: String, startTime: javax.xml.datatype.XMLGregorianCalendar, extraParams: Option[models.binding.ExtraParams_calculateCubeSaturn], sampling: Option[Double], cube_size_array: Option[Cube_size_array]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.CalculateCubeSaturn(resourceID, startTime, extraParams, sampling, cube_size_array), Some("http://smdc.sinp.msu.ru"), "calculateCubeSaturn", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("calculateCubeSaturn"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
     def getSurface(resourceID: String, variable: Option[Seq[String]], planeNormalVector: Seq[Float], planePoint: Seq[Float], extraParams: Option[models.binding.ExtraParams_getSurfaceSINP]): Either[scalaxb.Soap11Fault[Any], java.net.URI] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.SurfaceSINP(resourceID, variable, planeNormalVector, planePoint, extraParams), Some("http://smdc.sinp.msu.ru"), "getSurface", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("Surface"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[java.net.URI](scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, false, body.toSeq: _*)))
        }
     def isAlive(): Either[scalaxb.Soap11Fault[Any], Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.EmptyElement(), Some("http://smdc.sinp.msu.ru"), "emptyElement", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("Alive"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[Boolean](body.headOption getOrElse {body}))
        }
    }
  }

  trait DefaultBindingIdoptFormat extends scalaxb.AttributeGroupFormat[models.binding.Idopt] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/XML/1998/namespace")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Idopt] = seq match {
      case node: scala.xml.Node => Right(models.binding.Idopt((node \ "@{http://www.w3.org/XML/1998/namespace}id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def toAttribute(__obj: models.binding.Idopt, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = __attr
      __obj.id foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", x.toString, attr) }
      attr
    }
  }

  trait DefaultBindingIdFormat extends scalaxb.AttributeGroupFormat[models.binding.Id] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/XML/1998/namespace")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Id] = seq match {
      case node: scala.xml.Node => Right(models.binding.Id(scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def toAttribute(__obj: models.binding.Id, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = __attr
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }
  }

  trait DefaultBindingDataRootFormat extends scalaxb.ElemNameParser[models.binding.DataRoot] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataRoot] =
      phrase(rep(scalaxb.ElemName(None, "dataCenter")) ^^
      { case p1 =>
      models.binding.DataRoot(p1.toSeq map { scalaxb.fromXML[models.binding.DataCenter](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://www.w3.org/XML/1998/namespace}id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.DataRoot, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.id foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.DataRoot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.dataCenter flatMap { scalaxb.toXML[models.binding.DataCenter](_, None, Some("dataCenter"), __scope, false) })

  }

  trait DefaultBindingDataCenterFormat extends scalaxb.ElemNameParser[models.binding.DataCenter] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataCenter] =
      phrase(rep((((scalaxb.ElemName(None, "dataset")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Dataset](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "mission")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Mission](x, scalaxb.ElemName(node) :: stack))))) ||| 
      ((scalaxb.ElemName(None, "simulationModel")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SimulationModelType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      models.binding.DataCenter(p1.toSeq,
        (node \ "@available").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@desc"), scalaxb.ElemName(node) :: stack),
        (node \ "@group").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id1").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@isSimulation").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.DataCenter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.available foreach { x => attr = scala.xml.Attribute(null, "available", x.toString, attr) }
      attr = scala.xml.Attribute(null, "desc", __obj.desc.toString, attr)
      __obj.group foreach { x => attr = scala.xml.Attribute(null, "group", x.toString, attr) }
      __obj.id1 foreach { x => attr = scala.xml.Attribute(null, "id1", x.toString, attr) }
      __obj.isSimulation foreach { x => attr = scala.xml.Attribute(null, "isSimulation", x.toString, attr) }
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.DataCenter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.datacenteroption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.DataCenterOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultBindingMissionFormat extends scalaxb.ElemNameParser[models.binding.Mission] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Mission] =
      phrase(rep(((scalaxb.ElemName(None, "instrument")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InstrumentType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "observatory")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.ObservatoryType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "group")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.GroupType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "simulationModel")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SimulationModelType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      models.binding.Mission(p1.toSeq,
        (node \ "@att").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@available").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@desc"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        (node \ "@rank").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@target").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@targets").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.Mission, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.att foreach { x => attr = scala.xml.Attribute(null, "att", x.toString, attr) }
      __obj.available foreach { x => attr = scala.xml.Attribute(null, "available", x.toString, attr) }
      attr = scala.xml.Attribute(null, "desc", __obj.desc.toString, attr)
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      __obj.rank foreach { x => attr = scala.xml.Attribute(null, "rank", x.toString, attr) }
      __obj.target foreach { x => attr = scala.xml.Attribute(null, "target", x.toString, attr) }
      __obj.targets foreach { x => attr = scala.xml.Attribute(null, "targets", x.toString, attr) }
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Mission, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.missionoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.MissionOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultBindingObservatoryTypeFormat extends scalaxb.ElemNameParser[models.binding.ObservatoryType] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ObservatoryType] =
      phrase(rep(scalaxb.ElemName(None, "instrument")) ^^
      { case p1 =>
      models.binding.ObservatoryType(p1.toSeq map { scalaxb.fromXML[models.binding.InstrumentType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@att"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@desc"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@restricted"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.ObservatoryType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "att", __obj.att.toString, attr)
      attr = scala.xml.Attribute(null, "desc", __obj.desc.toString, attr)
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(null, "restricted", __obj.restricted.toString, attr)
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.ObservatoryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.instrument flatMap { scalaxb.toXML[models.binding.InstrumentType](_, None, Some("instrument"), __scope, false) })

  }

  trait DefaultBindingGroupTypeFormat extends scalaxb.ElemNameParser[models.binding.GroupType] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GroupType] =
      phrase(rep(scalaxb.ElemName(None, "instrument")) ^^
      { case p1 =>
      models.binding.GroupType(p1.toSeq map { scalaxb.fromXML[models.binding.InstrumentType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@att"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@desc"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@restricted"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.GroupType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "att", __obj.att.toString, attr)
      attr = scala.xml.Attribute(null, "desc", __obj.desc.toString, attr)
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(null, "restricted", __obj.restricted.toString, attr)
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.instrument flatMap { scalaxb.toXML[models.binding.InstrumentType](_, None, Some("instrument"), __scope, false) })

  }

  trait DefaultBindingInstrumentTypeFormat extends scalaxb.ElemNameParser[models.binding.InstrumentType] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InstrumentType] =
      phrase(rep(scalaxb.ElemName(None, "dataset")) ^^
      { case p1 =>
      models.binding.InstrumentType(p1.toSeq map { scalaxb.fromXML[models.binding.Dataset](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@att").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@desc"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        (node \ "@restricted").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.InstrumentType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.att foreach { x => attr = scala.xml.Attribute(null, "att", x.toString, attr) }
      attr = scala.xml.Attribute(null, "desc", __obj.desc.toString, attr)
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      __obj.restricted foreach { x => attr = scala.xml.Attribute(null, "restricted", x.toString, attr) }
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.InstrumentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.dataset flatMap { scalaxb.toXML[models.binding.Dataset](_, None, Some("dataset"), __scope, false) })

  }

  trait DefaultBindingSimulationModelTypeFormat extends scalaxb.ElemNameParser[models.binding.SimulationModelType] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SimulationModelType] =
      phrase(rep(((scalaxb.ElemName(None, "instrument")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InstrumentType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "runID")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.RunID](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "parameter")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.ParameterType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      models.binding.SimulationModelType(p1.toSeq,
        (node \ "@att").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@desc"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        (node \ "@restricted").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.SimulationModelType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.att foreach { x => attr = scala.xml.Attribute(null, "att", x.toString, attr) }
      attr = scala.xml.Attribute(null, "desc", __obj.desc.toString, attr)
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      __obj.restricted foreach { x => attr = scala.xml.Attribute(null, "restricted", x.toString, attr) }
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.SimulationModelType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.simulationmodeloption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.SimulationModelOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultBindingRunIDFormat extends scalaxb.ElemNameParser[models.binding.RunID] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.RunID] =
      phrase(rep(((scalaxb.ElemName(None, "measurementType")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.MeasurementType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "dataset")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Dataset](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      models.binding.RunID(p1.toSeq,
        scala.collection.immutable.ListMap(List(
        (node \ "@FieldValue_Bx").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@FieldValue_Bx" -> _ },
        (node \ "@FieldValue_By").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@FieldValue_By" -> _ },
        (node \ "@FieldValue_Bz").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@FieldValue_Bz" -> _ },
        (node \ "@GridCellSize_X").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@GridCellSize_X" -> _ },
        (node \ "@GridCellSize_Y").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@GridCellSize_Y" -> _ },
        (node \ "@GridCellSize_Z").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@GridCellSize_Z" -> _ },
        (node \ "@LikelihoodRating").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@LikelihoodRating" -> _ },
        (node \ "@ReleaseDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@ReleaseDate" -> _ },
        (node \ "@SimulationType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@SimulationType" -> _ },
        (node \ "@SolarUVFlux").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@SolarUVFlux" -> _ },
        (node \ "@Solar_Wind_H-Density").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_H-Density" -> _ },
        (node \ "@Solar_Wind_H-FlowSpeed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_H-FlowSpeed" -> _ },
        (node \ "@Solar_Wind_H-Temperature").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_H-Temperature" -> _ },
        (node \ "@Solar_Wind_He-Density").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_He-Density" -> _ },
        (node \ "@Solar_Wind_He-FlowSpeed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_He-FlowSpeed" -> _ },
        (node \ "@Solar_Wind_He-Temperature").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_He-Temperature" -> _ },
        (node \ "@Solar_Wind_electrons-Density").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_electrons-Density" -> _ },
        (node \ "@Solar_Wind_electrons-FlowSpeed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_electrons-FlowSpeed" -> _ },
        (node \ "@Solar_Wind_electrons-Temperature").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Solar_Wind_electrons-Temperature" -> _ },
        (node \ "@TemporalDependence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@TemporalDependence" -> _ },
        (node \ "@desc").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@desc" -> _ },
        (node \ "@isDeletable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@isDeletable" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@{http://www.w3.org/XML/1998/namespace}id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: models.binding.RunID, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@FieldValue_Bx", _) => __obj.FieldValue_Bx foreach { x => attr = scala.xml.Attribute(null, "FieldValue_Bx", x.toString, attr) }
        case ("@FieldValue_By", _) => __obj.FieldValue_By foreach { x => attr = scala.xml.Attribute(null, "FieldValue_By", x.toString, attr) }
        case ("@FieldValue_Bz", _) => __obj.FieldValue_Bz foreach { x => attr = scala.xml.Attribute(null, "FieldValue_Bz", x.toString, attr) }
        case ("@GridCellSize_X", _) => __obj.GridCellSize_X foreach { x => attr = scala.xml.Attribute(null, "GridCellSize_X", x.toString, attr) }
        case ("@GridCellSize_Y", _) => __obj.GridCellSize_Y foreach { x => attr = scala.xml.Attribute(null, "GridCellSize_Y", x.toString, attr) }
        case ("@GridCellSize_Z", _) => __obj.GridCellSize_Z foreach { x => attr = scala.xml.Attribute(null, "GridCellSize_Z", x.toString, attr) }
        case ("@LikelihoodRating", _) => attr = scala.xml.Attribute(null, "LikelihoodRating", __obj.LikelihoodRating.toString, attr)
        case ("@ReleaseDate", _) => attr = scala.xml.Attribute(null, "ReleaseDate", __obj.ReleaseDate.toString, attr)
        case ("@SimulationType", _) => attr = scala.xml.Attribute(null, "SimulationType", __obj.SimulationType.toString, attr)
        case ("@SolarUVFlux", _) => __obj.SolarUVFlux foreach { x => attr = scala.xml.Attribute(null, "SolarUVFlux", x.toString, attr) }
        case ("@Solar_Wind_H-Density", _) => __obj.Solar_Wind_Hu45Density foreach { x => attr = scala.xml.Attribute(null, "Solar_Wind_H-Density", x.toString, attr) }
        case ("@Solar_Wind_H-FlowSpeed", _) => __obj.Solar_Wind_Hu45FlowSpeed foreach { x => attr = scala.xml.Attribute(null, "Solar_Wind_H-FlowSpeed", x.toString, attr) }
        case ("@Solar_Wind_H-Temperature", _) => __obj.Solar_Wind_Hu45Temperature foreach { x => attr = scala.xml.Attribute(null, "Solar_Wind_H-Temperature", x.toString, attr) }
        case ("@Solar_Wind_He-Density", _) => __obj.Solar_Wind_Heu45Density foreach { x => attr = scala.xml.Attribute(null, "Solar_Wind_He-Density", x.toString, attr) }
        case ("@Solar_Wind_He-FlowSpeed", _) => __obj.Solar_Wind_Heu45FlowSpeed foreach { x => attr = scala.xml.Attribute(null, "Solar_Wind_He-FlowSpeed", x.toString, attr) }
        case ("@Solar_Wind_He-Temperature", _) => __obj.Solar_Wind_Heu45Temperature foreach { x => attr = scala.xml.Attribute(null, "Solar_Wind_He-Temperature", x.toString, attr) }
        case ("@Solar_Wind_electrons-Density", _) => __obj.Solar_Wind_electronsu45Density foreach { x => attr = scala.xml.Attribute(null, "Solar_Wind_electrons-Density", x.toString, attr) }
        case ("@Solar_Wind_electrons-FlowSpeed", _) => __obj.Solar_Wind_electronsu45FlowSpeed foreach { x => attr = scala.xml.Attribute(null, "Solar_Wind_electrons-FlowSpeed", x.toString, attr) }
        case ("@Solar_Wind_electrons-Temperature", _) => __obj.Solar_Wind_electronsu45Temperature foreach { x => attr = scala.xml.Attribute(null, "Solar_Wind_electrons-Temperature", x.toString, attr) }
        case ("@TemporalDependence", _) => attr = scala.xml.Attribute(null, "TemporalDependence", __obj.TemporalDependence.toString, attr)
        case ("@desc", _) => attr = scala.xml.Attribute(null, "desc", __obj.desc.toString, attr)
        case ("@isDeletable", _) => __obj.isDeletable foreach { x => attr = scala.xml.Attribute(null, "isDeletable", x.toString, attr) }
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: models.binding.RunID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.runidoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.RunIDOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultBindingMeasurementTypeFormat extends scalaxb.ElemNameParser[models.binding.MeasurementType] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.MeasurementType] =
      phrase(rep(scalaxb.ElemName(None, "dataset")) ^^
      { case p1 =>
      models.binding.MeasurementType(p1.toSeq map { scalaxb.fromXML[models.binding.Dataset](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@desc"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.MeasurementType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "desc", __obj.desc.toString, attr)
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.MeasurementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.dataset flatMap { scalaxb.toXML[models.binding.Dataset](_, None, Some("dataset"), __scope, false) })

  }

  trait DefaultBindingDatasetFormat extends scalaxb.ElemNameParser[models.binding.Dataset] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Dataset] =
      phrase(rep(scalaxb.ElemName(None, "parameter")) ^^
      { case p1 =>
      models.binding.Dataset(p1.toSeq map { scalaxb.fromXML[models.binding.ParameterType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@AccessURL").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@SimulatedRegion").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@att").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@coordinateSystem").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@dataSource").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@dataStart").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@dataStop").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@desc").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@domainUnits").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@maxSampling").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        (node \ "@rem_id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@restricted").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@sampling").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@start").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@stop").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@target").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.Dataset, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.AccessURL foreach { x => attr = scala.xml.Attribute(null, "AccessURL", x.toString, attr) }
      __obj.SimulatedRegion foreach { x => attr = scala.xml.Attribute(null, "SimulatedRegion", x.toString, attr) }
      __obj.att foreach { x => attr = scala.xml.Attribute(null, "att", x.toString, attr) }
      __obj.coordinateSystem foreach { x => attr = scala.xml.Attribute(null, "coordinateSystem", x.toString, attr) }
      __obj.dataSource foreach { x => attr = scala.xml.Attribute(null, "dataSource", x.toString, attr) }
      __obj.dataStart foreach { x => attr = scala.xml.Attribute(null, "dataStart", x.toString, attr) }
      __obj.dataStop foreach { x => attr = scala.xml.Attribute(null, "dataStop", x.toString, attr) }
      __obj.desc foreach { x => attr = scala.xml.Attribute(null, "desc", x.toString, attr) }
      __obj.domainUnits foreach { x => attr = scala.xml.Attribute(null, "domainUnits", x.toString, attr) }
      __obj.maxSampling foreach { x => attr = scala.xml.Attribute(null, "maxSampling", x.toString, attr) }
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      __obj.rem_id foreach { x => attr = scala.xml.Attribute(null, "rem_id", x.toString, attr) }
      __obj.restricted foreach { x => attr = scala.xml.Attribute(null, "restricted", x.toString, attr) }
      __obj.sampling foreach { x => attr = scala.xml.Attribute(null, "sampling", x.toString, attr) }
      __obj.start foreach { x => attr = scala.xml.Attribute(null, "start", x.toString, attr) }
      __obj.stop foreach { x => attr = scala.xml.Attribute(null, "stop", x.toString, attr) }
      __obj.target foreach { x => attr = scala.xml.Attribute(null, "target", x.toString, attr) }
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Dataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.parameter flatMap { scalaxb.toXML[models.binding.ParameterType](_, None, Some("parameter"), __scope, false) })

  }

  trait DefaultBindingParameterTypeFormat extends scalaxb.ElemNameParser[models.binding.ParameterType] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ParameterType] =
      phrase(rep(scalaxb.ElemName(None, "component")) ^^
      { case p1 =>
      models.binding.ParameterType(p1.toSeq map { scalaxb.fromXML[models.binding.Component](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@desc").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@display_type").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@labels").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        (node \ "@needsArgs").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@parentID").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@size").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@units").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@var").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.ParameterType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.desc foreach { x => attr = scala.xml.Attribute(null, "desc", x.toString, attr) }
      __obj.display_type foreach { x => attr = scala.xml.Attribute(null, "display_type", x.toString, attr) }
      __obj.labels foreach { x => attr = scala.xml.Attribute(null, "labels", x.toString, attr) }
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      __obj.needsArgs foreach { x => attr = scala.xml.Attribute(null, "needsArgs", x.toString, attr) }
      __obj.parentID foreach { x => attr = scala.xml.Attribute(null, "parentID", x.toString, attr) }
      __obj.size foreach { x => attr = scala.xml.Attribute(null, "size", x.toString, attr) }
      __obj.units foreach { x => attr = scala.xml.Attribute(null, "units", x.toString, attr) }
      __obj.varValue foreach { x => attr = scala.xml.Attribute(null, "var", x.toString, attr) }
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.ParameterType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.component flatMap { scalaxb.toXML[models.binding.Component](_, None, Some("component"), __scope, false) })

  }

  trait DefaultBindingComponentFormat extends scalaxb.XMLFormat[models.binding.Component] with scalaxb.CanWriteChildNodes[models.binding.Component] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Component] = seq match {
      case node: scala.xml.Node => Right(models.binding.Component(scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        (node \ "@parentID").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@var").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@{http://www.w3.org/XML/1998/namespace}id"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: models.binding.Component, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      __obj.parentID foreach { x => attr = scala.xml.Attribute(null, "parentID", x.toString, attr) }
      __obj.varValue foreach { x => attr = scala.xml.Attribute(null, "var", x.toString, attr) }
      attr = scala.xml.Attribute(__scope.getPrefix("http://www.w3.org/XML/1998/namespace"), "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Component, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }
  
  
  /*trait DefaultBindingEmptyElement2Format extends scalaxb.XMLFormat[models.binding.EmptyElement2] with scalaxb.CanWriteChildNodes[models.binding.EmptyElement2] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EmptyElement2] = seq match {
      case node: scala.xml.Node => Right(models.binding.EmptyElement2())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: models.binding.EmptyElement2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }*/

  /*trait DefaultBindingEmptyAliveFormat extends scalaxb.XMLFormat[models.binding.EmptyAlive] with scalaxb.CanWriteChildNodes[models.binding.EmptyAlive] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EmptyAlive] = seq match {
      case node: scala.xml.Node => Right(models.binding.EmptyAlive())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: models.binding.EmptyAlive, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }*/

  trait DefaultBindingGetObsDataTreeResponseAMDAFormat extends scalaxb.ElemNameParser[models.binding.GetObsDataTreeResponseAMDA] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("getObsDataTreeResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetObsDataTreeResponseAMDA] =
      phrase(opt(scalaxb.ElemName(None, "success")) ~ 
      (scalaxb.ElemName(None, "WorkSpace")) ^^
      { case p1 ~ p2 =>
      models.binding.GetObsDataTreeResponseAMDA(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.WorkSpace](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.GetObsDataTreeResponseAMDA, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.success map { scalaxb.toXML[Boolean](_, None, Some("success"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[models.binding.WorkSpace](__obj.WorkSpace, None, Some("WorkSpace"), __scope, false))

  }

  /*trait DefaultBindingGetTimeTablesListTypeFormat extends scalaxb.ElemNameParser[models.binding.GetTimeTablesListType] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("getTimeTablesList")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetTimeTablesListType] =
      phrase(opt(scalaxb.ElemName(None, "userID")) ~ 
      opt(scalaxb.ElemName(None, "password")) ^^
      { case p1 ~ p2 =>
      models.binding.GetTimeTablesListType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.GetTimeTablesListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.userID map { scalaxb.toXML[String](_, None, Some("userID"), __scope, false) } getOrElse {Nil},
        __obj.password map { scalaxb.toXML[String](_, None, Some("password"), __scope, false) } getOrElse {Nil})

  }*/

  /*trait DefaultBindingGetTimeTablesListResponseTypeFormat extends scalaxb.ElemNameParser[models.binding.GetTimeTablesListResponseType] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("getTimeTablesListResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetTimeTablesListResponseType] =
      phrase(opt(scalaxb.ElemName(None, "success")) ~ 
      opt(scalaxb.ElemName(None, "TimeTablesList")) ^^
      { case p1 ~ p2 =>
      models.binding.GetTimeTablesListResponseType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.GetTimeTablesListResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.success map { scalaxb.toXML[Boolean](_, None, Some("success"), __scope, false) } getOrElse {Nil},
        __obj.TimeTablesList map { scalaxb.toXML[java.net.URI](_, None, Some("TimeTablesList"), __scope, false) } getOrElse {Nil})

  }*/

  trait DefaultBindingGetParameterListFormat extends scalaxb.ElemNameParser[models.binding.GetParameterList] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("getParameterList")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetParameterList] =
      phrase((scalaxb.ElemName(None, "userID")) ~ 
      opt(scalaxb.ElemName(None, "password")) ^^
      { case p1 ~ p2 =>
      models.binding.GetParameterList(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.GetParameterList, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.userID, None, Some("userID"), __scope, false),
        __obj.password map { scalaxb.toXML[String](_, None, Some("password"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingGetParameterListResponseFormat extends scalaxb.ElemNameParser[models.binding.GetParameterListResponse] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("getParameterListResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetParameterListResponse] =
      phrase(opt(scalaxb.ElemName(None, "success")) ~ 
      (scalaxb.ElemName(None, "ParameterList")) ^^
      { case p1 ~ p2 =>
      models.binding.GetParameterListResponse(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.ParameterList](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.GetParameterListResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.success map { scalaxb.toXML[Boolean](_, None, Some("success"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[models.binding.ParameterList](__obj.ParameterList, None, Some("ParameterList"), __scope, false))

  }

  def buildBindingEnumSpacecraftFormat = new DefaultBindingEnumSpacecraftFormat {}
  trait DefaultBindingEnumSpacecraftFormat extends scalaxb.XMLFormat[models.binding.EnumSpacecraft] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumSpacecraft] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumSpacecraft.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumSpacecraft.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumSpacecraft, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingWorkSpaceValueFormat = new DefaultBindingWorkSpaceValueFormat {}
  trait DefaultBindingWorkSpaceValueFormat extends scalaxb.XMLFormat[models.binding.WorkSpaceValue] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.WorkSpaceValue] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.WorkSpaceValue.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.WorkSpaceValue.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.WorkSpaceValue, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  /*def buildBindingEnumCoordinateSystemNameFormat = new DefaultBindingEnumCoordinateSystemNameFormat {}
  trait DefaultBindingEnumCoordinateSystemNameFormat extends scalaxb.XMLFormat[models.binding.EnumCoordinateSystemName] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumCoordinateSystemName] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumCoordinateSystemName.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumCoordinateSystemName.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumCoordinateSystemName, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }*/

  trait DefaultBindingParameterListFormat extends scalaxb.ElemNameParser[models.binding.ParameterList] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("ParameterList")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ParameterList] =
      phrase(opt(scalaxb.ElemName(None, "UserDefinedParameters")) ~ 
      opt(scalaxb.ElemName(None, "LocalDataBaseParameters")) ~ 
      opt(scalaxb.ElemName(None, "RemoteDataBaseParameters")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.ParameterList(p1.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ParameterList, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.UserDefinedParameters map { scalaxb.toXML[java.net.URI](_, None, Some("UserDefinedParameters"), __scope, false) } getOrElse {Nil},
        __obj.LocalDataBaseParameters map { scalaxb.toXML[java.net.URI](_, None, Some("LocalDataBaseParameters"), __scope, false) } getOrElse {Nil},
        __obj.RemoteDataBaseParameters map { scalaxb.toXML[java.net.URI](_, None, Some("RemoteDataBaseParameters"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingWorkSpaceFormat extends scalaxb.ElemNameParser[models.binding.WorkSpace] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("WorkSpace")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.WorkSpace] =
      phrase(opt(scalaxb.ElemName(None, "LocalDataBaseParameters")) ~ 
      opt(scalaxb.ElemName(None, "RemoteDataBaseParameters")) ^^
      { case p1 ~ p2 =>
      models.binding.WorkSpace(p1.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.WorkSpace, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.LocalDataBaseParameters map { scalaxb.toXML[java.net.URI](_, None, Some("LocalDataBaseParameters"), __scope, false) } getOrElse {Nil},
        __obj.RemoteDataBaseParameters map { scalaxb.toXML[java.net.URI](_, None, Some("RemoteDataBaseParameters"), __scope, false) } getOrElse {Nil})

  }

  /*def buildBindingOutputFormatTypeFormat = new DefaultBindingOutputFormatTypeFormat {}
  trait DefaultBindingOutputFormatTypeFormat extends scalaxb.XMLFormat[models.binding.OutputFormatType] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.OutputFormatType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.OutputFormatType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.OutputFormatType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.OutputFormatType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }*/

  /*def buildBindingTimeFormatTypeFormat = new DefaultBindingTimeFormatTypeFormat {}
  trait DefaultBindingTimeFormatTypeFormat extends scalaxb.XMLFormat[models.binding.TimeFormatType] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.TimeFormatType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.TimeFormatType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.TimeFormatType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.TimeFormatType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }*/

  /*trait DefaultBindingGetParameterTypeFormat extends scalaxb.ElemNameParser[models.binding.GetParameterType] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("getParameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetParameterType] =
      phrase((scalaxb.ElemName(None, "startTime")) ~ 
      (scalaxb.ElemName(None, "stopTime")) ~ 
      (scalaxb.ElemName(None, "parameterID")) ~ 
      opt(scalaxb.ElemName(None, "sampling")) ~ 
      opt(scalaxb.ElemName(None, "userID")) ~ 
      opt(scalaxb.ElemName(None, "password")) ~ 
      opt(scalaxb.ElemName(None, "outputFormat")) ~ 
      opt(scalaxb.ElemName(None, "timeFormat")) ~ 
      opt(scalaxb.ElemName(None, "gzip")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      models.binding.GetParameterType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.OutputFormat](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[models.binding.TimeFormat](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.GetParameterType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.startTime, None, Some("startTime"), __scope, false),
        scalaxb.toXML[String](__obj.stopTime, None, Some("stopTime"), __scope, false),
        scalaxb.toXML[String](__obj.parameterID, None, Some("parameterID"), __scope, false),
        __obj.sampling map { scalaxb.toXML[Float](_, None, Some("sampling"), __scope, false) } getOrElse {Nil},
        __obj.userID map { scalaxb.toXML[String](_, None, Some("userID"), __scope, false) } getOrElse {Nil},
        __obj.password map { scalaxb.toXML[String](_, None, Some("password"), __scope, false) } getOrElse {Nil},
        __obj.outputFormat map { scalaxb.toXML[models.binding.OutputFormat](_, None, Some("outputFormat"), __scope, false) } getOrElse {Nil},
        __obj.timeFormat map { scalaxb.toXML[models.binding.TimeFormat](_, None, Some("timeFormat"), __scope, false) } getOrElse {Nil},
        __obj.gzip map { scalaxb.toXML[BigInt](_, None, Some("gzip"), __scope, false) } getOrElse {Nil})

  }*/

  /*trait DefaultBindingGetParameterResponseTypeFormat extends scalaxb.ElemNameParser[models.binding.GetParameterResponseType] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("getParameterResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetParameterResponseType] =
      phrase(opt(scalaxb.ElemName(None, "success")) ~ 
      rep(scalaxb.ElemName(None, "dataFileURLs")) ^^
      { case p1 ~ p2 =>
      models.binding.GetParameterResponseType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.GetParameterResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.success map { scalaxb.toXML[Boolean](_, None, Some("success"), __scope, false) } getOrElse {Nil},
        __obj.dataFileURLs flatMap { scalaxb.toXML[java.net.URI](_, None, Some("dataFileURLs"), __scope, false) })

  }*/

  /*def buildBindingOutputFormatType2Format = new DefaultBindingOutputFormatType2Format {}
  trait DefaultBindingOutputFormatType2Format extends scalaxb.XMLFormat[models.binding.OutputFormatType2] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.OutputFormatType2] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.OutputFormatType2.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.OutputFormatType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.OutputFormatType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }*/

  /*def buildBindingTimeFormatType2Format = new DefaultBindingTimeFormatType2Format {}
  trait DefaultBindingTimeFormatType2Format extends scalaxb.XMLFormat[models.binding.TimeFormatType2] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.TimeFormatType2] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.TimeFormatType2.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.TimeFormatType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.TimeFormatType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }*/

  trait DefaultBindingGetDatasetFormat extends scalaxb.ElemNameParser[models.binding.GetDataset] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("getDataset")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetDataset] =
      phrase((scalaxb.ElemName(None, "startTime")) ~ 
      (scalaxb.ElemName(None, "stopTime")) ~ 
      (scalaxb.ElemName(None, "datasetID")) ~ 
      opt(scalaxb.ElemName(None, "sampling")) ~ 
      opt(scalaxb.ElemName(None, "userID")) ~ 
      opt(scalaxb.ElemName(None, "password")) ~ 
      opt(scalaxb.ElemName(None, "outputFormat")) ~ 
      opt(scalaxb.ElemName(None, "timeFormat")) ~ 
      opt(scalaxb.ElemName(None, "gzip")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      models.binding.GetDataset(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.OutputFormat](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[models.binding.TimeFormat](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.GetDataset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.startTime, None, Some("startTime"), __scope, false),
        scalaxb.toXML[String](__obj.stopTime, None, Some("stopTime"), __scope, false),
        scalaxb.toXML[String](__obj.datasetID, None, Some("datasetID"), __scope, false),
        __obj.sampling map { scalaxb.toXML[Float](_, None, Some("sampling"), __scope, false) } getOrElse {Nil},
        __obj.userID map { scalaxb.toXML[String](_, None, Some("userID"), __scope, false) } getOrElse {Nil},
        __obj.password map { scalaxb.toXML[String](_, None, Some("password"), __scope, false) } getOrElse {Nil},
        __obj.outputFormat map { scalaxb.toXML[models.binding.OutputFormat](_, None, Some("outputFormat"), __scope, false) } getOrElse {Nil},
        __obj.timeFormat map { scalaxb.toXML[models.binding.TimeFormat](_, None, Some("timeFormat"), __scope, false) } getOrElse {Nil},
        __obj.gzip map { scalaxb.toXML[BigInt](_, None, Some("gzip"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingGetDatasetResponseFormat extends scalaxb.ElemNameParser[models.binding.GetDatasetResponse] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("getDatasetResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetDatasetResponse] =
      phrase(opt(scalaxb.ElemName(None, "success")) ~ 
      rep(scalaxb.ElemName(None, "dataFileURLs")) ^^
      { case p1 ~ p2 =>
      models.binding.GetDatasetResponse(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.GetDatasetResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.success map { scalaxb.toXML[Boolean](_, None, Some("success"), __scope, false) } getOrElse {Nil},
        __obj.dataFileURLs flatMap { scalaxb.toXML[java.net.URI](_, None, Some("dataFileURLs"), __scope, false) })

  }

  def buildBindingUnitsFormat = new DefaultBindingUnitsFormat {}
  trait DefaultBindingUnitsFormat extends scalaxb.XMLFormat[models.binding.Units] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Units] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.Units.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.Units.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.Units, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  /*def buildBindingOutputFormatType3Format = new DefaultBindingOutputFormatType3Format {}
  trait DefaultBindingOutputFormatType3Format extends scalaxb.XMLFormat[models.binding.OutputFormatType3] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.OutputFormatType3] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.OutputFormatType3.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.OutputFormatType3.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.OutputFormatType3, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }*/

  /*def buildBindingTimeFormatType3Format = new DefaultBindingTimeFormatType3Format {}
  trait DefaultBindingTimeFormatType3Format extends scalaxb.XMLFormat[models.binding.TimeFormatType3] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.TimeFormatType3] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.TimeFormatType3.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.TimeFormatType3.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.TimeFormatType3, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }*/

  trait DefaultBindingGetOrbitesFormat extends scalaxb.ElemNameParser[models.binding.GetOrbites] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("getOrbites")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetOrbites] =
      phrase((scalaxb.ElemName(None, "startTime")) ~ 
      (scalaxb.ElemName(None, "stopTime")) ~ 
      (scalaxb.ElemName(None, "spacecraft")) ~ 
      (scalaxb.ElemName(None, "coordinateSystem")) ~ 
      opt(scalaxb.ElemName(None, "units")) ~ 
      opt(scalaxb.ElemName(None, "sampling")) ~ 
      opt(scalaxb.ElemName(None, "userID")) ~ 
      opt(scalaxb.ElemName(None, "password")) ~ 
      opt(scalaxb.ElemName(None, "outputFormat")) ~ 
      opt(scalaxb.ElemName(None, "timeFormat")) ~ 
      opt(scalaxb.ElemName(None, "gzip")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      models.binding.GetOrbites(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.EnumSpacecraft](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.EnumCoordinateSystemName](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[models.binding.Units](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[models.binding.OutputFormat](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[models.binding.TimeFormat](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.GetOrbites, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.startTime, None, Some("startTime"), __scope, false),
        scalaxb.toXML[String](__obj.stopTime, None, Some("stopTime"), __scope, false),
        scalaxb.toXML[models.binding.EnumSpacecraft](__obj.spacecraft, None, Some("spacecraft"), __scope, false),
        scalaxb.toXML[models.binding.EnumCoordinateSystemName](__obj.coordinateSystem, None, Some("coordinateSystem"), __scope, false),
        __obj.units map { scalaxb.toXML[models.binding.Units](_, None, Some("units"), __scope, false) } getOrElse {Nil},
        __obj.sampling map { scalaxb.toXML[Float](_, None, Some("sampling"), __scope, false) } getOrElse {Nil},
        __obj.userID map { scalaxb.toXML[String](_, None, Some("userID"), __scope, false) } getOrElse {Nil},
        __obj.password map { scalaxb.toXML[String](_, None, Some("password"), __scope, false) } getOrElse {Nil},
        __obj.outputFormat map { scalaxb.toXML[models.binding.OutputFormat](_, None, Some("outputFormat"), __scope, false) } getOrElse {Nil},
        __obj.timeFormat map { scalaxb.toXML[models.binding.TimeFormat](_, None, Some("timeFormat"), __scope, false) } getOrElse {Nil},
        __obj.gzip map { scalaxb.toXML[BigInt](_, None, Some("gzip"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingGetOrbitesResponseFormat extends scalaxb.ElemNameParser[models.binding.GetOrbitesResponse] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("getOrbitesResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetOrbitesResponse] =
      phrase(opt(scalaxb.ElemName(None, "success")) ~ 
      rep(scalaxb.ElemName(None, "dataFileURLs")) ^^
      { case p1 ~ p2 =>
      models.binding.GetOrbitesResponse(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.GetOrbitesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.success map { scalaxb.toXML[Boolean](_, None, Some("success"), __scope, false) } getOrElse {Nil},
        __obj.dataFileURLs flatMap { scalaxb.toXML[java.net.URI](_, None, Some("dataFileURLs"), __scope, false) })

  }

  /*trait DefaultBindingGetTimeTableTypeFormat extends scalaxb.ElemNameParser[models.binding.GetTimeTableType] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("getTimeTable")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetTimeTableType] =
      phrase(opt(scalaxb.ElemName(None, "userID")) ~ 
      opt(scalaxb.ElemName(None, "password")) ~ 
      (scalaxb.ElemName(None, "ttID")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.GetTimeTableType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.GetTimeTableType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.userID map { scalaxb.toXML[String](_, None, Some("userID"), __scope, false) } getOrElse {Nil},
        __obj.password map { scalaxb.toXML[String](_, None, Some("password"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.ttID, None, Some("ttID"), __scope, false))

  }*/

  /*trait DefaultBindingGetTimeTableResponseTypeFormat extends scalaxb.ElemNameParser[models.binding.GetTimeTableResponseType] {
    val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    
    override def typeName: Option[String] = Some("getTimeTableResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetTimeTableResponseType] =
      phrase(opt(scalaxb.ElemName(None, "success")) ~ 
      (scalaxb.ElemName(None, "ttFileURL")) ^^
      { case p1 ~ p2 =>
      models.binding.GetTimeTableResponseType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[java.net.URI](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.GetTimeTableResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.success map { scalaxb.toXML[Boolean](_, None, Some("success"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[java.net.URI](__obj.ttFileURL, None, Some("ttFileURL"), __scope, false))

  }*/


  trait Methods_AMDASoapBindings { this: scalaxb.Soap11Clients =>
    lazy val targetNamespace: Option[String] = Some("http://cdpp-irap/IMPEX/v0.1")
    lazy val service: models.binding.Methods_AMDA = new Methods_AMDASoapBinding {}
    def baseAddress = new java.net.URI("http://cdpp1.cesr.fr/AMDA-NG/php/AMDA_METHODS_WSDL.php")

    trait Methods_AMDASoapBinding extends models.binding.Methods_AMDA {
      def isAlive(): Either[scalaxb.Soap11Fault[Any], Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.EmptyElement(), Some("http://cdpp-irap/IMPEX/v0.1"), "emptyAlive", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI(""))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[Boolean](body.headOption getOrElse {body}))
        }
      def getObsDataTree(): Either[scalaxb.Soap11Fault[Any], models.binding.GetObsDataTreeResponseAMDA] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.EmptyElement(), Some("http://cdpp-irap/IMPEX/v0.1"), "emptyElement", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI(""))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[models.binding.GetObsDataTreeResponseAMDA](body.headOption getOrElse {body}))
        }
      def getTimeTablesList(userID: Option[String], password: Option[String]): Either[scalaxb.Soap11Fault[Any], models.binding.GetTimeTablesListResponse] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.GetTimeTablesList(userID, password), Some("http://cdpp-irap/IMPEX/v0.1"), "getTimeTablesList", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI(""))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[models.binding.GetTimeTablesListResponse](body.headOption getOrElse {body}))
        }
      def getParameterList(userID: String, password: Option[String]): Either[scalaxb.Soap11Fault[Any], models.binding.GetParameterListResponse] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.GetParameterList(userID, password), Some("http://cdpp-irap/IMPEX/v0.1"), "getParameterList", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI(""))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[models.binding.GetParameterListResponse](body.headOption getOrElse {body}))
        }
      def getParameter(startTime: String, stopTime: String, parameterID: String, sampling: Option[Float], userID: Option[String], password: Option[String], outputFormat: Option[models.binding.OutputFormat], timeFormat: Option[models.binding.TimeFormat], gzip: Option[BigInt]): Either[scalaxb.Soap11Fault[Any], models.binding.GetParameterResponse] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.GetParameter(startTime, stopTime, parameterID, sampling, userID, password, outputFormat, timeFormat, gzip), Some("http://cdpp-irap/IMPEX/v0.1"), "getParameter", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI(""))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[models.binding.GetParameterResponse](body.headOption getOrElse {body}))
        }
      def getDataset(startTime: String, stopTime: String, datasetID: String, sampling: Option[Float], userID: Option[String], password: Option[String], outputFormat: Option[models.binding.OutputFormat], timeFormat: Option[models.binding.TimeFormat], gzip: Option[BigInt]): Either[scalaxb.Soap11Fault[Any], models.binding.GetDatasetResponse] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.GetDataset(startTime, stopTime, datasetID, sampling, userID, password, outputFormat, timeFormat, gzip), Some("http://cdpp-irap/IMPEX/v0.1"), "getDataset", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI(""))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[models.binding.GetDatasetResponse](body.headOption getOrElse {body}))
        }
      def getOrbites(startTime: String, stopTime: String, spacecraft: models.binding.EnumSpacecraft, coordinateSystem: models.binding.EnumCoordinateSystemName, units: Option[models.binding.Units], sampling: Option[Float], userID: Option[String], password: Option[String], outputFormat: Option[models.binding.OutputFormat], timeFormat: Option[models.binding.TimeFormat], gzip: Option[BigInt]): Either[scalaxb.Soap11Fault[Any], models.binding.GetOrbitesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.GetOrbites(startTime, stopTime, spacecraft, coordinateSystem, units, sampling, userID, password, outputFormat, timeFormat, gzip), Some("http://cdpp-irap/IMPEX/v0.1"), "getOrbites", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI(""))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[models.binding.GetOrbitesResponse](body.headOption getOrElse {body}))
        }
      def getTimeTable(userID: Option[String], password: Option[String], ttID: String): Either[scalaxb.Soap11Fault[Any], models.binding.GetTimeTableResponse] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.GetTimeTable(userID, password, ttID), Some("http://cdpp-irap/IMPEX/v0.1"), "getTimeTable", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI(""))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[models.binding.GetTimeTableResponse](body.headOption getOrElse {body}))
        }
    }
  }


  /*trait DefaultBindingEmptyElementFormat extends scalaxb.XMLFormat[models.binding.EmptyElement] with scalaxb.CanWriteChildNodes[models.binding.EmptyElement] {
    val targetNamespace: Option[String] = Some("http://clweb.cesr.fr")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EmptyElement] = seq match {
      case node: scala.xml.Node => Right(models.binding.EmptyElement())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: models.binding.EmptyElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }*/

  trait DefaultBindingGetObsDataTreeResponseCLWEBFormat extends scalaxb.ElemNameParser[models.binding.GetObsDataTreeResponseCLWEB] {
    val targetNamespace: Option[String] = Some("http://clweb.cesr.fr")
    
    override def typeName: Option[String] = Some("getObsDataTreeResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetObsDataTreeResponseCLWEB] =
      phrase(opt(scalaxb.ElemName(None, "success")) ~ 
      (scalaxb.ElemName(None, "Tree")) ^^
      { case p1 ~ p2 =>
      models.binding.GetObsDataTreeResponseCLWEB(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[java.net.URI](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.GetObsDataTreeResponseCLWEB, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.success map { scalaxb.toXML[Boolean](_, None, Some("success"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[java.net.URI](__obj.Tree, None, Some("Tree"), __scope, false))

  }

  trait DefaultBindingGetTimeTablesListFormat extends scalaxb.ElemNameParser[models.binding.GetTimeTablesList] {
    val targetNamespace: Option[String] = Some("http://clweb.cesr.fr")
    
    override def typeName: Option[String] = Some("getTimeTablesList")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetTimeTablesList] =
      phrase(opt(scalaxb.ElemName(None, "userID")) ~ 
      opt(scalaxb.ElemName(None, "password")) ^^
      { case p1 ~ p2 =>
      models.binding.GetTimeTablesList(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.GetTimeTablesList, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.userID map { scalaxb.toXML[String](_, None, Some("userID"), __scope, false) } getOrElse {Nil},
        __obj.password map { scalaxb.toXML[String](_, None, Some("password"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingGetTimeTablesListResponseFormat extends scalaxb.ElemNameParser[models.binding.GetTimeTablesListResponse] {
    val targetNamespace: Option[String] = Some("http://clweb.cesr.fr")
    
    override def typeName: Option[String] = Some("getTimeTablesListResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetTimeTablesListResponse] =
      phrase(opt(scalaxb.ElemName(None, "success")) ~ 
      opt(scalaxb.ElemName(None, "TimeTablesList")) ^^
      { case p1 ~ p2 =>
      models.binding.GetTimeTablesListResponse(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.GetTimeTablesListResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.success map { scalaxb.toXML[Boolean](_, None, Some("success"), __scope, false) } getOrElse {Nil},
        __obj.TimeTablesList map { scalaxb.toXML[java.net.URI](_, None, Some("TimeTablesList"), __scope, false) } getOrElse {Nil})

  }

  def buildBindingOutputFormatFormat = new DefaultBindingOutputFormatFormat {}
  trait DefaultBindingOutputFormatFormat extends scalaxb.XMLFormat[models.binding.OutputFormat] {
    val targetNamespace: Option[String] = Some("http://clweb.cesr.fr")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.OutputFormat] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.OutputFormat.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.OutputFormat.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.OutputFormat, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingTimeFormatFormat = new DefaultBindingTimeFormatFormat {}
  trait DefaultBindingTimeFormatFormat extends scalaxb.XMLFormat[models.binding.TimeFormat] {
    val targetNamespace: Option[String] = Some("http://clweb.cesr.fr")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.TimeFormat] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.TimeFormat.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.TimeFormat.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.TimeFormat, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  trait DefaultBindingGetParameterFormat extends scalaxb.ElemNameParser[models.binding.GetParameter] {
    val targetNamespace: Option[String] = Some("http://clweb.cesr.fr")
    
    override def typeName: Option[String] = Some("getParameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetParameter] =
      phrase((scalaxb.ElemName(None, "startTime")) ~ 
      (scalaxb.ElemName(None, "stopTime")) ~ 
      (scalaxb.ElemName(None, "parameterID")) ~ 
      opt(scalaxb.ElemName(None, "sampling")) ~ 
      opt(scalaxb.ElemName(None, "userID")) ~ 
      opt(scalaxb.ElemName(None, "password")) ~ 
      opt(scalaxb.ElemName(None, "outputFormat")) ~ 
      opt(scalaxb.ElemName(None, "timeFormat")) ~ 
      opt(scalaxb.ElemName(None, "gzip")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      models.binding.GetParameter(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.OutputFormat](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[models.binding.TimeFormat](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.GetParameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.startTime, None, Some("startTime"), __scope, false),
        scalaxb.toXML[String](__obj.stopTime, None, Some("stopTime"), __scope, false),
        scalaxb.toXML[String](__obj.parameterID, None, Some("parameterID"), __scope, false),
        __obj.sampling map { scalaxb.toXML[Float](_, None, Some("sampling"), __scope, false) } getOrElse {Nil},
        __obj.userID map { scalaxb.toXML[String](_, None, Some("userID"), __scope, false) } getOrElse {Nil},
        __obj.password map { scalaxb.toXML[String](_, None, Some("password"), __scope, false) } getOrElse {Nil},
        __obj.outputFormat map { scalaxb.toXML[models.binding.OutputFormat](_, None, Some("outputFormat"), __scope, false) } getOrElse {Nil},
        __obj.timeFormat map { scalaxb.toXML[models.binding.TimeFormat](_, None, Some("timeFormat"), __scope, false) } getOrElse {Nil},
        __obj.gzip map { scalaxb.toXML[BigInt](_, None, Some("gzip"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingGetParameterResponseFormat extends scalaxb.ElemNameParser[models.binding.GetParameterResponse] {
    val targetNamespace: Option[String] = Some("http://clweb.cesr.fr")
    
    override def typeName: Option[String] = Some("getParameterResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetParameterResponse] =
      phrase(opt(scalaxb.ElemName(None, "success")) ~ 
      rep(scalaxb.ElemName(None, "dataFileURLs")) ^^
      { case p1 ~ p2 =>
      models.binding.GetParameterResponse(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.GetParameterResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.success map { scalaxb.toXML[Boolean](_, None, Some("success"), __scope, false) } getOrElse {Nil},
        __obj.dataFileURLs flatMap { scalaxb.toXML[java.net.URI](_, None, Some("dataFileURLs"), __scope, false) })

  }

  trait DefaultBindingGetTimeTableFormat extends scalaxb.ElemNameParser[models.binding.GetTimeTable] {
    val targetNamespace: Option[String] = Some("http://clweb.cesr.fr")
    
    override def typeName: Option[String] = Some("getTimeTable")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetTimeTable] =
      phrase(opt(scalaxb.ElemName(None, "userID")) ~ 
      opt(scalaxb.ElemName(None, "password")) ~ 
      (scalaxb.ElemName(None, "ttID")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.GetTimeTable(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.GetTimeTable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.userID map { scalaxb.toXML[String](_, None, Some("userID"), __scope, false) } getOrElse {Nil},
        __obj.password map { scalaxb.toXML[String](_, None, Some("password"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.ttID, None, Some("ttID"), __scope, false))

  }

  trait DefaultBindingGetTimeTableResponseFormat extends scalaxb.ElemNameParser[models.binding.GetTimeTableResponse] {
    val targetNamespace: Option[String] = Some("http://clweb.cesr.fr")
    
    override def typeName: Option[String] = Some("getTimeTableResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.GetTimeTableResponse] =
      phrase(opt(scalaxb.ElemName(None, "success")) ~ 
      (scalaxb.ElemName(None, "ttFileURL")) ^^
      { case p1 ~ p2 =>
      models.binding.GetTimeTableResponse(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[java.net.URI](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.GetTimeTableResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.success map { scalaxb.toXML[Boolean](_, None, Some("success"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[java.net.URI](__obj.ttFileURL, None, Some("ttFileURL"), __scope, false))

  }


  trait Methods_CLWEBSoapBindings { this: scalaxb.Soap11Clients =>
    lazy val targetNamespace: Option[String] = Some("http://clweb.cesr.fr")
    lazy val service: models.binding.Methods_CLWEB = new Methods_CLWEBSoapBinding {}
    def baseAddress = new java.net.URI("http://clweb.cesr.fr/CLWEB_METHODS_WSDL.php")

    trait Methods_CLWEBSoapBinding extends models.binding.Methods_CLWEB {
      def getObsDataTree(): Either[scalaxb.Soap11Fault[Any], models.binding.GetObsDataTreeResponseCLWEB] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.EmptyElement(), Some("http://clweb.cesr.fr"), "emptyElement", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI(""))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[models.binding.GetObsDataTreeResponseCLWEB](body.headOption getOrElse {body}))
        }
      def getTimeTablesList(userID: Option[String], password: Option[String]): Either[scalaxb.Soap11Fault[Any], models.binding.GetTimeTablesListResponse] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.GetTimeTablesList(userID, password), Some("http://clweb.cesr.fr"), "getTimeTablesList", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI(""))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[models.binding.GetTimeTablesListResponse](body.headOption getOrElse {body}))
        }
      def getParameter(startTime: String, stopTime: String, parameterID: String, sampling: Option[Float], userID: Option[String], password: Option[String], outputFormat: Option[models.binding.OutputFormat], timeFormat: Option[models.binding.TimeFormat], gzip: Option[BigInt]): Either[scalaxb.Soap11Fault[Any], models.binding.GetParameterResponse] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.GetParameter(startTime, stopTime, parameterID, sampling, userID, password, outputFormat, timeFormat, gzip), Some("http://clweb.cesr.fr"), "getParameter", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI(""))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[models.binding.GetParameterResponse](body.headOption getOrElse {body}))
        }
      def getTimeTable(userID: Option[String], password: Option[String], ttID: String): Either[scalaxb.Soap11Fault[Any], models.binding.GetTimeTableResponse] = 
        soapClient.requestResponse(scalaxb.toXML(models.binding.GetTimeTable(userID, password, ttID), Some("http://clweb.cesr.fr"), "getTimeTable", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI(""))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[models.binding.GetTimeTableResponse](body.headOption getOrElse {body}))
        }
    }
  }


  trait DefaultBindingDatabaseFormat extends scalaxb.ElemNameParser[models.binding.Database] {
    val targetNamespace: Option[String] = Some("http://www.impex.org/2012/configuration.xsd")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Database] =
      phrase((scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "description")) ~ 
      rep(((scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "ip")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "dns")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "methods")) ~ 
      rep(scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "tree")) ~ 
      rep(scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "protocol")) ~ 
      (scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "info")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.Database(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq,
        p4.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.Databasetype]((node \ "@type"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[java.net.URI]((node \ "@id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.Database, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Database, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.name, Some("http://www.impex.org/2012/configuration.xsd"), Some("name"), __scope, false),
        __obj.description map { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.databaseoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[String]](x, x.namespace, x.key, __scope, false) },
        __obj.methods flatMap { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("methods"), __scope, false) },
        __obj.tree flatMap { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("tree"), __scope, false) },
        __obj.protocol flatMap { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("protocol"), __scope, false) },
        scalaxb.toXML[String](__obj.info, Some("http://www.impex.org/2012/configuration.xsd"), Some("info"), __scope, false))

  }

  trait DefaultBindingToolFormat extends scalaxb.ElemNameParser[models.binding.Tool] {
    val targetNamespace: Option[String] = Some("http://www.impex.org/2012/configuration.xsd")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Tool] =
      phrase((scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "description")) ~ 
      (scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "url")) ~ 
      (scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "info")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.Tool(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.Tool, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.name, Some("http://www.impex.org/2012/configuration.xsd"), Some("name"), __scope, false),
        __obj.description map { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("description"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.url, Some("http://www.impex.org/2012/configuration.xsd"), Some("url"), __scope, false),
        scalaxb.toXML[String](__obj.info, Some("http://www.impex.org/2012/configuration.xsd"), Some("info"), __scope, false))

  }

  trait DefaultBindingImpexconfigurationFormat extends scalaxb.ElemNameParser[models.binding.Impexconfiguration] {
    val targetNamespace: Option[String] = Some("http://www.impex.org/2012/configuration.xsd")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Impexconfiguration] =
      phrase(rep(((scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "database")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Database](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "tool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Tool](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      models.binding.Impexconfiguration(p1.toSeq: _*) })
    
    def writesChildNodes(__obj: models.binding.Impexconfiguration, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.impexconfigurationoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.ImpexconfigurationOption]](x, x.namespace, x.key, __scope, false) })

  }

  def buildBindingDatabasetypeFormat = new DefaultBindingDatabasetypeFormat {}
  trait DefaultBindingDatabasetypeFormat extends scalaxb.XMLFormat[models.binding.Databasetype] {
    val targetNamespace: Option[String] = Some("http://www.impex.org/2012/configuration.xsd")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Databasetype] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.Databasetype.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.Databasetype.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.Databasetype, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  trait DefaultBindingSpaseFormat extends scalaxb.ElemNameParser[models.binding.Spase] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Spase")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Spase] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Version")) ~ 
      rep(((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationModel")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SimulationModel](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "NumericalOutput")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.NumericalOutput](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Service")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Service](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Registry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Registry](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Document")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Document](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Catalog")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Catalog](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationModel")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SimulationModel](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "NumericalOutput")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.NumericalOutput](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Service")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Service](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Registry")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Registry](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Document")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Document](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Catalog")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Catalog](x, scalaxb.ElemName(node) :: stack)))) | 
      ((any(_ => true) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DisplayData")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.DisplayData](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "NumericalData")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.NumericalData](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Instrument")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Instrument](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Observatory")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Observatory](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Person")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Person](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Repository")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Repository](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Annotation")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Annotation](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Granule")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Granule](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DisplayOutput")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.DisplayOutput](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationRun")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SimulationRun](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DisplayData")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.DisplayData](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "NumericalData")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.NumericalData](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Instrument")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InstrumentType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Observatory")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Observatory](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Person")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Person](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Repository")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Repository](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Annotation")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Annotation](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Granule")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Granule](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DisplayOutput")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.DisplayOutput](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationRun")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SimulationRun](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 ~ p2 =>
      models.binding.Spase(scalaxb.fromXML[models.binding.EnumVersion](p1, scalaxb.ElemName(node) :: stack),
        p2,
        (node \ "@lang").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[String](scala.xml.Text("en"), scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.Spase, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      if (__obj.lang.toString != "en") attr = scala.xml.Attribute(null, "lang", __obj.lang.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Spase, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.EnumVersion](__obj.Version, Some("http://impex-fp7.oeaw.ac.at"), Some("Version"), __scope, false),
        __obj.ResourceEntity flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultBindingCatalogFormat extends scalaxb.ElemNameParser[models.binding.Catalog] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Catalog")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Catalog] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderResourceName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderVersion")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InstrumentID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PhenomenonType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TimeSpan")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Keyword")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputResourceID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Parameter")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      models.binding.Catalog(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.AccessInformation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[models.binding.EnumPhenomenonType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[models.binding.TimeSpan](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.toSeq map { scalaxb.fromXML[models.binding.Parameter](_, scalaxb.ElemName(node) :: stack) },
        p13.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Catalog, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.AccessInformation flatMap { scalaxb.toXML[models.binding.AccessInformation](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessInformation"), __scope, false) },
        __obj.ProviderResourceName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderResourceName"), __scope, false) } getOrElse {Nil},
        __obj.ProviderVersion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderVersion"), __scope, false) } getOrElse {Nil},
        __obj.InstrumentID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InstrumentID"), __scope, false) },
        __obj.PhenomenonType flatMap { scalaxb.toXML[models.binding.EnumPhenomenonType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PhenomenonType"), __scope, false) },
        __obj.TimeSpan map { scalaxb.toXML[models.binding.TimeSpan](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TimeSpan"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Keyword flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Keyword"), __scope, false) },
        __obj.InputResourceID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputResourceID"), __scope, false) },
        __obj.Parameter flatMap { scalaxb.toXML[models.binding.Parameter](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Parameter"), __scope, false) },
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingResourceHeaderFormat extends scalaxb.ElemNameParser[models.binding.ResourceHeader] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("ResourceHeader")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ResourceHeader] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceName")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AlternateName")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ReleaseDate")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ExpirationDate")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Acknowledgement")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Contact")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InformationURL")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Association")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PriorID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      models.binding.ResourceHeader(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[models.binding.Contact](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[models.binding.InformationURL](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[models.binding.Association](_, scalaxb.ElemName(node) :: stack) },
        p10.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ResourceHeader, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceName, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceName"), __scope, false),
        __obj.AlternateName flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AlternateName"), __scope, false) },
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.ReleaseDate, Some("http://impex-fp7.oeaw.ac.at"), Some("ReleaseDate"), __scope, false),
        __obj.ExpirationDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ExpirationDate"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.Description, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false),
        __obj.Acknowledgement map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Acknowledgement"), __scope, false) } getOrElse {Nil},
        __obj.Contact flatMap { scalaxb.toXML[models.binding.Contact](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Contact"), __scope, false) },
        __obj.InformationURL flatMap { scalaxb.toXML[models.binding.InformationURL](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InformationURL"), __scope, false) },
        __obj.Association flatMap { scalaxb.toXML[models.binding.Association](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Association"), __scope, false) },
        __obj.PriorID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PriorID"), __scope, false) })

  }

  trait DefaultBindingContactFormat extends scalaxb.ElemNameParser[models.binding.Contact] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Contact")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Contact] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PersonID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Role")) ^^
      { case p1 ~ p2 =>
      models.binding.Contact(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[models.binding.EnumRole](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Contact, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.PersonID, Some("http://impex-fp7.oeaw.ac.at"), Some("PersonID"), __scope, false),
        __obj.Role flatMap { scalaxb.toXML[models.binding.EnumRole](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Role"), __scope, false) })

  }

  trait DefaultBindingInformationURLFormat extends scalaxb.ElemNameParser[models.binding.InformationURL] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("InformationURL")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InformationURL] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "URL")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Language")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.InformationURL(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.InformationURL, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Name map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.URL, Some("http://impex-fp7.oeaw.ac.at"), Some("URL"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Language map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Language"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingAssociationFormat extends scalaxb.ElemNameParser[models.binding.Association] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Association")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Association] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AssociationID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AssociationType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Note")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.Association(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.EnumAssociationType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Association, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.AssociationID, Some("http://impex-fp7.oeaw.ac.at"), Some("AssociationID"), __scope, false),
        scalaxb.toXML[models.binding.EnumAssociationType](__obj.AssociationType, Some("http://impex-fp7.oeaw.ac.at"), Some("AssociationType"), __scope, false),
        __obj.Note map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Note"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingAccessInformationFormat extends scalaxb.ElemNameParser[models.binding.AccessInformation] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("AccessInformation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.AccessInformation] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RepositoryID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Availability")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessRights")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessURL")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Format")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Encoding")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DataExtent")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Acknowledgement")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      models.binding.AccessInformation(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[models.binding.EnumAvailability](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[models.binding.EnumAccessRights](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[models.binding.AccessURL](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumFormat](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[models.binding.EnumEncoding](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.DataExtent](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.AccessInformation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.RepositoryID, Some("http://impex-fp7.oeaw.ac.at"), Some("RepositoryID"), __scope, false),
        __obj.Availability map { scalaxb.toXML[models.binding.EnumAvailability](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Availability"), __scope, false) } getOrElse {Nil},
        __obj.AccessRights map { scalaxb.toXML[models.binding.EnumAccessRights](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessRights"), __scope, false) } getOrElse {Nil},
        __obj.AccessURL flatMap { scalaxb.toXML[models.binding.AccessURL](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessURL"), __scope, false) },
        scalaxb.toXML[models.binding.EnumFormat](__obj.Format, Some("http://impex-fp7.oeaw.ac.at"), Some("Format"), __scope, false),
        __obj.Encoding map { scalaxb.toXML[models.binding.EnumEncoding](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Encoding"), __scope, false) } getOrElse {Nil},
        __obj.DataExtent map { scalaxb.toXML[models.binding.DataExtent](_, Some("http://impex-fp7.oeaw.ac.at"), Some("DataExtent"), __scope, false) } getOrElse {Nil},
        __obj.Acknowledgement map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Acknowledgement"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingAccessURLFormat extends scalaxb.ElemNameParser[models.binding.AccessURL] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("AccessURL")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.AccessURL] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "URL")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProductKey")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Language")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.AccessURL(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.AccessURL, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Name map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.URL, Some("http://impex-fp7.oeaw.ac.at"), Some("URL"), __scope, false),
        __obj.ProductKey flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProductKey"), __scope, false) },
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Language map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Language"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingDataExtentFormat extends scalaxb.ElemNameParser[models.binding.DataExtent] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("DataExtent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DataExtent] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Quantity")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Per")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.DataExtent(scalaxb.fromXML[Double](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DataExtent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Double](__obj.Quantity, Some("http://impex-fp7.oeaw.ac.at"), Some("Quantity"), __scope, false),
        __obj.Units map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false) } getOrElse {Nil},
        __obj.Per map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Per"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingTimeSpanFormat extends scalaxb.ElemNameParser[models.binding.TimeSpan] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("TimeSpan")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.TimeSpan] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StartDate")) ~ 
      (((any(_ => true) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RelativeStopDate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.Duration](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StopDate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RelativeStopDate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.Duration](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StopDate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Note")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.TimeSpan(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        p2,
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.TimeSpan, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartDate, Some("http://impex-fp7.oeaw.ac.at"), Some("StartDate"), __scope, false),
        Some(__obj.StopDateEntity) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)} get,
        __obj.Note flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Note"), __scope, false) })

  }

  trait DefaultBindingParameterFormat extends scalaxb.ElemNameParser[models.binding.Parameter] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Parameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Parameter] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Set")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParameterKey")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Cadence")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "UnitsConversion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinateSystem")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RenderingHints")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Structure")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMin")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMax")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FillValue")) ~ 
      (((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Particle")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Particle](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Mixed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Mixed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Wave")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Wave](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Field")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.FieldType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Particle")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Particle](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Mixed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Mixed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Wave")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Wave](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Field")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.FieldType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((any(_ => true) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Support")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Support](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Support")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Support](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Property")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      models.binding.Parameter(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[models.binding.CoordinateSystemType](_, scalaxb.ElemName(node) :: stack) },
        p10.toSeq map { scalaxb.fromXML[models.binding.RenderingHints](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[models.binding.Structure](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15,
        p16.toSeq map { scalaxb.fromXML[models.binding.Property](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Parameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false),
        __obj.Set flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Set"), __scope, false) },
        __obj.ParameterKey map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParameterKey"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Cadence map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Cadence"), __scope, false) } getOrElse {Nil},
        __obj.Units map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false) } getOrElse {Nil},
        __obj.UnitsConversion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("UnitsConversion"), __scope, false) } getOrElse {Nil},
        __obj.CoordinateSystem map { scalaxb.toXML[models.binding.CoordinateSystemType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinateSystem"), __scope, false) } getOrElse {Nil},
        __obj.RenderingHints flatMap { scalaxb.toXML[models.binding.RenderingHints](_, Some("http://impex-fp7.oeaw.ac.at"), Some("RenderingHints"), __scope, false) },
        __obj.Structure map { scalaxb.toXML[models.binding.Structure](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Structure"), __scope, false) } getOrElse {Nil},
        __obj.ValidMin map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMin"), __scope, false) } getOrElse {Nil},
        __obj.ValidMax map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMax"), __scope, false) } getOrElse {Nil},
        __obj.FillValue map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FillValue"), __scope, false) } getOrElse {Nil},
        Some(__obj.ParameterEntity) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)} get,
        __obj.Property flatMap { scalaxb.toXML[models.binding.Property](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Property"), __scope, false) })

  }

  trait DefaultBindingCoordinateSystemTypeFormat extends scalaxb.ElemNameParser[models.binding.CoordinateSystemType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("CoordinateSystem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CoordinateSystemType] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinateRepresentation")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinateSystemName")) ^^
      { case p1 ~ p2 =>
      models.binding.CoordinateSystemType(scalaxb.fromXML[models.binding.EnumCoordinateRepresentation](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.EnumCoordinateSystemName](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.CoordinateSystemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.EnumCoordinateRepresentation](__obj.CoordinateRepresentation, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinateRepresentation"), __scope, false),
        scalaxb.toXML[models.binding.EnumCoordinateSystemName](__obj.CoordinateSystemName, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinateSystemName"), __scope, false))

  }

  trait DefaultBindingRenderingHintsFormat extends scalaxb.ElemNameParser[models.binding.RenderingHints] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("RenderingHints")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.RenderingHints] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DisplayType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AxisLabel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RenderingAxis")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Index")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValueFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ScaleMin")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ScaleMax")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ScaleType")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      models.binding.RenderingHints(p1.headOption map { scalaxb.fromXML[models.binding.EnumDisplayType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[models.binding.EnumRenderingAxis](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Seq[BigInt]](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[models.binding.EnumScaleType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.RenderingHints, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DisplayType map { scalaxb.toXML[models.binding.EnumDisplayType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("DisplayType"), __scope, false) } getOrElse {Nil},
        __obj.AxisLabel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AxisLabel"), __scope, false) } getOrElse {Nil},
        __obj.RenderingAxis map { scalaxb.toXML[models.binding.EnumRenderingAxis](_, Some("http://impex-fp7.oeaw.ac.at"), Some("RenderingAxis"), __scope, false) } getOrElse {Nil},
        __obj.Index map { scalaxb.toXML[Seq[BigInt]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Index"), __scope, false) } getOrElse {Nil},
        __obj.ValueFormat map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValueFormat"), __scope, false) } getOrElse {Nil},
        __obj.ScaleMin map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ScaleMin"), __scope, false) } getOrElse {Nil},
        __obj.ScaleMax map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ScaleMax"), __scope, false) } getOrElse {Nil},
        __obj.ScaleType map { scalaxb.toXML[models.binding.EnumScaleType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ScaleType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingStructureFormat extends scalaxb.ElemNameParser[models.binding.Structure] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Structure")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Structure] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Size")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Element")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.Structure(scalaxb.fromXML[Seq[BigInt]](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[models.binding.Element](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Structure, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Seq[BigInt]](__obj.Size, Some("http://impex-fp7.oeaw.ac.at"), Some("Size"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Element flatMap { scalaxb.toXML[models.binding.Element](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Element"), __scope, false) })

  }

  trait DefaultBindingElementFormat extends scalaxb.ElemNameParser[models.binding.Element] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Element")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Element] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Index")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParameterKey")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "UnitsConversion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMin")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMax")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FillValue")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RenderingHints")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      models.binding.Element(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Seq[BigInt]](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[models.binding.RenderingHints](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Element, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false),
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[Seq[BigInt]](__obj.Index, Some("http://impex-fp7.oeaw.ac.at"), Some("Index"), __scope, false),
        __obj.ParameterKey map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParameterKey"), __scope, false) } getOrElse {Nil},
        __obj.Units map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false) } getOrElse {Nil},
        __obj.UnitsConversion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("UnitsConversion"), __scope, false) } getOrElse {Nil},
        __obj.ValidMin map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMin"), __scope, false) } getOrElse {Nil},
        __obj.ValidMax map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMax"), __scope, false) } getOrElse {Nil},
        __obj.FillValue map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FillValue"), __scope, false) } getOrElse {Nil},
        __obj.RenderingHints map { scalaxb.toXML[models.binding.RenderingHints](_, Some("http://impex-fp7.oeaw.ac.at"), Some("RenderingHints"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingFieldTypeFormat extends scalaxb.ElemNameParser[models.binding.FieldType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Field")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.FieldType] =
      phrase(rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FieldQuantity")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FrequencyRange")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.FieldType(p1.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumFieldQuantity](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[models.binding.FrequencyRange](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.FieldType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[models.binding.EnumFieldQuantity](__obj.FieldQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("FieldQuantity"), __scope, false),
        __obj.FrequencyRange map { scalaxb.toXML[models.binding.FrequencyRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FrequencyRange"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingFrequencyRangeFormat extends scalaxb.ElemNameParser[models.binding.FrequencyRange] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("FrequencyRange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.FrequencyRange] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpectralRange")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Low")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "High")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Bin")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.FrequencyRange(p1.headOption map { scalaxb.fromXML[models.binding.EnumSpectralRange](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.toSeq map { scalaxb.fromXML[models.binding.Bin](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.FrequencyRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SpectralRange map { scalaxb.toXML[models.binding.EnumSpectralRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SpectralRange"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Double](__obj.Low, Some("http://impex-fp7.oeaw.ac.at"), Some("Low"), __scope, false),
        scalaxb.toXML[Double](__obj.High, Some("http://impex-fp7.oeaw.ac.at"), Some("High"), __scope, false),
        scalaxb.toXML[String](__obj.Units, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false),
        __obj.Bin flatMap { scalaxb.toXML[models.binding.Bin](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Bin"), __scope, false) })

  }

  trait DefaultBindingBinFormat extends scalaxb.ElemNameParser[models.binding.Bin] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Bin")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Bin] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "BandName")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Low")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "High")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.Bin(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.Bin, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BandName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("BandName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Double](__obj.Low, Some("http://impex-fp7.oeaw.ac.at"), Some("Low"), __scope, false),
        scalaxb.toXML[Double](__obj.High, Some("http://impex-fp7.oeaw.ac.at"), Some("High"), __scope, false))

  }

  trait DefaultBindingEnergyRangeFormat extends scalaxb.ElemNameParser[models.binding.EnergyRange] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("EnergyRange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.EnergyRange] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Low")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "High")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Bin")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.EnergyRange(scalaxb.fromXML[Double](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[models.binding.Bin](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.EnergyRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Double](__obj.Low, Some("http://impex-fp7.oeaw.ac.at"), Some("Low"), __scope, false),
        scalaxb.toXML[Double](__obj.High, Some("http://impex-fp7.oeaw.ac.at"), Some("High"), __scope, false),
        scalaxb.toXML[String](__obj.Units, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false),
        __obj.Bin flatMap { scalaxb.toXML[models.binding.Bin](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Bin"), __scope, false) })

  }

  trait DefaultBindingAzimuthalAngleRangeFormat extends scalaxb.ElemNameParser[models.binding.AzimuthalAngleRange] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("AzimuthalAngleRange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.AzimuthalAngleRange] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Low")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "High")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Bin")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.AzimuthalAngleRange(scalaxb.fromXML[Double](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[models.binding.Bin](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.AzimuthalAngleRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Double](__obj.Low, Some("http://impex-fp7.oeaw.ac.at"), Some("Low"), __scope, false),
        scalaxb.toXML[Double](__obj.High, Some("http://impex-fp7.oeaw.ac.at"), Some("High"), __scope, false),
        scalaxb.toXML[String](__obj.Units, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false),
        __obj.Bin flatMap { scalaxb.toXML[models.binding.Bin](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Bin"), __scope, false) })

  }

  trait DefaultBindingPolarAngleRangeFormat extends scalaxb.ElemNameParser[models.binding.PolarAngleRange] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("PolarAngleRange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.PolarAngleRange] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Low")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "High")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Bin")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.PolarAngleRange(scalaxb.fromXML[Double](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[models.binding.Bin](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.PolarAngleRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Double](__obj.Low, Some("http://impex-fp7.oeaw.ac.at"), Some("Low"), __scope, false),
        scalaxb.toXML[Double](__obj.High, Some("http://impex-fp7.oeaw.ac.at"), Some("High"), __scope, false),
        scalaxb.toXML[String](__obj.Units, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false),
        __obj.Bin flatMap { scalaxb.toXML[models.binding.Bin](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Bin"), __scope, false) })

  }

  trait DefaultBindingWaveFormat extends scalaxb.ElemNameParser[models.binding.Wave] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Wave")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Wave] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "WaveType")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "WaveQuantity")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "EnergyRange")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FrequencyRange")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "WavelengthRange")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      models.binding.Wave(scalaxb.fromXML[models.binding.EnumWaveType](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumWaveQuantity](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[models.binding.EnergyRange](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[models.binding.FrequencyRange](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[models.binding.WavelengthRange](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Wave, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.EnumWaveType](__obj.WaveType, Some("http://impex-fp7.oeaw.ac.at"), Some("WaveType"), __scope, false),
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[models.binding.EnumWaveQuantity](__obj.WaveQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("WaveQuantity"), __scope, false),
        __obj.EnergyRange map { scalaxb.toXML[models.binding.EnergyRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("EnergyRange"), __scope, false) } getOrElse {Nil},
        __obj.FrequencyRange map { scalaxb.toXML[models.binding.FrequencyRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FrequencyRange"), __scope, false) } getOrElse {Nil},
        __obj.WavelengthRange map { scalaxb.toXML[models.binding.WavelengthRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("WavelengthRange"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingWavelengthRangeFormat extends scalaxb.ElemNameParser[models.binding.WavelengthRange] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("WavelengthRange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.WavelengthRange] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpectralRange")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Low")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "High")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Bin")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.WavelengthRange(p1.headOption map { scalaxb.fromXML[models.binding.EnumSpectralRange](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.toSeq map { scalaxb.fromXML[models.binding.Bin](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.WavelengthRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SpectralRange map { scalaxb.toXML[models.binding.EnumSpectralRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SpectralRange"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Double](__obj.Low, Some("http://impex-fp7.oeaw.ac.at"), Some("Low"), __scope, false),
        scalaxb.toXML[Double](__obj.High, Some("http://impex-fp7.oeaw.ac.at"), Some("High"), __scope, false),
        scalaxb.toXML[String](__obj.Units, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false),
        __obj.Bin flatMap { scalaxb.toXML[models.binding.Bin](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Bin"), __scope, false) })

  }

  trait DefaultBindingMixedFormat extends scalaxb.ElemNameParser[models.binding.Mixed] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Mixed")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Mixed] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "MixedQuantity")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParticleType")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.Mixed(scalaxb.fromXML[models.binding.EnumMixedQuantity](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[models.binding.EnumParticleType](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Mixed, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.EnumMixedQuantity](__obj.MixedQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("MixedQuantity"), __scope, false),
        __obj.ParticleType flatMap { scalaxb.toXML[models.binding.EnumParticleType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParticleType"), __scope, false) },
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) })

  }

  trait DefaultBindingSupportFormat extends scalaxb.ElemNameParser[models.binding.Support] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Support")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Support] =
      phrase(rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SupportQuantity")) ^^
      { case p1 ~ p2 =>
      models.binding.Support(p1.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumSupportQuantity](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.Support, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[models.binding.EnumSupportQuantity](__obj.SupportQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("SupportQuantity"), __scope, false))

  }

  trait DefaultBindingExtensionFormat extends scalaxb.ElemNameParser[models.binding.Extension] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Extension")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Extension] =
      phrase(opt(any(_ => true)) ^^
      { case p1 =>
      models.binding.Extension(p1.headOption map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Extension, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.any map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) } getOrElse {Nil})

  }

  trait DefaultBindingDisplayDataFormat extends scalaxb.ElemNameParser[models.binding.DisplayData] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("DisplayData")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DisplayData] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderResourceName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderVersion")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InstrumentID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "MeasurementType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TemporalDescription")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpectralRange")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DisplayCadence")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObservedRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Keyword")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputResourceID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Parameter")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      models.binding.DisplayData(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.AccessInformation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.EnumProcessingLevel](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[models.binding.EnumMeasurementType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[models.binding.TemporalDescription](_, scalaxb.ElemName(node) :: stack) },
        p11.toSeq map { scalaxb.fromXML[models.binding.EnumSpectralRange](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) },
        p13.toSeq map { scalaxb.fromXML[models.binding.EnumRegion](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.toSeq map { scalaxb.fromXML[models.binding.Parameter](_, scalaxb.ElemName(node) :: stack) },
        p18.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DisplayData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.AccessInformation flatMap { scalaxb.toXML[models.binding.AccessInformation](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessInformation"), __scope, false) },
        __obj.ProcessingLevel map { scalaxb.toXML[models.binding.EnumProcessingLevel](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderResourceName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderResourceName"), __scope, false) } getOrElse {Nil},
        __obj.ProviderProcessingLevel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderVersion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderVersion"), __scope, false) } getOrElse {Nil},
        __obj.InstrumentID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InstrumentID"), __scope, false) },
        __obj.MeasurementType flatMap { scalaxb.toXML[models.binding.EnumMeasurementType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("MeasurementType"), __scope, false) },
        __obj.TemporalDescription map { scalaxb.toXML[models.binding.TemporalDescription](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TemporalDescription"), __scope, false) } getOrElse {Nil},
        __obj.SpectralRange flatMap { scalaxb.toXML[models.binding.EnumSpectralRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SpectralRange"), __scope, false) },
        __obj.DisplayCadence map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("DisplayCadence"), __scope, false) } getOrElse {Nil},
        __obj.ObservedRegion flatMap { scalaxb.toXML[models.binding.EnumRegion](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ObservedRegion"), __scope, false) },
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Keyword flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Keyword"), __scope, false) },
        __obj.InputResourceID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputResourceID"), __scope, false) },
        __obj.Parameter flatMap { scalaxb.toXML[models.binding.Parameter](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Parameter"), __scope, false) },
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingTemporalDescriptionFormat extends scalaxb.ElemNameParser[models.binding.TemporalDescription] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("TemporalDescription")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.TemporalDescription] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TimeSpan")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Cadence")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Exposure")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.TemporalDescription(scalaxb.fromXML[models.binding.TimeSpan](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.TemporalDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.TimeSpan](__obj.TimeSpan, Some("http://impex-fp7.oeaw.ac.at"), Some("TimeSpan"), __scope, false),
        __obj.Cadence map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Cadence"), __scope, false) } getOrElse {Nil},
        __obj.Exposure map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Exposure"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingNumericalDataFormat extends scalaxb.ElemNameParser[models.binding.NumericalData] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("NumericalData")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.NumericalData] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderResourceName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderVersion")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InstrumentID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "MeasurementType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TemporalDescription")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpectralRange")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObservedRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Keyword")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputResourceID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Parameter")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      models.binding.NumericalData(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.AccessInformation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.EnumProcessingLevel](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[models.binding.EnumMeasurementType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[models.binding.TemporalDescription](_, scalaxb.ElemName(node) :: stack) },
        p11.toSeq map { scalaxb.fromXML[models.binding.EnumSpectralRange](_, scalaxb.ElemName(node) :: stack) },
        p12.toSeq map { scalaxb.fromXML[models.binding.EnumRegion](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.toSeq map { scalaxb.fromXML[models.binding.Parameter](_, scalaxb.ElemName(node) :: stack) },
        p17.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.NumericalData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.AccessInformation flatMap { scalaxb.toXML[models.binding.AccessInformation](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessInformation"), __scope, false) },
        __obj.ProcessingLevel map { scalaxb.toXML[models.binding.EnumProcessingLevel](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderResourceName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderResourceName"), __scope, false) } getOrElse {Nil},
        __obj.ProviderProcessingLevel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderVersion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderVersion"), __scope, false) } getOrElse {Nil},
        __obj.InstrumentID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InstrumentID"), __scope, false) },
        __obj.MeasurementType flatMap { scalaxb.toXML[models.binding.EnumMeasurementType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("MeasurementType"), __scope, false) },
        __obj.TemporalDescription map { scalaxb.toXML[models.binding.TemporalDescription](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TemporalDescription"), __scope, false) } getOrElse {Nil},
        __obj.SpectralRange flatMap { scalaxb.toXML[models.binding.EnumSpectralRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SpectralRange"), __scope, false) },
        __obj.ObservedRegion flatMap { scalaxb.toXML[models.binding.EnumRegion](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ObservedRegion"), __scope, false) },
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Keyword flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Keyword"), __scope, false) },
        __obj.InputResourceID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputResourceID"), __scope, false) },
        __obj.Parameter flatMap { scalaxb.toXML[models.binding.Parameter](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Parameter"), __scope, false) },
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingDocumentFormat extends scalaxb.ElemNameParser[models.binding.Document] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Document")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Document] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessInformation")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Keyword")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DocumentType")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "MIMEType")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputResourceID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.Document(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.AccessInformation](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumDocumentType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[Boolean](scala.xml.Text("true"), scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Document, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.AccessInformation flatMap { scalaxb.toXML[models.binding.AccessInformation](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessInformation"), __scope, false) },
        __obj.Keyword flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Keyword"), __scope, false) },
        scalaxb.toXML[models.binding.EnumDocumentType](__obj.DocumentType, Some("http://impex-fp7.oeaw.ac.at"), Some("DocumentType"), __scope, false),
        scalaxb.toXML[Boolean](__obj.MIMEType, Some("http://impex-fp7.oeaw.ac.at"), Some("MIMEType"), __scope, false),
        __obj.InputResourceID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputResourceID"), __scope, false) })

  }

  trait DefaultBindingSourceFormat extends scalaxb.ElemNameParser[models.binding.Source] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Source")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Source] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SourceType")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "URL")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "MirrorURL")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Checksum")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DataExtent")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.Source(scalaxb.fromXML[models.binding.EnumSourceType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.Checksum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[models.binding.DataExtent](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Source, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.EnumSourceType](__obj.SourceType, Some("http://impex-fp7.oeaw.ac.at"), Some("SourceType"), __scope, false),
        scalaxb.toXML[String](__obj.URL, Some("http://impex-fp7.oeaw.ac.at"), Some("URL"), __scope, false),
        __obj.MirrorURL flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("MirrorURL"), __scope, false) },
        __obj.Checksum map { scalaxb.toXML[models.binding.Checksum](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Checksum"), __scope, false) } getOrElse {Nil},
        __obj.DataExtent map { scalaxb.toXML[models.binding.DataExtent](_, Some("http://impex-fp7.oeaw.ac.at"), Some("DataExtent"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingChecksumFormat extends scalaxb.ElemNameParser[models.binding.Checksum] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Checksum")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Checksum] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "HashValue")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "HashFunction")) ^^
      { case p1 ~ p2 =>
      models.binding.Checksum(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.EnumHashFunction](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.Checksum, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.HashValue, Some("http://impex-fp7.oeaw.ac.at"), Some("HashValue"), __scope, false),
        scalaxb.toXML[models.binding.EnumHashFunction](__obj.HashFunction, Some("http://impex-fp7.oeaw.ac.at"), Some("HashFunction"), __scope, false))

  }

  trait DefaultBindingInstrumentFormat extends scalaxb.ElemNameParser[models.binding.Instrument] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Instrument")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Instrument] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InstrumentType")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InvestigationName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "OperatingSpan")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObservatoryID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      models.binding.Instrument(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.EnumInstrumentType](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[models.binding.OperatingSpan](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Instrument, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.InstrumentType flatMap { scalaxb.toXML[models.binding.EnumInstrumentType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InstrumentType"), __scope, false) },
        __obj.InvestigationName flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InvestigationName"), __scope, false) },
        __obj.OperatingSpan map { scalaxb.toXML[models.binding.OperatingSpan](_, Some("http://impex-fp7.oeaw.ac.at"), Some("OperatingSpan"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.ObservatoryID, Some("http://impex-fp7.oeaw.ac.at"), Some("ObservatoryID"), __scope, false),
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingOperatingSpanFormat extends scalaxb.ElemNameParser[models.binding.OperatingSpan] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("OperatingSpan")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.OperatingSpan] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StartDate")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StopDate")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Note")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.OperatingSpan(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.OperatingSpan, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartDate, Some("http://impex-fp7.oeaw.ac.at"), Some("StartDate"), __scope, false),
        __obj.StopDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://impex-fp7.oeaw.ac.at"), Some("StopDate"), __scope, false) } getOrElse {Nil},
        __obj.Note flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Note"), __scope, false) })

  }

  trait DefaultBindingObservatoryFormat extends scalaxb.ElemNameParser[models.binding.Observatory] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Observatory")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Observatory] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObservatoryGroupID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Location")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "OperatingSpan")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      models.binding.Observatory(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.Location](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[models.binding.OperatingSpan](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Observatory, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.ObservatoryGroupID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ObservatoryGroupID"), __scope, false) },
        scalaxb.toXML[models.binding.Location](__obj.Location, Some("http://impex-fp7.oeaw.ac.at"), Some("Location"), __scope, false),
        __obj.OperatingSpan map { scalaxb.toXML[models.binding.OperatingSpan](_, Some("http://impex-fp7.oeaw.ac.at"), Some("OperatingSpan"), __scope, false) } getOrElse {Nil},
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingLocationFormat extends scalaxb.ElemNameParser[models.binding.Location] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Location")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Location] =
      phrase(rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObservatoryRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinateSystemName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Latitude")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Longitude")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Elevation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.Location(p1.toSeq map { scalaxb.fromXML[models.binding.EnumRegion](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.EnumCoordinateSystemName](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Location, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ObservatoryRegion flatMap { scalaxb.toXML[models.binding.EnumRegion](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ObservatoryRegion"), __scope, false) },
        __obj.CoordinateSystemName map { scalaxb.toXML[models.binding.EnumCoordinateSystemName](_, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinateSystemName"), __scope, false) } getOrElse {Nil},
        __obj.Latitude map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Latitude"), __scope, false) } getOrElse {Nil},
        __obj.Longitude map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Longitude"), __scope, false) } getOrElse {Nil},
        __obj.Elevation map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Elevation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingPersonFormat extends scalaxb.ElemNameParser[models.binding.Person] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Person")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Person] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ReleaseDate")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PersonName")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "OrganizationName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Address")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Email")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PhoneNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FaxNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Note")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      models.binding.Person(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Person, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        __obj.ReleaseDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ReleaseDate"), __scope, false) } getOrElse {Nil},
        __obj.PersonName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PersonName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.OrganizationName, Some("http://impex-fp7.oeaw.ac.at"), Some("OrganizationName"), __scope, false),
        __obj.Address map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Address"), __scope, false) } getOrElse {Nil},
        __obj.Email flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Email"), __scope, false) },
        __obj.PhoneNumber flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PhoneNumber"), __scope, false) },
        __obj.FaxNumber map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FaxNumber"), __scope, false) } getOrElse {Nil},
        __obj.Note map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Note"), __scope, false) } getOrElse {Nil},
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingRegistryFormat extends scalaxb.ElemNameParser[models.binding.Registry] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Registry")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Registry] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessURL")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.Registry(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.AccessURL](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Registry, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        scalaxb.toXML[models.binding.AccessURL](__obj.AccessURL, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessURL"), __scope, false),
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingRepositoryFormat extends scalaxb.ElemNameParser[models.binding.Repository] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Repository")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Repository] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessURL")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.Repository(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.AccessURL](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Repository, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        scalaxb.toXML[models.binding.AccessURL](__obj.AccessURL, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessURL"), __scope, false),
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingServiceFormat extends scalaxb.ElemNameParser[models.binding.Service] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Service")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Service] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessURL")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.Service(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.AccessURL](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Service, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        scalaxb.toXML[models.binding.AccessURL](__obj.AccessURL, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessURL"), __scope, false),
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingAnnotationFormat extends scalaxb.ElemNameParser[models.binding.Annotation] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Annotation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Annotation] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ImageURL")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AnnotationType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PhenomenonType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ClassificationMethod")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ConfidenceRating")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TimeSpan")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObservationExtent")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      models.binding.Annotation(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumAnnotationType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[models.binding.EnumPhenomenonType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[models.binding.EnumClassificationMethod](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.EnumConfidenceRating](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[models.binding.TimeSpan](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[models.binding.ObservationExtent](_, scalaxb.ElemName(node) :: stack) },
        p10.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Annotation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.ImageURL map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ImageURL"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[models.binding.EnumAnnotationType](__obj.AnnotationType, Some("http://impex-fp7.oeaw.ac.at"), Some("AnnotationType"), __scope, false),
        __obj.PhenomenonType map { scalaxb.toXML[models.binding.EnumPhenomenonType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PhenomenonType"), __scope, false) } getOrElse {Nil},
        __obj.ClassificationMethod map { scalaxb.toXML[models.binding.EnumClassificationMethod](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ClassificationMethod"), __scope, false) } getOrElse {Nil},
        __obj.ConfidenceRating map { scalaxb.toXML[models.binding.EnumConfidenceRating](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ConfidenceRating"), __scope, false) } getOrElse {Nil},
        __obj.TimeSpan flatMap { scalaxb.toXML[models.binding.TimeSpan](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TimeSpan"), __scope, false) },
        __obj.ObservationExtent flatMap { scalaxb.toXML[models.binding.ObservationExtent](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ObservationExtent"), __scope, false) },
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingObservationExtentFormat extends scalaxb.ElemNameParser[models.binding.ObservationExtent] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("ObservationExtent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ObservationExtent] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObservedRegion")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StartLocation")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StopLocation")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Note")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.ObservationExtent(p1.headOption map { scalaxb.fromXML[models.binding.EnumRegion](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ObservationExtent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ObservedRegion map { scalaxb.toXML[models.binding.EnumRegion](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ObservedRegion"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.StartLocation, Some("http://impex-fp7.oeaw.ac.at"), Some("StartLocation"), __scope, false),
        scalaxb.toXML[String](__obj.StopLocation, Some("http://impex-fp7.oeaw.ac.at"), Some("StopLocation"), __scope, false),
        __obj.Note flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Note"), __scope, false) })

  }

  def buildBindingEnumVersionFormat = new DefaultBindingEnumVersionFormat {}
  trait DefaultBindingEnumVersionFormat extends scalaxb.XMLFormat[models.binding.EnumVersion] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumVersion] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumVersion.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumVersion.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumVersion, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumAccessRightsFormat = new DefaultBindingEnumAccessRightsFormat {}
  trait DefaultBindingEnumAccessRightsFormat extends scalaxb.XMLFormat[models.binding.EnumAccessRights] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumAccessRights] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumAccessRights.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumAccessRights.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumAccessRights, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumAnnotationTypeFormat = new DefaultBindingEnumAnnotationTypeFormat {}
  trait DefaultBindingEnumAnnotationTypeFormat extends scalaxb.XMLFormat[models.binding.EnumAnnotationType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumAnnotationType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumAnnotationType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumAnnotationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumAnnotationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumAssociationTypeFormat = new DefaultBindingEnumAssociationTypeFormat {}
  trait DefaultBindingEnumAssociationTypeFormat extends scalaxb.XMLFormat[models.binding.EnumAssociationType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumAssociationType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumAssociationType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumAssociationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumAssociationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumAvailabilityFormat = new DefaultBindingEnumAvailabilityFormat {}
  trait DefaultBindingEnumAvailabilityFormat extends scalaxb.XMLFormat[models.binding.EnumAvailability] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumAvailability] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumAvailability.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumAvailability.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumAvailability, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumClassificationMethodFormat = new DefaultBindingEnumClassificationMethodFormat {}
  trait DefaultBindingEnumClassificationMethodFormat extends scalaxb.XMLFormat[models.binding.EnumClassificationMethod] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumClassificationMethod] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumClassificationMethod.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumClassificationMethod.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumClassificationMethod, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumComponentFormat = new DefaultBindingEnumComponentFormat {}
  trait DefaultBindingEnumComponentFormat extends scalaxb.XMLFormat[models.binding.EnumComponent] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumComponent] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumComponent.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumComponent.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumComponent, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumConfidenceRatingFormat = new DefaultBindingEnumConfidenceRatingFormat {}
  trait DefaultBindingEnumConfidenceRatingFormat extends scalaxb.XMLFormat[models.binding.EnumConfidenceRating] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumConfidenceRating] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumConfidenceRating.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumConfidenceRating.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumConfidenceRating, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumCoordinateRepresentationFormat = new DefaultBindingEnumCoordinateRepresentationFormat {}
  trait DefaultBindingEnumCoordinateRepresentationFormat extends scalaxb.XMLFormat[models.binding.EnumCoordinateRepresentation] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumCoordinateRepresentation] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumCoordinateRepresentation.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumCoordinateRepresentation.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumCoordinateRepresentation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumCoordinateSystemNameFormat = new DefaultBindingEnumCoordinateSystemNameFormat {}
  trait DefaultBindingEnumCoordinateSystemNameFormat extends scalaxb.XMLFormat[models.binding.EnumCoordinateSystemName] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumCoordinateSystemName] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumCoordinateSystemName.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumCoordinateSystemName.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumCoordinateSystemName, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumDirectionAngleFormat = new DefaultBindingEnumDirectionAngleFormat {}
  trait DefaultBindingEnumDirectionAngleFormat extends scalaxb.XMLFormat[models.binding.EnumDirectionAngle] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumDirectionAngle] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumDirectionAngle.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumDirectionAngle.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumDirectionAngle, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumDisplayTypeFormat = new DefaultBindingEnumDisplayTypeFormat {}
  trait DefaultBindingEnumDisplayTypeFormat extends scalaxb.XMLFormat[models.binding.EnumDisplayType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumDisplayType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumDisplayType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumDisplayType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumDisplayType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumDocumentTypeFormat = new DefaultBindingEnumDocumentTypeFormat {}
  trait DefaultBindingEnumDocumentTypeFormat extends scalaxb.XMLFormat[models.binding.EnumDocumentType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumDocumentType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumDocumentType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumDocumentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumDocumentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumEarthFormat = new DefaultBindingEnumEarthFormat {}
  trait DefaultBindingEnumEarthFormat extends scalaxb.XMLFormat[models.binding.EnumEarth] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumEarth] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumEarth.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumEarth.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumEarth, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumEncodingFormat = new DefaultBindingEnumEncodingFormat {}
  trait DefaultBindingEnumEncodingFormat extends scalaxb.XMLFormat[models.binding.EnumEncoding] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumEncoding] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumEncoding.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumEncoding.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumEncoding, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumFieldQuantityFormat = new DefaultBindingEnumFieldQuantityFormat {}
  trait DefaultBindingEnumFieldQuantityFormat extends scalaxb.XMLFormat[models.binding.EnumFieldQuantity] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumFieldQuantity] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumFieldQuantity.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumFieldQuantity.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumFieldQuantity, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumFormatFormat = new DefaultBindingEnumFormatFormat {}
  trait DefaultBindingEnumFormatFormat extends scalaxb.XMLFormat[models.binding.EnumFormat] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumFormat] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumFormat.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumFormat.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumFormat, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumHardcopyFormat = new DefaultBindingEnumHardcopyFormat {}
  trait DefaultBindingEnumHardcopyFormat extends scalaxb.XMLFormat[models.binding.EnumHardcopy] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumHardcopy] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumHardcopy.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumHardcopy.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumHardcopy, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumHashFunctionFormat = new DefaultBindingEnumHashFunctionFormat {}
  trait DefaultBindingEnumHashFunctionFormat extends scalaxb.XMLFormat[models.binding.EnumHashFunction] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumHashFunction] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumHashFunction.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumHashFunction.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumHashFunction, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumHeliosphereFormat = new DefaultBindingEnumHeliosphereFormat {}
  trait DefaultBindingEnumHeliosphereFormat extends scalaxb.XMLFormat[models.binding.EnumHeliosphere] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumHeliosphere] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumHeliosphere.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumHeliosphere.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumHeliosphere, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumInstrumentTypeFormat = new DefaultBindingEnumInstrumentTypeFormat {}
  trait DefaultBindingEnumInstrumentTypeFormat extends scalaxb.XMLFormat[models.binding.EnumInstrumentType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumInstrumentType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumInstrumentType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumInstrumentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumInstrumentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumIntegralFormat = new DefaultBindingEnumIntegralFormat {}
  trait DefaultBindingEnumIntegralFormat extends scalaxb.XMLFormat[models.binding.EnumIntegral] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumIntegral] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumIntegral.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumIntegral.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumIntegral, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumIonosphereFormat = new DefaultBindingEnumIonosphereFormat {}
  trait DefaultBindingEnumIonosphereFormat extends scalaxb.XMLFormat[models.binding.EnumIonosphere] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumIonosphere] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumIonosphere.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumIonosphere.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumIonosphere, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumMagnetosphereFormat = new DefaultBindingEnumMagnetosphereFormat {}
  trait DefaultBindingEnumMagnetosphereFormat extends scalaxb.XMLFormat[models.binding.EnumMagnetosphere] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumMagnetosphere] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumMagnetosphere.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumMagnetosphere.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumMagnetosphere, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumMeasurementTypeFormat = new DefaultBindingEnumMeasurementTypeFormat {}
  trait DefaultBindingEnumMeasurementTypeFormat extends scalaxb.XMLFormat[models.binding.EnumMeasurementType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumMeasurementType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumMeasurementType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumMeasurementType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumMeasurementType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumMixedQuantityFormat = new DefaultBindingEnumMixedQuantityFormat {}
  trait DefaultBindingEnumMixedQuantityFormat extends scalaxb.XMLFormat[models.binding.EnumMixedQuantity] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumMixedQuantity] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumMixedQuantity.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumMixedQuantity.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumMixedQuantity, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumNearSurfaceFormat = new DefaultBindingEnumNearSurfaceFormat {}
  trait DefaultBindingEnumNearSurfaceFormat extends scalaxb.XMLFormat[models.binding.EnumNearSurface] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumNearSurface] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumNearSurface.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumNearSurface.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumNearSurface, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumParticleQuantityFormat = new DefaultBindingEnumParticleQuantityFormat {}
  trait DefaultBindingEnumParticleQuantityFormat extends scalaxb.XMLFormat[models.binding.EnumParticleQuantity] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumParticleQuantity] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumParticleQuantity.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumParticleQuantity.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumParticleQuantity, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumParticleTypeFormat = new DefaultBindingEnumParticleTypeFormat {}
  trait DefaultBindingEnumParticleTypeFormat extends scalaxb.XMLFormat[models.binding.EnumParticleType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumParticleType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumParticleType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumParticleType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumParticleType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumPhenomenonTypeFormat = new DefaultBindingEnumPhenomenonTypeFormat {}
  trait DefaultBindingEnumPhenomenonTypeFormat extends scalaxb.XMLFormat[models.binding.EnumPhenomenonType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumPhenomenonType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumPhenomenonType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumPhenomenonType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumPhenomenonType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumProcessingLevelFormat = new DefaultBindingEnumProcessingLevelFormat {}
  trait DefaultBindingEnumProcessingLevelFormat extends scalaxb.XMLFormat[models.binding.EnumProcessingLevel] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumProcessingLevel] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumProcessingLevel.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumProcessingLevel.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumProcessingLevel, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumProjectionFormat = new DefaultBindingEnumProjectionFormat {}
  trait DefaultBindingEnumProjectionFormat extends scalaxb.XMLFormat[models.binding.EnumProjection] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumProjection] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumProjection.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumProjection.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumProjection, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumImpexSpecialRegionFormat = new DefaultBindingEnumImpexSpecialRegionFormat {}
  trait DefaultBindingEnumImpexSpecialRegionFormat extends scalaxb.XMLFormat[models.binding.EnumImpexSpecialRegion] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumImpexSpecialRegion] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumImpexSpecialRegion.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumImpexSpecialRegion.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumImpexSpecialRegion, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumQualifierFormat = new DefaultBindingEnumQualifierFormat {}
  trait DefaultBindingEnumQualifierFormat extends scalaxb.XMLFormat[models.binding.EnumQualifier] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumQualifier] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumQualifier.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumQualifier.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumQualifier, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumRegionFormat = new DefaultBindingEnumRegionFormat {}
  trait DefaultBindingEnumRegionFormat extends scalaxb.XMLFormat[models.binding.EnumRegion] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumRegion] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumRegion.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumRegion.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumRegion, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumRenderingAxisFormat = new DefaultBindingEnumRenderingAxisFormat {}
  trait DefaultBindingEnumRenderingAxisFormat extends scalaxb.XMLFormat[models.binding.EnumRenderingAxis] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumRenderingAxis] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumRenderingAxis.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumRenderingAxis.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumRenderingAxis, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumRoleFormat = new DefaultBindingEnumRoleFormat {}
  trait DefaultBindingEnumRoleFormat extends scalaxb.XMLFormat[models.binding.EnumRole] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumRole] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumRole.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumRole.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumRole, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumScaleTypeFormat = new DefaultBindingEnumScaleTypeFormat {}
  trait DefaultBindingEnumScaleTypeFormat extends scalaxb.XMLFormat[models.binding.EnumScaleType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumScaleType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumScaleType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumScaleType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumScaleType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumSourceTypeFormat = new DefaultBindingEnumSourceTypeFormat {}
  trait DefaultBindingEnumSourceTypeFormat extends scalaxb.XMLFormat[models.binding.EnumSourceType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumSourceType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumSourceType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumSourceType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumSourceType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumSpectralRangeFormat = new DefaultBindingEnumSpectralRangeFormat {}
  trait DefaultBindingEnumSpectralRangeFormat extends scalaxb.XMLFormat[models.binding.EnumSpectralRange] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumSpectralRange] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumSpectralRange.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumSpectralRange.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumSpectralRange, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumSunFormat = new DefaultBindingEnumSunFormat {}
  trait DefaultBindingEnumSunFormat extends scalaxb.XMLFormat[models.binding.EnumSun] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumSun] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumSun.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumSun.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumSun, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumSupportQuantityFormat = new DefaultBindingEnumSupportQuantityFormat {}
  trait DefaultBindingEnumSupportQuantityFormat extends scalaxb.XMLFormat[models.binding.EnumSupportQuantity] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumSupportQuantity] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumSupportQuantity.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumSupportQuantity.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumSupportQuantity, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumTextFormat = new DefaultBindingEnumTextFormat {}
  trait DefaultBindingEnumTextFormat extends scalaxb.XMLFormat[models.binding.EnumText] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumText] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumText.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumText.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumText, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumWaveQuantityFormat = new DefaultBindingEnumWaveQuantityFormat {}
  trait DefaultBindingEnumWaveQuantityFormat extends scalaxb.XMLFormat[models.binding.EnumWaveQuantity] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumWaveQuantity] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumWaveQuantity.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumWaveQuantity.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumWaveQuantity, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumWaveTypeFormat = new DefaultBindingEnumWaveTypeFormat {}
  trait DefaultBindingEnumWaveTypeFormat extends scalaxb.XMLFormat[models.binding.EnumWaveType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumWaveType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumWaveType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumWaveType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumWaveType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumWavesFormat = new DefaultBindingEnumWavesFormat {}
  trait DefaultBindingEnumWavesFormat extends scalaxb.XMLFormat[models.binding.EnumWaves] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumWaves] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumWaves.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumWaves.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumWaves, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  // ATTENTION WE HAVE CHANGED THE RegionBegin/RegionEnd element to String from Float
  trait DefaultBindingGranuleFormat extends scalaxb.ElemNameParser[models.binding.Granule] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Granule")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Granule] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ReleaseDate")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ExpirationDate")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParentID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PriorID")) ~ 
      (((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StartDate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionBegin")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "StopDate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionEnd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Source")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      models.binding.Granule(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6,
        p7,
        p8.toSeq map { scalaxb.fromXML[models.binding.Source](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Granule, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.ReleaseDate, Some("http://impex-fp7.oeaw.ac.at"), Some("ReleaseDate"), __scope, false),
        __obj.ExpirationDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ExpirationDate"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.ParentID, Some("http://impex-fp7.oeaw.ac.at"), Some("ParentID"), __scope, false),
        __obj.PriorID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PriorID"), __scope, false) },
        Some(__obj.granuleoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)} get,
        __obj.granuleoption2 map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Source flatMap { scalaxb.toXML[models.binding.Source](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Source"), __scope, false) })

  }

  trait DefaultBindingNumericalOutputFormat extends scalaxb.ElemNameParser[models.binding.NumericalOutput] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("NumericalOutput")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.NumericalOutput] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderResourceName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderVersion")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedInstrumentID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "MeasurementType")) ~ 
      opt(((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TemporalDescription")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.TemporalDescription](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpatialDescription")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SpatialDescription](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpectralRange")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Keyword")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputResourceID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Parameter")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationProduct")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Property")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 =>
      models.binding.NumericalOutput(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.AccessInformation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.EnumProcessingLevel](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[models.binding.EnumMeasurementType](_, scalaxb.ElemName(node) :: stack) },
        p10,
        p11.toSeq map { scalaxb.fromXML[models.binding.EnumSpectralRange](_, scalaxb.ElemName(node) :: stack) },
        p12.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.toSeq map { scalaxb.fromXML[models.binding.Parameter](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumProduct](p17, scalaxb.ElemName(node) :: stack),
        p18.toSeq map { scalaxb.fromXML[models.binding.Property](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.NumericalOutput, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.AccessInformation flatMap { scalaxb.toXML[models.binding.AccessInformation](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessInformation"), __scope, false) },
        __obj.ProcessingLevel map { scalaxb.toXML[models.binding.EnumProcessingLevel](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderResourceName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderResourceName"), __scope, false) } getOrElse {Nil},
        __obj.ProviderProcessingLevel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderVersion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderVersion"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedInstrumentID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedInstrumentID"), __scope, false) },
        __obj.MeasurementType flatMap { scalaxb.toXML[models.binding.EnumMeasurementType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("MeasurementType"), __scope, false) },
        __obj.numericaloutputoption map { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.NumericalOutputOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.SpectralRange flatMap { scalaxb.toXML[models.binding.EnumSpectralRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SpectralRange"), __scope, false) },
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Keyword flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Keyword"), __scope, false) },
        __obj.InputResourceID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputResourceID"), __scope, false) },
        __obj.Parameter flatMap { scalaxb.toXML[models.binding.Parameter](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Parameter"), __scope, false) },
        scalaxb.toXML[models.binding.EnumProduct](__obj.SimulationProduct, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulationProduct"), __scope, false),
        __obj.Property flatMap { scalaxb.toXML[models.binding.Property](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Property"), __scope, false) },
        __obj.Extension map { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingDisplayOutputFormat extends scalaxb.ElemNameParser[models.binding.DisplayOutput] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("DisplayOutput")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DisplayOutput] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderResourceName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderVersion")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedInstrumentID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "MeasurementType")) ~ 
      opt(((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TemporalDescription")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.TemporalDescription](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpatialDescription")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.SpatialDescription](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpectralRange")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DisplayCadence")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Keyword")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputResourceID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Parameter")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationProduct")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Property")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      models.binding.DisplayOutput(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.AccessInformation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.EnumProcessingLevel](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[models.binding.EnumMeasurementType](_, scalaxb.ElemName(node) :: stack) },
        p10,
        p11.toSeq map { scalaxb.fromXML[models.binding.EnumSpectralRange](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) },
        p13.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.toSeq map { scalaxb.fromXML[models.binding.Parameter](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumProduct](p18, scalaxb.ElemName(node) :: stack),
        p19.toSeq map { scalaxb.fromXML[models.binding.Property](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.DisplayOutput, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.AccessInformation flatMap { scalaxb.toXML[models.binding.AccessInformation](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessInformation"), __scope, false) },
        __obj.ProcessingLevel map { scalaxb.toXML[models.binding.EnumProcessingLevel](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderResourceName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderResourceName"), __scope, false) } getOrElse {Nil},
        __obj.ProviderProcessingLevel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderVersion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderVersion"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedInstrumentID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedInstrumentID"), __scope, false) },
        __obj.MeasurementType flatMap { scalaxb.toXML[models.binding.EnumMeasurementType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("MeasurementType"), __scope, false) },
        __obj.displayoutputoption map { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.DisplayOutputOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.SpectralRange flatMap { scalaxb.toXML[models.binding.EnumSpectralRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SpectralRange"), __scope, false) },
        __obj.DisplayCadence map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("DisplayCadence"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Keyword flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Keyword"), __scope, false) },
        __obj.InputResourceID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputResourceID"), __scope, false) },
        __obj.Parameter flatMap { scalaxb.toXML[models.binding.Parameter](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Parameter"), __scope, false) },
        scalaxb.toXML[models.binding.EnumProduct](__obj.SimulationProduct, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulationProduct"), __scope, false),
        __obj.Property flatMap { scalaxb.toXML[models.binding.Property](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Property"), __scope, false) },
        __obj.Extension map { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingSimulationModelFormat extends scalaxb.ElemNameParser[models.binding.SimulationModel] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("SimulationModel")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SimulationModel] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Versions")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CodeLanguage")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TemporalDependence")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpatialDescription")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputProperties")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "OutputParameters")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ModelURL")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      models.binding.SimulationModel(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[models.binding.Versions](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumSimulationType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[models.binding.EnumYN](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.SpatialDescription](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[models.binding.InputProperties](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[models.binding.OutputParameters](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SimulationModel, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.Versions map { scalaxb.toXML[models.binding.Versions](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Versions"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[models.binding.EnumSimulationType](__obj.SimulationType, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulationType"), __scope, false),
        __obj.CodeLanguage map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("CodeLanguage"), __scope, false) } getOrElse {Nil},
        __obj.TemporalDependence map { scalaxb.toXML[models.binding.EnumYN](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TemporalDependence"), __scope, false) } getOrElse {Nil},
        __obj.SpatialDescription map { scalaxb.toXML[models.binding.SpatialDescription](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SpatialDescription"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        __obj.InputProperties map { scalaxb.toXML[models.binding.InputProperties](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputProperties"), __scope, false) } getOrElse {Nil},
        __obj.OutputParameters map { scalaxb.toXML[models.binding.OutputParameters](_, Some("http://impex-fp7.oeaw.ac.at"), Some("OutputParameters"), __scope, false) } getOrElse {Nil},
        __obj.ModelURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ModelURL"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingInputPropertiesFormat extends scalaxb.ElemNameParser[models.binding.InputProperties] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("InputProperties")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InputProperties] =
      phrase(rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Property")) ^^
      { case p1 =>
      models.binding.InputProperties(p1.toSeq map { scalaxb.fromXML[models.binding.Property](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: models.binding.InputProperties, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Property flatMap { scalaxb.toXML[models.binding.Property](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Property"), __scope, false) })

  }

  trait DefaultBindingOutputParametersFormat extends scalaxb.ElemNameParser[models.binding.OutputParameters] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("OutputParameters")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.OutputParameters] =
      phrase(rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Parameter")) ^^
      { case p1 =>
      models.binding.OutputParameters(p1.toSeq map { scalaxb.fromXML[models.binding.Parameter](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: models.binding.OutputParameters, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Parameter flatMap { scalaxb.toXML[models.binding.Parameter](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Parameter"), __scope, false) })

  }

  trait DefaultBindingSimulationRunFormat extends scalaxb.ElemNameParser[models.binding.SimulationRun] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("SimulationRun")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SimulationRun] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ResourceHeader")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AccessInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderResourceName")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderProcessingLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProviderVersion")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Model")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TemporalDependence")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "LikelihoodRating")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Keyword")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputResourceID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationTime")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulationDomain")) ~ 
      rep(((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputPopulation")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputPopulation](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputParameter")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputParameter](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionParameter")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.RegionParameter](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputPopulation")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputPopulation](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputParameter")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputParameter](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionParameter")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.RegionParameter](x, scalaxb.ElemName(node) :: stack)))) | 
      ((any(_ => true) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputField")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputField](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputProcess")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputProcess](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputField")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputField](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputProcess")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.InputProcess](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Extension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      models.binding.SimulationRun(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.ResourceHeader](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[models.binding.AccessInformation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.Model](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[models.binding.EnumYN](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumConfidenceRating](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.SimulationTime](p14, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.SimulationDomain](p15, scalaxb.ElemName(node) :: stack),
        p16,
        p17.toSeq map { scalaxb.fromXML[models.binding.Extension](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SimulationRun, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ResourceID, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceID"), __scope, false),
        scalaxb.toXML[models.binding.ResourceHeader](__obj.ResourceHeader, Some("http://impex-fp7.oeaw.ac.at"), Some("ResourceHeader"), __scope, false),
        __obj.AccessInformation flatMap { scalaxb.toXML[models.binding.AccessInformation](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AccessInformation"), __scope, false) },
        __obj.ProviderResourceName map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderResourceName"), __scope, false) } getOrElse {Nil},
        __obj.ProviderProcessingLevel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderProcessingLevel"), __scope, false) } getOrElse {Nil},
        __obj.ProviderVersion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProviderVersion"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[models.binding.Model](__obj.Model, Some("http://impex-fp7.oeaw.ac.at"), Some("Model"), __scope, false),
        __obj.TemporalDependence map { scalaxb.toXML[models.binding.EnumYN](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TemporalDependence"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        scalaxb.toXML[models.binding.EnumConfidenceRating](__obj.LikelihoodRating, Some("http://impex-fp7.oeaw.ac.at"), Some("LikelihoodRating"), __scope, false),
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Keyword flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Keyword"), __scope, false) },
        __obj.InputResourceID flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputResourceID"), __scope, false) },
        scalaxb.toXML[models.binding.SimulationTime](__obj.SimulationTime, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulationTime"), __scope, false),
        scalaxb.toXML[models.binding.SimulationDomain](__obj.SimulationDomain, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulationDomain"), __scope, false),
        __obj.InputEntity flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.Extension flatMap { scalaxb.toXML[models.binding.Extension](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Extension"), __scope, false) })

  }

  trait DefaultBindingModelFormat extends scalaxb.ElemNameParser[models.binding.Model] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Model")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Model] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ModelID")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "VersionID")) ^^
      { case p1 ~ p2 =>
      models.binding.Model(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Model, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ModelID, Some("http://impex-fp7.oeaw.ac.at"), Some("ModelID"), __scope, false),
        __obj.VersionID map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("VersionID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingModelVersionFormat extends scalaxb.ElemNameParser[models.binding.ModelVersion] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("ModelVersion")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ModelVersion] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "VersionID")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ReleaseDate")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      models.binding.ModelVersion(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ModelVersion, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.VersionID, Some("http://impex-fp7.oeaw.ac.at"), Some("VersionID"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.ReleaseDate, Some("http://impex-fp7.oeaw.ac.at"), Some("ReleaseDate"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingVersionsFormat extends scalaxb.ElemNameParser[models.binding.Versions] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Versions")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Versions] =
      phrase(rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ModelVersion")) ^^
      { case p1 =>
      models.binding.Versions(p1.toSeq map { scalaxb.fromXML[models.binding.ModelVersion](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: models.binding.Versions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ModelVersion flatMap { scalaxb.toXML[models.binding.ModelVersion](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ModelVersion"), __scope, false) })

  }

  trait DefaultBindingRegionParameterFormat extends scalaxb.ElemNameParser[models.binding.RegionParameter] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("RegionParameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.RegionParameter] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Radius")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SubLongitude")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Period")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ObjectMass")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputTableURL")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Property")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      models.binding.RegionParameter(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[models.binding.Property](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.RegionParameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.SimulatedRegion, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Radius map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Radius"), __scope, false) } getOrElse {Nil},
        __obj.SubLongitude map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SubLongitude"), __scope, false) } getOrElse {Nil},
        __obj.Period map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Period"), __scope, false) } getOrElse {Nil},
        __obj.ObjectMass map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ObjectMass"), __scope, false) } getOrElse {Nil},
        __obj.InputTableURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputTableURL"), __scope, false) } getOrElse {Nil},
        __obj.Property flatMap { scalaxb.toXML[models.binding.Property](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Property"), __scope, false) })

  }

  trait DefaultBindingInputParameterFormat extends scalaxb.ElemNameParser[models.binding.InputParameter] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("InputParameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InputParameter] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParameterQuantity")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Property")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.InputParameter(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        p7.toSeq map { scalaxb.fromXML[models.binding.Property](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.InputParameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[String](__obj.ParameterQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("ParameterQuantity"), __scope, false),
        __obj.Property flatMap { scalaxb.toXML[models.binding.Property](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Property"), __scope, false) })

  }

  trait DefaultBindingPropertyFormat extends scalaxb.ElemNameParser[models.binding.Property] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Property")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Property] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PropertyQuantity")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "UnitsConversion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PropertyLabel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PropertyValue")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PropertyTableURL")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMin")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMax")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PropertyModel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ModelURL")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      models.binding.Property(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Property, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Name map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.PropertyQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("PropertyQuantity"), __scope, false),
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        __obj.Units map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false) } getOrElse {Nil},
        __obj.UnitsConversion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("UnitsConversion"), __scope, false) } getOrElse {Nil},
        __obj.PropertyLabel map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PropertyLabel"), __scope, false) } getOrElse {Nil},
        __obj.PropertyValue map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PropertyValue"), __scope, false) } getOrElse {Nil},
        __obj.PropertyTableURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PropertyTableURL"), __scope, false) } getOrElse {Nil},
        __obj.ValidMin map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMin"), __scope, false) } getOrElse {Nil},
        __obj.ValidMax map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMax"), __scope, false) } getOrElse {Nil},
        __obj.PropertyModel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PropertyModel"), __scope, false) } getOrElse {Nil},
        __obj.ModelURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ModelURL"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingInputPopulationFormat extends scalaxb.ElemNameParser[models.binding.InputPopulation] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("InputPopulation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InputPopulation] =
      phrase((((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Set")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParameterKey")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParticleType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ChemicalFormula")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AtomicNumber"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => models.binding.InputPopulationSequence1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumParticleType](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationMassNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationChargeState")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationDensity")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationTemperature")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationFlowSpeed")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Distribution")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProductionRate")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TotalProductionRate")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputTableURL")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Profile"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => models.binding.InputPopulationSequence2(p1.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[models.binding.InputValue](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ModelURL"))) ^^ 
        { case p1 => models.binding.InputPopulationSequence3(p1.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.InputPopulation(p1,
        p2,
        p3) })
    
    def writesChildNodes(__obj: models.binding.InputPopulation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.InputPopulationSequence1](__obj.inputpopulationsequence1, None, Some("inputpopulationsequence1"), __scope, false),
        scalaxb.toXML[models.binding.InputPopulationSequence2](__obj.inputpopulationsequence2, None, Some("inputpopulationsequence2"), __scope, false),
        scalaxb.toXML[models.binding.InputPopulationSequence3](__obj.inputpopulationsequence3, None, Some("inputpopulationsequence3"), __scope, false))

  }

  trait DefaultBindingInputPopulationSequence3Format extends scalaxb.XMLFormat[models.binding.InputPopulationSequence3] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.InputPopulationSequence3] = Left("don't call me.")
    
    def writes(__obj: models.binding.InputPopulationSequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      __obj.ModelURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ModelURL"), __scope, false) } getOrElse {Nil}


  }

  trait DefaultBindingInputPopulationSequence2Format extends scalaxb.XMLFormat[models.binding.InputPopulationSequence2] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.InputPopulationSequence2] = Left("don't call me.")
    
    def writes(__obj: models.binding.InputPopulationSequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.PopulationMassNumber map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationMassNumber"), __scope, false) } getOrElse {Nil},
        __obj.PopulationChargeState map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationChargeState"), __scope, false) } getOrElse {Nil},
        __obj.PopulationDensity map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationDensity"), __scope, false) } getOrElse {Nil},
        __obj.PopulationTemperature map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationTemperature"), __scope, false) } getOrElse {Nil},
        __obj.PopulationFlowSpeed map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationFlowSpeed"), __scope, false) } getOrElse {Nil},
        __obj.Distribution map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Distribution"), __scope, false) } getOrElse {Nil},
        __obj.ProductionRate map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProductionRate"), __scope, false) } getOrElse {Nil},
        __obj.TotalProductionRate map { scalaxb.toXML[models.binding.InputValue](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TotalProductionRate"), __scope, false) } getOrElse {Nil},
        __obj.InputTableURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputTableURL"), __scope, false) } getOrElse {Nil},
        __obj.Profile map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Profile"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultBindingInputPopulationSequence1Format extends scalaxb.XMLFormat[models.binding.InputPopulationSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.InputPopulationSequence1] = Left("don't call me.")
    
    def writes(__obj: models.binding.InputPopulationSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false),
        __obj.Set flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Set"), __scope, false) },
        __obj.ParameterKey map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParameterKey"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[models.binding.EnumParticleType](__obj.ParticleType, Some("http://impex-fp7.oeaw.ac.at"), Some("ParticleType"), __scope, false),
        __obj.ChemicalFormula map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ChemicalFormula"), __scope, false) } getOrElse {Nil},
        __obj.AtomicNumber map { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AtomicNumber"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultBindingInputFieldFormat extends scalaxb.ElemNameParser[models.binding.InputField] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("InputField")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InputField] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Set")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParameterKey")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinateSystem")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FieldQuantity")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "UnitsConversion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputLabel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FieldValue")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "InputTableURL")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMin")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMax")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FieldModel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ModelURL")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      models.binding.InputField(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.CoordinateSystemType](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumFieldQuantity](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.InputField, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false),
        __obj.Set flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Set"), __scope, false) },
        __obj.ParameterKey map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParameterKey"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        __obj.CoordinateSystem map { scalaxb.toXML[models.binding.CoordinateSystemType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinateSystem"), __scope, false) } getOrElse {Nil},
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[models.binding.EnumFieldQuantity](__obj.FieldQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("FieldQuantity"), __scope, false),
        __obj.Units map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false) } getOrElse {Nil},
        __obj.UnitsConversion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("UnitsConversion"), __scope, false) } getOrElse {Nil},
        __obj.InputLabel map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputLabel"), __scope, false) } getOrElse {Nil},
        __obj.FieldValue map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FieldValue"), __scope, false) } getOrElse {Nil},
        __obj.InputTableURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("InputTableURL"), __scope, false) } getOrElse {Nil},
        __obj.ValidMin map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMin"), __scope, false) } getOrElse {Nil},
        __obj.ValidMax map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMax"), __scope, false) } getOrElse {Nil},
        __obj.FieldModel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FieldModel"), __scope, false) } getOrElse {Nil},
        __obj.ModelURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ModelURL"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingInputProcessFormat extends scalaxb.ElemNameParser[models.binding.InputProcess] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("InputProcess")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InputProcess] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Name")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Set")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParameterKey")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SimulatedRegion")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "UnitsConversion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessCoefficient")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessCoeffType")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ProcessModel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ModelURL")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      models.binding.InputProcess(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumProcessType](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[models.binding.EnumProcCoefType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.InputProcess, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://impex-fp7.oeaw.ac.at"), Some("Name"), __scope, false),
        __obj.Set flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Set"), __scope, false) },
        __obj.ParameterKey map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParameterKey"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.SimulatedRegion flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SimulatedRegion"), __scope, false) },
        scalaxb.toXML[models.binding.EnumProcessType](__obj.ProcessType, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessType"), __scope, false),
        __obj.Units map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false) } getOrElse {Nil},
        __obj.UnitsConversion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("UnitsConversion"), __scope, false) } getOrElse {Nil},
        __obj.ProcessCoefficient map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessCoefficient"), __scope, false) } getOrElse {Nil},
        __obj.ProcessCoeffType map { scalaxb.toXML[models.binding.EnumProcCoefType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessCoeffType"), __scope, false) } getOrElse {Nil},
        __obj.ProcessModel map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ProcessModel"), __scope, false) } getOrElse {Nil},
        __obj.ModelURL map { scalaxb.toXML[java.net.URI](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ModelURL"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingSimulationDomainFormat extends scalaxb.ElemNameParser[models.binding.SimulationDomain] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("SimulationDomain")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SimulationDomain] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinateSystem")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SpatialDimension")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "VelocityDimension")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FieldDimension")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "UnitsConversion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinatesLabel")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMin")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ValidMax")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "GridStructure")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "GridCellSize")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Symmetry")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "BoundaryConditions")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      models.binding.SimulationDomain(scalaxb.fromXML[models.binding.CoordinateSystemType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigInt](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Seq[Float]](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[models.binding.EnumSymmetry](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[models.binding.BoundaryConditions](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SimulationDomain, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[models.binding.CoordinateSystemType](__obj.CoordinateSystem, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinateSystem"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigInt](__obj.SpatialDimension, Some("http://impex-fp7.oeaw.ac.at"), Some("SpatialDimension"), __scope, false),
        __obj.VelocityDimension map { scalaxb.toXML[BigInt](_, Some("http://impex-fp7.oeaw.ac.at"), Some("VelocityDimension"), __scope, false) } getOrElse {Nil},
        __obj.FieldDimension map { scalaxb.toXML[BigInt](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FieldDimension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.Units, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false),
        __obj.UnitsConversion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("UnitsConversion"), __scope, false) } getOrElse {Nil},
        __obj.CoordinatesLabel map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinatesLabel"), __scope, false) } getOrElse {Nil},
        __obj.ValidMin map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMin"), __scope, false) } getOrElse {Nil},
        __obj.ValidMax map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ValidMax"), __scope, false) } getOrElse {Nil},
        __obj.GridStructure map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("GridStructure"), __scope, false) } getOrElse {Nil},
        __obj.GridCellSize map { scalaxb.toXML[Seq[Float]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("GridCellSize"), __scope, false) } getOrElse {Nil},
        __obj.Symmetry map { scalaxb.toXML[models.binding.EnumSymmetry](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Symmetry"), __scope, false) } getOrElse {Nil},
        __obj.BoundaryConditions map { scalaxb.toXML[models.binding.BoundaryConditions](_, Some("http://impex-fp7.oeaw.ac.at"), Some("BoundaryConditions"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingBoundaryConditionsFormat extends scalaxb.ElemNameParser[models.binding.BoundaryConditions] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("BoundaryConditions")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.BoundaryConditions] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParticleBoundary")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FieldBoundary")) ^^
      { case p1 ~ p2 =>
      models.binding.BoundaryConditions(p1.headOption map { scalaxb.fromXML[models.binding.ElementBoundary](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.ElementBoundary](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.BoundaryConditions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ParticleBoundary map { scalaxb.toXML[models.binding.ElementBoundary](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParticleBoundary"), __scope, false) } getOrElse {Nil},
        __obj.FieldBoundary map { scalaxb.toXML[models.binding.ElementBoundary](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FieldBoundary"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingSimulationTimeFormat extends scalaxb.ElemNameParser[models.binding.SimulationTime] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("SimulationTime")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SimulationTime] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Duration")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TimeStart")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TimeStop")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "TimeStep")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "DiagnosisTimeStep")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.SimulationTime(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[models.binding.DiagnosisTimeStep](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SimulationTime, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Description map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.Duration map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Duration"), __scope, false) } getOrElse {Nil},
        __obj.TimeStart map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TimeStart"), __scope, false) } getOrElse {Nil},
        __obj.TimeStop map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TimeStop"), __scope, false) } getOrElse {Nil},
        __obj.TimeStep map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://impex-fp7.oeaw.ac.at"), Some("TimeStep"), __scope, false) } getOrElse {Nil},
        __obj.DiagnosisTimeStep map { scalaxb.toXML[models.binding.DiagnosisTimeStep](_, Some("http://impex-fp7.oeaw.ac.at"), Some("DiagnosisTimeStep"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingDiagnosisTimeStepFormat extends scalaxb.ElemNameParser[models.binding.DiagnosisTimeStep] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("DiagnosisTimeStep")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.DiagnosisTimeStep] =
      phrase(rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SavedQuantity")) ^^
      { case p1 =>
      models.binding.DiagnosisTimeStep(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@TimeStart").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@Duration").headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.DiagnosisTimeStep, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.TimeStart foreach { x => attr = scala.xml.Attribute(null, "TimeStart", x.toString, attr) }
      __obj.Duration foreach { x => attr = scala.xml.Attribute(null, "Duration", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.DiagnosisTimeStep, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.SavedQuantity flatMap { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SavedQuantity"), __scope, false) })

  }

  trait DefaultBindingElementBoundaryFormat extends scalaxb.ElemNameParser[models.binding.ElementBoundary] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("ElementBoundary")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.ElementBoundary] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Caveats")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "FrontWall")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "BackWall")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "SideWall")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Obstacle")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.ElementBoundary(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.ElementBoundary, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Caveats map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Caveats"), __scope, false) } getOrElse {Nil},
        __obj.FrontWall map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("FrontWall"), __scope, false) } getOrElse {Nil},
        __obj.BackWall map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("BackWall"), __scope, false) } getOrElse {Nil},
        __obj.SideWall map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("SideWall"), __scope, false) } getOrElse {Nil},
        __obj.Obstacle map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Obstacle"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingSpatialDescriptionFormat extends scalaxb.ElemNameParser[models.binding.SpatialDescription] with BindingCutsDescriptionGroupFormat with BindingCubesDescriptionGroupFormat {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("SpatialDescription")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.SpatialDescription] =
      phrase((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Dimension")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinateSystem")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "UnitsConversion")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "CoordinatesLabel")) ~ 
      ((parseCutsDescriptionGroup(node, scalaxb.ElemName(node) :: stack, true)) ||| 
      (parseCubesDescriptionGroup(node, scalaxb.ElemName(node) :: stack, true))) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Step")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.binding.SpatialDescription(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[models.binding.CoordinateSystemType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Seq[String]](_, scalaxb.ElemName(node) :: stack) },
        p6,
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.SpatialDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.Dimension, Some("http://impex-fp7.oeaw.ac.at"), Some("Dimension"), __scope, false),
        scalaxb.toXML[models.binding.CoordinateSystemType](__obj.CoordinateSystem, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinateSystem"), __scope, false),
        scalaxb.toXML[String](__obj.Units, Some("http://impex-fp7.oeaw.ac.at"), Some("Units"), __scope, false),
        __obj.UnitsConversion map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("UnitsConversion"), __scope, false) } getOrElse {Nil},
        __obj.CoordinatesLabel map { scalaxb.toXML[Seq[String]](_, Some("http://impex-fp7.oeaw.ac.at"), Some("CoordinatesLabel"), __scope, false) } getOrElse {Nil},
        Some(__obj.spatialdescriptionoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)} get,
        __obj.Step map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Step"), __scope, false) } getOrElse {Nil})

  }

  def buildBindingEnumProcessTypeFormat = new DefaultBindingEnumProcessTypeFormat {}
  trait DefaultBindingEnumProcessTypeFormat extends scalaxb.XMLFormat[models.binding.EnumProcessType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumProcessType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumProcessType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumProcessType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumProcessType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumProcCoefTypeFormat = new DefaultBindingEnumProcCoefTypeFormat {}
  trait DefaultBindingEnumProcCoefTypeFormat extends scalaxb.XMLFormat[models.binding.EnumProcCoefType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumProcCoefType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumProcCoefType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumProcCoefType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumProcCoefType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumSymmetryFormat = new DefaultBindingEnumSymmetryFormat {}
  trait DefaultBindingEnumSymmetryFormat extends scalaxb.XMLFormat[models.binding.EnumSymmetry] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumSymmetry] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumSymmetry.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumSymmetry.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumSymmetry, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumYNFormat = new DefaultBindingEnumYNFormat {}
  trait DefaultBindingEnumYNFormat extends scalaxb.XMLFormat[models.binding.EnumYN] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumYN] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumYN.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumYN.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumYN, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumSimulationTypeFormat = new DefaultBindingEnumSimulationTypeFormat {}
  trait DefaultBindingEnumSimulationTypeFormat extends scalaxb.XMLFormat[models.binding.EnumSimulationType] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumSimulationType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumSimulationType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumSimulationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumSimulationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumProductFormat = new DefaultBindingEnumProductFormat {}
  trait DefaultBindingEnumProductFormat extends scalaxb.XMLFormat[models.binding.EnumProduct] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumProduct] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumProduct.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumProduct.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumProduct, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingEnumImpexQuantityFormat = new DefaultBindingEnumImpexQuantityFormat {}
  trait DefaultBindingEnumImpexQuantityFormat extends scalaxb.XMLFormat[models.binding.EnumImpexQuantity] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EnumImpexQuantity] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EnumImpexQuantity.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EnumImpexQuantity.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EnumImpexQuantity, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  trait DefaultBindingParticleFormat extends scalaxb.ElemNameParser[models.binding.Particle] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("Particle")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Particle] =
      phrase(opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationID")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParticleType")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "Qualifier")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ParticleQuantity")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "ChemicalFormula")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AtomicNumber")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationMassNumber")) ~ 
      rep(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PopulationChargeState")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "EnergyRange")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "AzimuthalAngleRange")) ~ 
      opt(scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PolarAngleRange")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      models.binding.Particle(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[models.binding.EnumParticleType](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[models.binding.EnumQualifier](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.EnumParticleQuantity](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[Double](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[models.binding.EnergyRange](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[models.binding.AzimuthalAngleRange](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[models.binding.PolarAngleRange](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Particle, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.PopulationID map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationID"), __scope, false) } getOrElse {Nil},
        __obj.ParticleType flatMap { scalaxb.toXML[models.binding.EnumParticleType](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ParticleType"), __scope, false) },
        __obj.Qualifier flatMap { scalaxb.toXML[models.binding.EnumQualifier](_, Some("http://impex-fp7.oeaw.ac.at"), Some("Qualifier"), __scope, false) },
        scalaxb.toXML[models.binding.EnumParticleQuantity](__obj.ParticleQuantity, Some("http://impex-fp7.oeaw.ac.at"), Some("ParticleQuantity"), __scope, false),
        __obj.ChemicalFormula map { scalaxb.toXML[String](_, Some("http://impex-fp7.oeaw.ac.at"), Some("ChemicalFormula"), __scope, false) } getOrElse {Nil},
        __obj.AtomicNumber flatMap { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AtomicNumber"), __scope, false) },
        __obj.PopulationMassNumber flatMap { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationMassNumber"), __scope, false) },
        __obj.PopulationChargeState flatMap { scalaxb.toXML[Double](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PopulationChargeState"), __scope, false) },
        __obj.EnergyRange map { scalaxb.toXML[models.binding.EnergyRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("EnergyRange"), __scope, false) } getOrElse {Nil},
        __obj.AzimuthalAngleRange map { scalaxb.toXML[models.binding.AzimuthalAngleRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("AzimuthalAngleRange"), __scope, false) } getOrElse {Nil},
        __obj.PolarAngleRange map { scalaxb.toXML[models.binding.PolarAngleRange](_, Some("http://impex-fp7.oeaw.ac.at"), Some("PolarAngleRange"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBindingInputValueFormat extends scalaxb.ElemNameParser[models.binding.InputValue] {
    val targetNamespace: Option[String] = Some("http://impex-fp7.oeaw.ac.at")
    
    override def typeName: Option[String] = Some("InputValue")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.InputValue] =
      phrase(optTextRecord ^^
      { case p1 =>
      models.binding.InputValue(Seq.concat(p1.toList),
        (node \ "@Units").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@UnitsConversion").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.InputValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.Units foreach { x => attr = scala.xml.Attribute(null, "Units", x.toString, attr) }
      __obj.UnitsConversion foreach { x => attr = scala.xml.Attribute(null, "UnitsConversion", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.InputValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }


  trait BindingCubesDescriptionGroupFormat extends scalaxb.AnyElemNameParser {
    def parseCubesDescriptionGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CubesDescriptionSequence] =
      (((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionBegin")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionEnd"))) ^^ 
        { case p1 ~ p2 => models.binding.CubesDescriptionSequence(scalaxb.fromXML[Seq[Float]](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Seq[Float]](p2, scalaxb.ElemName(node) :: stack)) })
  
    def parseCubesDescriptionGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      (((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionBegin")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionEnd"))) ^^ 
        { case p1 ~ p2 => scalaxb.DataRecord(models.binding.CubesDescriptionSequence(scalaxb.fromXML[Seq[Float]](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Seq[Float]](p2, scalaxb.ElemName(node) :: stack))) })
    
    def parsemixedCubesDescriptionGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      ((((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionBegin")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord ~ 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "RegionEnd")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => Seq.concat(Seq(p1),
        p2.toList,
        Seq(p3),
        p4.toList) })
  }

  trait DefaultBindingCubesDescriptionSequenceFormat extends scalaxb.XMLFormat[models.binding.CubesDescriptionSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.CubesDescriptionSequence] = Left("don't call me.")
    
    def writes(__obj: models.binding.CubesDescriptionSequence, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Seq[Float]](__obj.RegionBegin, Some("http://impex-fp7.oeaw.ac.at"), Some("RegionBegin"), __scope, false),
        scalaxb.toXML[Seq[Float]](__obj.RegionEnd, Some("http://impex-fp7.oeaw.ac.at"), Some("RegionEnd"), __scope, false))


  }


/** Substitution group to use with 3D simulation products
*/
  trait BindingCutsDescriptionGroupFormat extends scalaxb.AnyElemNameParser {
    def parseCutsDescriptionGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.CutsDescriptionSequence] =
      (((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PlaneNormalVector")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PlanePoint"))) ^^ 
        { case p1 ~ p2 => models.binding.CutsDescriptionSequence(scalaxb.fromXML[Seq[Float]](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Seq[Float]](p2, scalaxb.ElemName(node) :: stack)) })
  
    def parseCutsDescriptionGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      (((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PlaneNormalVector")) ~ 
      (scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PlanePoint"))) ^^ 
        { case p1 ~ p2 => scalaxb.DataRecord(models.binding.CutsDescriptionSequence(scalaxb.fromXML[Seq[Float]](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Seq[Float]](p2, scalaxb.ElemName(node) :: stack))) })
    
    def parsemixedCutsDescriptionGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      ((((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PlaneNormalVector")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Seq[Float]](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord ~ 
      ((scalaxb.ElemName(Some("http://impex-fp7.oeaw.ac.at"), "PlanePoint")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Seq[Float]](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => Seq.concat(Seq(p1),
        p2.toList,
        Seq(p3),
        p4.toList) })
  }

  trait DefaultBindingCutsDescriptionSequenceFormat extends scalaxb.XMLFormat[models.binding.CutsDescriptionSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.CutsDescriptionSequence] = Left("don't call me.")
    
    def writes(__obj: models.binding.CutsDescriptionSequence, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Seq[Float]](__obj.PlaneNormalVector, Some("http://impex-fp7.oeaw.ac.at"), Some("PlaneNormalVector"), __scope, false),
        scalaxb.toXML[Seq[Float]](__obj.PlanePoint, Some("http://impex-fp7.oeaw.ac.at"), Some("PlanePoint"), __scope, false))


  }

  trait DefaultBindingAnyTEXTFormat extends scalaxb.ElemNameParser[models.binding.AnyTEXT] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    override def typeName: Option[String] = Some("anyTEXT")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.AnyTEXT] =
      phrase(optTextRecord ~ 
      rep(((any(_ => true) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~ 
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) }) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.AnyTEXT(Seq.concat(p1.toList,
        p2.flatten,
        p3.toList)) })
    
    def writesChildNodes(__obj: models.binding.AnyTEXT, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  def buildBindingEncodingTypeFormat = new DefaultBindingEncodingTypeFormat {}
  trait DefaultBindingEncodingTypeFormat extends scalaxb.XMLFormat[models.binding.EncodingType] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.EncodingType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.EncodingType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.EncodingType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.EncodingType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingDataTypeFormat = new DefaultBindingDataTypeFormat {}
  trait DefaultBindingDataTypeFormat extends scalaxb.XMLFormat[models.binding.DataType] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.DataType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.DataType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.DataType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.DataType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingYesnoFormat = new DefaultBindingYesnoFormat {}
  trait DefaultBindingYesnoFormat extends scalaxb.XMLFormat[models.binding.Yesno] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Yesno] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.Yesno.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.Yesno.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.Yesno, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  trait DefaultBindingMinFormat extends scalaxb.XMLFormat[models.binding.Min] with scalaxb.CanWriteChildNodes[models.binding.Min] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Min] = seq match {
      case node: scala.xml.Node => Right(models.binding.Min(scalaxb.fromXML[String]((node \ "@value"), scalaxb.ElemName(node) :: stack),
        (node \ "@inclusive").headOption map { scalaxb.fromXML[models.binding.Yesno](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[models.binding.Yesno](scala.xml.Text("yes"), scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: models.binding.Min, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "value", __obj.valueAttribute.toString, attr)
      if (__obj.inclusive.toString != "yes") attr = scala.xml.Attribute(null, "inclusive", __obj.inclusive.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Min, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultBindingMaxFormat extends scalaxb.XMLFormat[models.binding.Max] with scalaxb.CanWriteChildNodes[models.binding.Max] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Max] = seq match {
      case node: scala.xml.Node => Right(models.binding.Max(scalaxb.fromXML[String]((node \ "@value"), scalaxb.ElemName(node) :: stack),
        (node \ "@inclusive").headOption map { scalaxb.fromXML[models.binding.Yesno](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[models.binding.Yesno](scala.xml.Text("yes"), scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: models.binding.Max, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "value", __obj.valueAttribute.toString, attr)
      if (__obj.inclusive.toString != "yes") attr = scala.xml.Attribute(null, "inclusive", __obj.inclusive.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Max, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultBindingOptionTypeFormat extends scalaxb.ElemNameParser[models.binding.OptionType] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    override def typeName: Option[String] = Some("Option")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.OptionType] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "OPTION")) ^^
      { case p1 =>
      models.binding.OptionType(p1.toSeq map { scalaxb.fromXML[models.binding.OptionType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@value"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.OptionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      attr = scala.xml.Attribute(null, "value", __obj.valueAttribute.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.OptionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.OPTION flatMap { scalaxb.toXML[models.binding.OptionType](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("OPTION"), __scope, false) })

  }

  def buildBindingTypeFormat = new DefaultBindingTypeFormat {}
  trait DefaultBindingTypeFormat extends scalaxb.XMLFormat[models.binding.Type] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Type] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.Type.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.Type.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.Type, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  trait DefaultBindingValuesFormat extends scalaxb.ElemNameParser[models.binding.Values] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    override def typeName: Option[String] = Some("Values")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Values] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "MIN")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "MAX")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "OPTION")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.Values(p1.headOption map { scalaxb.fromXML[models.binding.Min](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.Max](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[models.binding.OptionType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ID").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@type").headOption map { scalaxb.fromXML[models.binding.Type](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[models.binding.Type](scala.xml.Text("legal"), scalaxb.ElemName(node) :: stack) },
        (node \ "@null").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ref").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.Values, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.ID foreach { x => attr = scala.xml.Attribute(null, "ID", x.toString, attr) }
      if (__obj.typeValue.toString != "legal") attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      __obj.nullValue foreach { x => attr = scala.xml.Attribute(null, "null", x.toString, attr) }
      __obj.ref foreach { x => attr = scala.xml.Attribute(null, "ref", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.Values, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.MIN map { scalaxb.toXML[models.binding.Min](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("MIN"), __scope, false) } getOrElse {Nil},
        __obj.MAX map { scalaxb.toXML[models.binding.Max](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("MAX"), __scope, false) } getOrElse {Nil},
        __obj.OPTION flatMap { scalaxb.toXML[models.binding.OptionType](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("OPTION"), __scope, false) })

  }

  trait DefaultBindingLinkFormat extends scalaxb.XMLFormat[models.binding.Link] with scalaxb.CanWriteChildNodes[models.binding.Link] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Link] = seq match {
      case node: scala.xml.Node => Right(models.binding.Link((node \ "@ID").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@content-role").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@content-type").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@title").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@value").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@href").headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@gref").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@action").headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: models.binding.Link, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.ID foreach { x => attr = scala.xml.Attribute(null, "ID", x.toString, attr) }
      __obj.contentu45role foreach { x => attr = scala.xml.Attribute(null, "content-role", x.toString, attr) }
      __obj.contentu45type foreach { x => attr = scala.xml.Attribute(null, "content-type", x.toString, attr) }
      __obj.title foreach { x => attr = scala.xml.Attribute(null, "title", x.toString, attr) }
      __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
      __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
      __obj.gref foreach { x => attr = scala.xml.Attribute(null, "gref", x.toString, attr) }
      __obj.action foreach { x => attr = scala.xml.Attribute(null, "action", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.Link, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultBindingInfoFormat extends scalaxb.XMLFormat[models.binding.Info] with scalaxb.CanWriteChildNodes[models.binding.Info] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Info] = seq match {
      case node: scala.xml.Node => Right(models.binding.Info(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        (node \ "@ID").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@value"), scalaxb.ElemName(node) :: stack),
        (node \ "@unit").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@xtype").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ref").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ucd").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@utype").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: models.binding.Info, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.ID foreach { x => attr = scala.xml.Attribute(null, "ID", x.toString, attr) }
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(null, "value", __obj.valueAttribute.toString, attr)
      __obj.unit foreach { x => attr = scala.xml.Attribute(null, "unit", x.toString, attr) }
      __obj.xtype foreach { x => attr = scala.xml.Attribute(null, "xtype", x.toString, attr) }
      __obj.ref foreach { x => attr = scala.xml.Attribute(null, "ref", x.toString, attr) }
      __obj.ucd foreach { x => attr = scala.xml.Attribute(null, "ucd", x.toString, attr) }
      __obj.utype foreach { x => attr = scala.xml.Attribute(null, "utype", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.Info, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  def buildBindingSystemFormat = new DefaultBindingSystemFormat {}
  trait DefaultBindingSystemFormat extends scalaxb.XMLFormat[models.binding.System] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.System] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.System.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.System.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.System, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  trait DefaultBindingCoordinateSystemFormat extends scalaxb.XMLFormat[models.binding.CoordinateSystem] with scalaxb.CanWriteChildNodes[models.binding.CoordinateSystem] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.CoordinateSystem] = seq match {
      case node: scala.xml.Node => Right(models.binding.CoordinateSystem(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@ID"), scalaxb.ElemName(node) :: stack),
        (node \ "@equinox").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@epoch").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@system").headOption map { scalaxb.fromXML[models.binding.System](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[models.binding.System](scala.xml.Text("eq_FK5"), scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: models.binding.CoordinateSystem, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "ID", __obj.ID.toString, attr)
      __obj.equinox foreach { x => attr = scala.xml.Attribute(null, "equinox", x.toString, attr) }
      __obj.epoch foreach { x => attr = scala.xml.Attribute(null, "epoch", x.toString, attr) }
      if (__obj.system.toString != "eq_FK5") attr = scala.xml.Attribute(null, "system", __obj.system.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.CoordinateSystem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultBindingDefinitionsFormat extends scalaxb.ElemNameParser[models.binding.Definitions] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    override def typeName: Option[String] = Some("Definitions")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Definitions] =
      phrase(rep(((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "COOSYS")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.CoordinateSystem](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "PARAM")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Param](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      models.binding.Definitions(p1.toSeq: _*) })
    
    def writesChildNodes(__obj: models.binding.Definitions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.definitionsoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.DefinitionsOption]](x, x.namespace, x.key, __scope, false) })

  }

  def buildBindingTypeTypeFormat = new DefaultBindingTypeTypeFormat {}
  trait DefaultBindingTypeTypeFormat extends scalaxb.XMLFormat[models.binding.TypeType] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.TypeType] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.TypeType.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.TypeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.TypeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  trait DefaultBindingFieldableFormat extends scalaxb.XMLFormat[models.binding.Fieldable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Fieldable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("Param")) => Right(scalaxb.fromXML[models.binding.Param](node, stack))
          case _ => Right(scalaxb.fromXML[models.binding.Field](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: models.binding.Fieldable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: models.binding.Param => scalaxb.toXML[models.binding.Param](x, __namespace, __elementLabel, __scope, true)
      case x: models.binding.Field => scalaxb.toXML[models.binding.Field](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultBindingFieldFormat extends scalaxb.ElemNameParser[models.binding.Field] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    override def typeName: Option[String] = Some("Field")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Field] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "DESCRIPTION")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "VALUES")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "LINK")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.Field(p1.headOption map { scalaxb.fromXML[models.binding.AnyTEXT](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.Values](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[models.binding.Link](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ID").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@unit").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.DataType]((node \ "@datatype"), scalaxb.ElemName(node) :: stack),
        (node \ "@precision").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@width").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@xtype").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ref").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        (node \ "@ucd").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@utype").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@arraysize").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@type").headOption map { scalaxb.fromXML[models.binding.TypeType](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.Field, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.ID foreach { x => attr = scala.xml.Attribute(null, "ID", x.toString, attr) }
      __obj.unit foreach { x => attr = scala.xml.Attribute(null, "unit", x.toString, attr) }
      attr = scala.xml.Attribute(null, "datatype", __obj.datatype.toString, attr)
      __obj.precision foreach { x => attr = scala.xml.Attribute(null, "precision", x.toString, attr) }
      __obj.width foreach { x => attr = scala.xml.Attribute(null, "width", x.toString, attr) }
      __obj.xtype foreach { x => attr = scala.xml.Attribute(null, "xtype", x.toString, attr) }
      __obj.ref foreach { x => attr = scala.xml.Attribute(null, "ref", x.toString, attr) }
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      __obj.ucd foreach { x => attr = scala.xml.Attribute(null, "ucd", x.toString, attr) }
      __obj.utype foreach { x => attr = scala.xml.Attribute(null, "utype", x.toString, attr) }
      __obj.arraysize foreach { x => attr = scala.xml.Attribute(null, "arraysize", x.toString, attr) }
      __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.Field, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DESCRIPTION map { scalaxb.toXML[models.binding.AnyTEXT](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("DESCRIPTION"), __scope, false) } getOrElse {Nil},
        __obj.VALUES map { scalaxb.toXML[models.binding.Values](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("VALUES"), __scope, false) } getOrElse {Nil},
        __obj.LINK flatMap { scalaxb.toXML[models.binding.Link](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("LINK"), __scope, false) })

  }

  trait DefaultBindingParamFormat extends scalaxb.ElemNameParser[models.binding.Param] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    override def typeName: Option[String] = Some("Param")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Param] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "DESCRIPTION")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "VALUES")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "LINK")) ^^
      { case p1 ~ p2 ~ p3 =>
      models.binding.Param(p1.headOption map { scalaxb.fromXML[models.binding.AnyTEXT](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.Values](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[models.binding.Link](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ID").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@unit").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[models.binding.DataType]((node \ "@datatype"), scalaxb.ElemName(node) :: stack),
        (node \ "@precision").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@width").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@xtype").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ref").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        (node \ "@ucd").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@utype").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@arraysize").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@type").headOption map { scalaxb.fromXML[models.binding.TypeType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@value"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: models.binding.Param, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.ID foreach { x => attr = scala.xml.Attribute(null, "ID", x.toString, attr) }
      __obj.unit foreach { x => attr = scala.xml.Attribute(null, "unit", x.toString, attr) }
      attr = scala.xml.Attribute(null, "datatype", __obj.datatype.toString, attr)
      __obj.precision foreach { x => attr = scala.xml.Attribute(null, "precision", x.toString, attr) }
      __obj.width foreach { x => attr = scala.xml.Attribute(null, "width", x.toString, attr) }
      __obj.xtype foreach { x => attr = scala.xml.Attribute(null, "xtype", x.toString, attr) }
      __obj.ref foreach { x => attr = scala.xml.Attribute(null, "ref", x.toString, attr) }
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      __obj.ucd foreach { x => attr = scala.xml.Attribute(null, "ucd", x.toString, attr) }
      __obj.utype foreach { x => attr = scala.xml.Attribute(null, "utype", x.toString, attr) }
      __obj.arraysize foreach { x => attr = scala.xml.Attribute(null, "arraysize", x.toString, attr) }
      __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
      attr = scala.xml.Attribute(null, "value", __obj.valueAttribute.toString, attr)
      attr
    }

    def writesChildNodes(__obj: models.binding.Param, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DESCRIPTION map { scalaxb.toXML[models.binding.AnyTEXT](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("DESCRIPTION"), __scope, false) } getOrElse {Nil},
        __obj.VALUES map { scalaxb.toXML[models.binding.Values](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("VALUES"), __scope, false) } getOrElse {Nil},
        __obj.LINK flatMap { scalaxb.toXML[models.binding.Link](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("LINK"), __scope, false) })

  }

  trait DefaultBindingGroupFormat extends scalaxb.ElemNameParser[models.binding.Group] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    override def typeName: Option[String] = Some("Group")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Group] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "DESCRIPTION")) ~ 
      rep(((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "FIELDref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.FieldRef](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "PARAMref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.ParamRef](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "PARAM")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Param](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "GROUP")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Group](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 ~ p2 =>
      models.binding.Group(p1.headOption map { scalaxb.fromXML[models.binding.AnyTEXT](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq,
        (node \ "@ID").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ref").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ucd").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@utype").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.Group, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.ID foreach { x => attr = scala.xml.Attribute(null, "ID", x.toString, attr) }
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      __obj.ref foreach { x => attr = scala.xml.Attribute(null, "ref", x.toString, attr) }
      __obj.ucd foreach { x => attr = scala.xml.Attribute(null, "ucd", x.toString, attr) }
      __obj.utype foreach { x => attr = scala.xml.Attribute(null, "utype", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.Group, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DESCRIPTION map { scalaxb.toXML[models.binding.AnyTEXT](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("DESCRIPTION"), __scope, false) } getOrElse {Nil},
        __obj.groupoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.GroupOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultBindingFieldRefFormat extends scalaxb.XMLFormat[models.binding.FieldRef] with scalaxb.CanWriteChildNodes[models.binding.FieldRef] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.FieldRef] = seq match {
      case node: scala.xml.Node => Right(models.binding.FieldRef(scalaxb.fromXML[String]((node \ "@ref"), scalaxb.ElemName(node) :: stack),
        (node \ "@ucd").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@utype").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: models.binding.FieldRef, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "ref", __obj.ref.toString, attr)
      __obj.ucd foreach { x => attr = scala.xml.Attribute(null, "ucd", x.toString, attr) }
      __obj.utype foreach { x => attr = scala.xml.Attribute(null, "utype", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.FieldRef, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultBindingParamRefFormat extends scalaxb.XMLFormat[models.binding.ParamRef] with scalaxb.CanWriteChildNodes[models.binding.ParamRef] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.ParamRef] = seq match {
      case node: scala.xml.Node => Right(models.binding.ParamRef(scalaxb.fromXML[String]((node \ "@ref"), scalaxb.ElemName(node) :: stack),
        (node \ "@ucd").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@utype").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: models.binding.ParamRef, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "ref", __obj.ref.toString, attr)
      __obj.ucd foreach { x => attr = scala.xml.Attribute(null, "ucd", x.toString, attr) }
      __obj.utype foreach { x => attr = scala.xml.Attribute(null, "utype", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.ParamRef, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultBindingDataFormat extends scalaxb.ElemNameParser[models.binding.Data] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    override def typeName: Option[String] = Some("Data")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Data] =
      phrase((((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "TABLEDATA")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.TableData](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "BINARY")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Binary](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "FITS")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.FITS](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "INFO")) ^^
      { case p1 ~ p2 =>
      models.binding.Data(p1,
        p2.toSeq map { scalaxb.fromXML[models.binding.Info](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.binding.Data, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(Some(__obj.dataoption) map {x => scalaxb.toXML[scalaxb.DataRecord[models.binding.DataOption]](x, x.namespace, x.key, __scope, false)} get,
        __obj.INFO flatMap { scalaxb.toXML[models.binding.Info](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("INFO"), __scope, false) })

  }

  trait DefaultBindingTableDataFormat extends scalaxb.ElemNameParser[models.binding.TableData] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    override def typeName: Option[String] = Some("TableData")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.TableData] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "TR")) ^^
      { case p1 =>
      models.binding.TableData(p1.toSeq map { scalaxb.fromXML[models.binding.Tr](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: models.binding.TableData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.TR flatMap { scalaxb.toXML[models.binding.Tr](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("TR"), __scope, false) })

  }

  trait DefaultBindingTdFormat extends scalaxb.XMLFormat[models.binding.Td] with scalaxb.CanWriteChildNodes[models.binding.Td] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Td] = seq match {
      case node: scala.xml.Node => Right(models.binding.Td(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        (node \ "@encoding").headOption map { scalaxb.fromXML[models.binding.EncodingType](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: models.binding.Td, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.encoding foreach { x => attr = scala.xml.Attribute(null, "encoding", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.Td, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultBindingTrFormat extends scalaxb.ElemNameParser[models.binding.Tr] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    override def typeName: Option[String] = Some("Tr")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Tr] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "TD")) ^^
      { case p1 =>
      models.binding.Tr(p1.toSeq map { scalaxb.fromXML[models.binding.Td](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ID").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.Tr, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.ID foreach { x => attr = scala.xml.Attribute(null, "ID", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.Tr, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.TD flatMap { scalaxb.toXML[models.binding.Td](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("TD"), __scope, false) })

  }

  trait DefaultBindingFITSFormat extends scalaxb.ElemNameParser[models.binding.FITS] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    override def typeName: Option[String] = Some("FITS")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.FITS] =
      phrase((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "STREAM")) ^^
      { case p1 =>
      models.binding.FITS(scalaxb.fromXML[models.binding.StreamType](p1, scalaxb.ElemName(node) :: stack),
        (node \ "@extnum").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.FITS, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.extnum foreach { x => attr = scala.xml.Attribute(null, "extnum", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.FITS, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[models.binding.StreamType](__obj.STREAM, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("STREAM"), __scope, false))

  }

  trait DefaultBindingBinaryFormat extends scalaxb.ElemNameParser[models.binding.Binary] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    override def typeName: Option[String] = Some("Binary")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Binary] =
      phrase((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "STREAM")) ^^
      { case p1 =>
      models.binding.Binary(scalaxb.fromXML[models.binding.StreamType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.binding.Binary, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[models.binding.StreamType](__obj.STREAM, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("STREAM"), __scope, false))

  }

  def buildBindingTypeType2Format = new DefaultBindingTypeType2Format {}
  trait DefaultBindingTypeType2Format extends scalaxb.XMLFormat[models.binding.TypeType2] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.TypeType2] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.TypeType2.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.TypeType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.TypeType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  def buildBindingActuateFormat = new DefaultBindingActuateFormat {}
  trait DefaultBindingActuateFormat extends scalaxb.XMLFormat[models.binding.Actuate] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Actuate] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.Actuate.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.Actuate.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.Actuate, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  trait DefaultBindingStreamTypeFormat extends scalaxb.XMLFormat[models.binding.StreamType] with scalaxb.CanWriteChildNodes[models.binding.StreamType] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.StreamType] = seq match {
      case node: scala.xml.Node => Right(models.binding.StreamType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        (node \ "@type").headOption map { scalaxb.fromXML[models.binding.TypeType2](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[models.binding.TypeType2](scala.xml.Text("locator"), scalaxb.ElemName(node) :: stack) },
        (node \ "@href").headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@actuate").headOption map { scalaxb.fromXML[models.binding.Actuate](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[models.binding.Actuate](scala.xml.Text("onRequest"), scalaxb.ElemName(node) :: stack) },
        (node \ "@encoding").headOption map { scalaxb.fromXML[models.binding.EncodingType](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[models.binding.EncodingType](scala.xml.Text("none"), scalaxb.ElemName(node) :: stack) },
        (node \ "@expires").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@rights").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: models.binding.StreamType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      if (__obj.typeValue.toString != "locator") attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
      if (__obj.actuate.toString != "onRequest") attr = scala.xml.Attribute(null, "actuate", __obj.actuate.toString, attr)
      if (__obj.encoding.toString != "none") attr = scala.xml.Attribute(null, "encoding", __obj.encoding.toString, attr)
      __obj.expires foreach { x => attr = scala.xml.Attribute(null, "expires", x.toString, attr) }
      __obj.rights foreach { x => attr = scala.xml.Attribute(null, "rights", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.StreamType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }
  
  // removed duplicate INFO field
  trait DefaultBindingTableFormat extends scalaxb.ElemNameParser[models.binding.Table] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    override def typeName: Option[String] = Some("Table")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Table] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "DESCRIPTION")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "INFO")) ~ 
      rep(((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "FIELD")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Fieldable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "PARAM")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Param](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "GROUP")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Group](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "LINK")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "DATA")) ^^
      // @FIXME weird Table definition in xsd
      //rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "INFO")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>//~ p6 =>
      models.binding.Table(p1.headOption map { scalaxb.fromXML[models.binding.AnyTEXT](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[models.binding.Info](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq,
        p4.toSeq map { scalaxb.fromXML[models.binding.Link](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[models.binding.Data](_, scalaxb.ElemName(node) :: stack) },
        // @FIXME weird Table definition in xsd
        //p6.toSeq map { scalaxb.fromXML[models.binding.Info](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ID").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ref").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ucd").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@utype").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@nrows").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.Table, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.ID foreach { x => attr = scala.xml.Attribute(null, "ID", x.toString, attr) }
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      __obj.ref foreach { x => attr = scala.xml.Attribute(null, "ref", x.toString, attr) }
      __obj.ucd foreach { x => attr = scala.xml.Attribute(null, "ucd", x.toString, attr) }
      __obj.utype foreach { x => attr = scala.xml.Attribute(null, "utype", x.toString, attr) }
      __obj.nrows foreach { x => attr = scala.xml.Attribute(null, "nrows", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.Table, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DESCRIPTION map { scalaxb.toXML[models.binding.AnyTEXT](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("DESCRIPTION"), __scope, false) } getOrElse {Nil},
        __obj.INFO flatMap { scalaxb.toXML[models.binding.Info](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("INFO"), __scope, false) },
        __obj.tableoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.TableOption]](x, x.namespace, x.key, __scope, false) },
        __obj.LINK flatMap { scalaxb.toXML[models.binding.Link](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("LINK"), __scope, false) },
        __obj.DATA map { scalaxb.toXML[models.binding.Data](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("DATA"), __scope, false) } getOrElse {Nil})//,
        //__obj.INFO flatMap { scalaxb.toXML[models.binding.Info](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("INFO"), __scope, false) })

  }

  def buildBindingTypeType3Format = new DefaultBindingTypeType3Format {}
  trait DefaultBindingTypeType3Format extends scalaxb.XMLFormat[models.binding.TypeType3] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.TypeType3] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.TypeType3.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.TypeType3.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.TypeType3, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  trait DefaultBindingResourceFormat extends scalaxb.ElemNameParser[models.binding.Resource] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    override def typeName: Option[String] = Some("Resource")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.Resource] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "DESCRIPTION")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "INFO")) ~ 
      rep(((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "COOSYS")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.CoordinateSystem](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "GROUP")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Group](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "PARAM")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Param](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep((rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "LINK")) ~ 
      (((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "TABLE")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Table](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "RESOURCE")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Resource](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "INFO"))) ^^ 
        { case p1 ~ p2 ~ p3 => models.binding.ResourceSequence1(p1.toSeq map { scalaxb.fromXML[models.binding.Link](_, scalaxb.ElemName(node) :: stack) },
        p2,
        p3.toSeq map { scalaxb.fromXML[models.binding.Info](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      rep(any(_.namespace != Some("http://www.ivoa.net/xml/VOTable/v1.2"))) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.Resource(p1.headOption map { scalaxb.fromXML[models.binding.AnyTEXT](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[models.binding.Info](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq,
        p4.toSeq,
        p5.toSeq map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ID").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@utype").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@type").headOption map { scalaxb.fromXML[models.binding.TypeType3](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[models.binding.TypeType3](scala.xml.Text("results"), scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap((node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "name" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "ID" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "utype" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "type" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)) })
    
    override def writesAttribute(__obj: models.binding.Resource, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      __obj.ID foreach { x => attr = scala.xml.Attribute(null, "ID", x.toString, attr) }
      __obj.utype foreach { x => attr = scala.xml.Attribute(null, "utype", x.toString, attr) }
      if (__obj.typeValue.toString != "results") attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      __obj.attributes.toList map {
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.Resource, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DESCRIPTION map { scalaxb.toXML[models.binding.AnyTEXT](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("DESCRIPTION"), __scope, false) } getOrElse {Nil},
        __obj.INFO flatMap { scalaxb.toXML[models.binding.Info](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("INFO"), __scope, false) },
        __obj.resourceoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.ResourceOption]](x, x.namespace, x.key, __scope, false) },
        __obj.resourcesequence1 flatMap { scalaxb.toXML[models.binding.ResourceSequence1](_, None, Some("resourcesequence1"), __scope, false) },
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultBindingResourceSequence1Format extends scalaxb.XMLFormat[models.binding.ResourceSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.ResourceSequence1] = Left("don't call me.")
    
    def writes(__obj: models.binding.ResourceSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.LINK flatMap { scalaxb.toXML[models.binding.Link](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("LINK"), __scope, false) },
        Some(__obj.resourceoption2) map {x => scalaxb.toXML[scalaxb.DataRecord[models.binding.ResourceOption2]](x, x.namespace, x.key, __scope, false)} get,
        __obj.INFO flatMap { scalaxb.toXML[models.binding.Info](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("INFO"), __scope, false) })


  }

  def buildBindingVersionFormat = new DefaultBindingVersionFormat {}
  trait DefaultBindingVersionFormat extends scalaxb.XMLFormat[models.binding.Version] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, models.binding.Version] = seq match {
      case elem: scala.xml.Elem => Right(models.binding.Version.fromString(elem.text, elem.scope))
      case _ => Right(models.binding.Version.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.binding.Version, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, false, scala.xml.Text(__obj.toString))
  }

  trait DefaultBindingVOTABLEFormat extends scalaxb.ElemNameParser[models.binding.VOTABLE] {
    val targetNamespace: Option[String] = Some("http://www.ivoa.net/xml/VOTable/v1.2")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.binding.VOTABLE] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "DESCRIPTION")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "DEFINITIONS")) ~ 
      rep(((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "COOSYS")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.CoordinateSystem](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "GROUP")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Group](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "PARAM")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Param](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "INFO")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.binding.Info](x, scalaxb.ElemName(node) :: stack))))) ~ 
      rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "RESOURCE")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ivoa.net/xml/VOTable/v1.2"), "INFO")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      models.binding.VOTABLE(p1.headOption map { scalaxb.fromXML[models.binding.AnyTEXT](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[models.binding.Definitions](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq,
        p4.toSeq map { scalaxb.fromXML[models.binding.Resource](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[models.binding.Info](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ID").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@version").headOption map { scalaxb.fromXML[models.binding.Version](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.binding.VOTABLE, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.ID foreach { x => attr = scala.xml.Attribute(null, "ID", x.toString, attr) }
      __obj.version foreach { x => attr = scala.xml.Attribute(null, "version", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.binding.VOTABLE, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DESCRIPTION map { scalaxb.toXML[models.binding.AnyTEXT](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("DESCRIPTION"), __scope, false) } getOrElse {Nil},
        __obj.DEFINITIONS map { scalaxb.toXML[models.binding.Definitions](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("DEFINITIONS"), __scope, false) } getOrElse {Nil},
        __obj.votableoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[models.binding.VOTABLEOption]](x, x.namespace, x.key, __scope, false) },
        __obj.RESOURCE flatMap { scalaxb.toXML[models.binding.Resource](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("RESOURCE"), __scope, false) },
        __obj.INFO flatMap { scalaxb.toXML[models.binding.Info](_, Some("http://www.ivoa.net/xml/VOTable/v1.2"), Some("INFO"), __scope, false) })

  }


}

