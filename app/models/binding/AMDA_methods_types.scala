// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package models.binding


//case class EmptyElement2()


//case class EmptyAlive()


case class GetObsDataTreeResponseAMDA(success: Option[Boolean] = None,
  WorkSpace: models.binding.WorkSpace)

// shared with CLWEB
//case class GetTimeTablesListType(userID: Option[String] = None,
//  password: Option[String] = None)

// shared with CLWEB
//case class GetTimeTablesListResponseType(success: Option[Boolean] = None,
//  TimeTablesList: Option[java.net.URI] = None)


case class GetParameterList(userID: String,
  password: Option[String] = None)


case class GetParameterListResponse(success: Option[Boolean] = None,
  ParameterList: models.binding.ParameterList)

// @TODO can in fact be shared among all
trait EnumSpacecraft

object EnumSpacecraft {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): EnumSpacecraft = value match {
    case "Cassini_Public" => Cassini_PublicType
    case "Galileo" => GalileoType
    case "Voyager_1" => Voyager_1Type
    case "Voyager_2" => Voyager_2Type
    case "Pioneer_10" => Pioneer_10Type
    case "Pioneer_11" => Pioneer_11Type
    case "PVO" => PVOType
    case "ACE" => ACEType
    case "VEX" => VEXType
    case "MEX" => MEXType
    case "MGS" => MGSType
    case "MAVEN" => MAVENType
    case "MESSENGER" => MESSENGERType
    case "ULYSSES" => ULYSSESType
    case "Stereo-A" => Stereou45AType
    case "Stereo-B" => Stereou45BType
    case "WIND" => WINDType
    case "THEMIS-A" => THEMISu45AType
    case "THEMIS-B" => THEMISu45BType
    case "THEMIS-C" => THEMISu45CType
    case "THEMIS-D" => THEMISu45DType
    case "THEMIS-E" => THEMISu45EType
    case "CLUSTER1" => CLUSTER1Type
    case "CLUSTER2" => CLUSTER2Type
    case "CLUSTER3" => CLUSTER3Type
    case "CLUSTER4" => CLUSTER4Type
    case "DoubleStar1" => DoubleStar1Type
    case "IMP-8" => IMPu458Type
    case "GEOTAIL" => GEOTAILType
    case "POLAR" => POLARType
    case "INTERBALL-Tail" => INTERBALLu45TailType
    case "ISEE-1" => ISEEu451Type
    case "ISEE-2" => ISEEu452Type

  }
}


case object Cassini_PublicType extends EnumSpacecraft { override def toString = "Cassini_Public" }
case object GalileoType extends EnumSpacecraft { override def toString = "Galileo" }
case object Voyager_1Type extends EnumSpacecraft { override def toString = "Voyager_1" }
case object Voyager_2Type extends EnumSpacecraft { override def toString = "Voyager_2" }
case object Pioneer_10Type extends EnumSpacecraft { override def toString = "Pioneer_10" }
case object Pioneer_11Type extends EnumSpacecraft { override def toString = "Pioneer_11" }
case object PVOType extends EnumSpacecraft { override def toString = "PVO" }
case object ACEType extends EnumSpacecraft { override def toString = "ACE" }
case object VEXType extends EnumSpacecraft { override def toString = "VEX" }
case object MEXType extends EnumSpacecraft { override def toString = "MEX" }
case object MGSType extends EnumSpacecraft { override def toString = "MGS" }
case object MAVENType extends EnumSpacecraft { override def toString = "MAVEN" }
case object MESSENGERType extends EnumSpacecraft { override def toString = "MESSENGER" }
case object ULYSSESType extends EnumSpacecraft { override def toString = "ULYSSES" }
case object Stereou45AType extends EnumSpacecraft { override def toString = "Stereo-A" }
case object Stereou45BType extends EnumSpacecraft { override def toString = "Stereo-B" }
case object WINDType extends EnumSpacecraft { override def toString = "WIND" }
case object THEMISu45AType extends EnumSpacecraft { override def toString = "THEMIS-A" }
case object THEMISu45BType extends EnumSpacecraft { override def toString = "THEMIS-B" }
case object THEMISu45CType extends EnumSpacecraft { override def toString = "THEMIS-C" }
case object THEMISu45DType extends EnumSpacecraft { override def toString = "THEMIS-D" }
case object THEMISu45EType extends EnumSpacecraft { override def toString = "THEMIS-E" }
case object CLUSTER1Type extends EnumSpacecraft { override def toString = "CLUSTER1" }
case object CLUSTER2Type extends EnumSpacecraft { override def toString = "CLUSTER2" }
case object CLUSTER3Type extends EnumSpacecraft { override def toString = "CLUSTER3" }
case object CLUSTER4Type extends EnumSpacecraft { override def toString = "CLUSTER4" }
case object DoubleStar1Type extends EnumSpacecraft { override def toString = "DoubleStar1" }
case object IMPu458Type extends EnumSpacecraft { override def toString = "IMP-8" }
case object GEOTAILType extends EnumSpacecraft { override def toString = "GEOTAIL" }
case object POLARType extends EnumSpacecraft { override def toString = "POLAR" }
case object INTERBALLu45TailType extends EnumSpacecraft { override def toString = "INTERBALL-Tail" }
case object ISEEu451Type extends EnumSpacecraft { override def toString = "ISEE-1" }
case object ISEEu452Type extends EnumSpacecraft { override def toString = "ISEE-2" }

trait WorkSpaceValue

object WorkSpaceValue {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): WorkSpaceValue = value match {
    case "TimeTables" => TimeTables
    case "UserDefinedParameters" => UserDefinedParameters
    case "LocalDataBaseParameters" => LocalDataBaseParameters
    case "RemoteDataBaseParameters" => RemoteDataBaseParameters

  }
}

case object TimeTables extends WorkSpaceValue { override def toString = "TimeTables" }
case object UserDefinedParameters extends WorkSpaceValue { override def toString = "UserDefinedParameters" }
case object LocalDataBaseParameters extends WorkSpaceValue { override def toString = "LocalDataBaseParameters" }
case object RemoteDataBaseParameters extends WorkSpaceValue { override def toString = "RemoteDataBaseParameters" }

/*trait EnumCoordinateSystemName

object EnumCoordinateSystemName {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): EnumCoordinateSystemName = value match {
    case "CPHIO" => CPHIO
    case "GPHIO" => GPHIO
    case "IPHIO" => IPHIO
    case "EPHIO" => EPHIO
    case "Equatorial" => Equatorial
    case "CGM" => CGM
    case "Carrington" => Carrington
    case "DM" => DM
    case "GEI" => GEI
    case "GEO" => GEO
    case "GSE" => GSE
    case "GSEQ" => GSEQ
    case "GSM" => GSM
    case "HAE" => HAE
    case "HCC" => HCC
    case "HCI" => HCI
    case "HCR" => HCR
    case "HEE" => HEE
    case "HEEQ" => HEEQ
    case "HG" => HG
    case "HGI" => HGI
    case "HPC" => HPC
    case "HPR" => HPR
    case "J2000" => J2000
    case "LGM" => LGM
    case "MAG" => MAG
    case "MFA" => MFA
    case "RTN" => RTN
    case "SC" => SC
    case "SE" => SE
    case "SM" => SM
    case "SR" => SR
    case "SR2" => SR2
    case "SSE" => SSE
    case "SSE_L" => SSE_L
    case "SpacecraftOrbitPlane" => SpacecraftOrbitPlane
    case "WGS84" => WGS84
    case "MSO" => MSO
    case "VSO" => VSO

  }
}

case object CPHIO extends EnumCoordinateSystemName { override def toString = "CPHIO" }
case object GPHIO extends EnumCoordinateSystemName { override def toString = "GPHIO" }
case object IPHIO extends EnumCoordinateSystemName { override def toString = "IPHIO" }
case object EPHIO extends EnumCoordinateSystemName { override def toString = "EPHIO" }
case object Equatorial extends EnumCoordinateSystemName { override def toString = "Equatorial" }
case object CGM extends EnumCoordinateSystemName { override def toString = "CGM" }
case object Carrington extends EnumCoordinateSystemName { override def toString = "Carrington" }
case object DM extends EnumCoordinateSystemName { override def toString = "DM" }
case object GEI extends EnumCoordinateSystemName { override def toString = "GEI" }
case object GEO extends EnumCoordinateSystemName { override def toString = "GEO" }
case object GSE extends EnumCoordinateSystemName { override def toString = "GSE" }
case object GSEQ extends EnumCoordinateSystemName { override def toString = "GSEQ" }
case object GSM extends EnumCoordinateSystemName { override def toString = "GSM" }
case object HAE extends EnumCoordinateSystemName { override def toString = "HAE" }
case object HCC extends EnumCoordinateSystemName { override def toString = "HCC" }
case object HCI extends EnumCoordinateSystemName { override def toString = "HCI" }
case object HCR extends EnumCoordinateSystemName { override def toString = "HCR" }
case object HEE extends EnumCoordinateSystemName { override def toString = "HEE" }
case object HEEQ extends EnumCoordinateSystemName { override def toString = "HEEQ" }
case object HG extends EnumCoordinateSystemName { override def toString = "HG" }
case object HGI extends EnumCoordinateSystemName { override def toString = "HGI" }
case object HPC extends EnumCoordinateSystemName { override def toString = "HPC" }
case object HPR extends EnumCoordinateSystemName { override def toString = "HPR" }
case object J2000 extends EnumCoordinateSystemName { override def toString = "J2000" }
case object LGM extends EnumCoordinateSystemName { override def toString = "LGM" }
case object MAG extends EnumCoordinateSystemName { override def toString = "MAG" }
case object MFA extends EnumCoordinateSystemName { override def toString = "MFA" }
case object RTN extends EnumCoordinateSystemName { override def toString = "RTN" }
case object SC extends EnumCoordinateSystemName { override def toString = "SC" }
case object SE extends EnumCoordinateSystemName { override def toString = "SE" }
case object SM extends EnumCoordinateSystemName { override def toString = "SM" }
case object SR extends EnumCoordinateSystemName { override def toString = "SR" }
case object SR2 extends EnumCoordinateSystemName { override def toString = "SR2" }
case object SSE extends EnumCoordinateSystemName { override def toString = "SSE" }
case object SSE_L extends EnumCoordinateSystemName { override def toString = "SSE_L" }
case object SpacecraftOrbitPlane extends EnumCoordinateSystemName { override def toString = "SpacecraftOrbitPlane" }
case object WGS84 extends EnumCoordinateSystemName { override def toString = "WGS84" }
case object MSO extends EnumCoordinateSystemName { override def toString = "MSO" }
case object VSO extends EnumCoordinateSystemName { override def toString = "VSO" }*/


case class ParameterList(UserDefinedParameters: Option[java.net.URI] = None,
  LocalDataBaseParameters: Option[java.net.URI] = None,
  RemoteDataBaseParameters: Option[java.net.URI] = None)


case class WorkSpace(LocalDataBaseParameters: Option[java.net.URI] = None,
  RemoteDataBaseParameters: Option[java.net.URI] = None)

// is shared with CLWEB
//trait OutputFormatType

/*object OutputFormatType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): OutputFormatType = value match {
    case "netCDF" => NetCDFValue
    case "VOTable" => VOTableValue
    case "ASCII" => ASCIIValue

  }
}

case object NetCDFValue extends OutputFormatType { override def toString = "netCDF" }
case object VOTableValue extends OutputFormatType { override def toString = "VOTable" }
case object ASCIIValue extends OutputFormatType { override def toString = "ASCII" }*/

// is shared with CLWEB
/*trait TimeFormatType

object TimeFormatType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): TimeFormatType = value match {
    case "ISO8601" => ISO8601Value
    case "unixtime" => UnixtimeValue

  }
}

case object ISO8601Value extends TimeFormatType { override def toString = "ISO8601" }
case object UnixtimeValue extends TimeFormatType { override def toString = "unixtime" }*/

// is shared with CLWEB
/*case class GetParameterType(startTime: String,
  stopTime: String,
  parameterID: String,
  sampling: Option[Float] = None,
  userID: Option[String] = None,
  password: Option[String] = None,
  outputFormat: Option[models.binding.OutputFormatType] = None,
  timeFormat: Option[models.binding.TimeFormatType] = None,
  gzip: Option[BigInt] = None)


case class GetParameterResponseType(success: Option[Boolean] = None,
  dataFileURLs: Seq[java.net.URI] = Nil)*/

/* trait OutputFormatType2

object OutputFormatType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): OutputFormatType2 = value match {
    case "netCDF" => NetCDFValue2
    case "VOTable" => VOTableValue2
    case "ASCII" => ASCIIValue2

  }
}

case object NetCDFValue2 extends OutputFormatType2 { override def toString = "netCDF" }
case object VOTableValue2 extends OutputFormatType2 { override def toString = "VOTable" }
case object ASCIIValue2 extends OutputFormatType2 { override def toString = "ASCII" }*/

/*trait TimeFormatType2

object TimeFormatType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): TimeFormatType2 = value match {
    case "ISO8601" => ISO8601Value2
    case "unixtime" => UnixtimeValue2

  }
}

case object ISO8601Value2 extends TimeFormatType2 { override def toString = "ISO8601" }
case object UnixtimeValue2 extends TimeFormatType2 { override def toString = "unixtime" }*/


case class GetDataset(startTime: String,
  stopTime: String,
  datasetID: String,
  sampling: Option[Float] = None,
  userID: Option[String] = None,
  password: Option[String] = None,
  outputFormat: Option[models.binding.OutputFormat] = None,
  timeFormat: Option[models.binding.TimeFormat] = None,
  gzip: Option[BigInt] = None)


case class GetDatasetResponse(success: Option[Boolean] = None,
  dataFileURLs: Seq[java.net.URI] = Nil)

trait Units

object Units {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): Units = value match {
    case "km" => Km
    case "Rs" => Rs
    case "Rj" => Rj
    case "Rca" => Rca
    case "Rga" => Rga
    case "Rio" => Rio
    case "Reu" => Reu
    case "Rv" => Rv
    case "Rm" => Rm
    case "Re" => Re
    case "AU" => AU

  }
}

case object Km extends Units { override def toString = "km" }
case object Rs extends Units { override def toString = "Rs" }
case object Rj extends Units { override def toString = "Rj" }
case object Rca extends Units { override def toString = "Rca" }
case object Rga extends Units { override def toString = "Rga" }
case object Rio extends Units { override def toString = "Rio" }
case object Reu extends Units { override def toString = "Reu" }
case object Rv extends Units { override def toString = "Rv" }
case object Rm extends Units { override def toString = "Rm" }
case object Re extends Units { override def toString = "Re" }
case object AU extends Units { override def toString = "AU" }

/*trait OutputFormatType3

object OutputFormatType3 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): OutputFormatType3 = value match {
    case "netCDF" => NetCDFValue3
    case "VOTable" => VOTableValue3
    case "ASCII" => ASCIIValue3

  }
}

case object NetCDFValue3 extends OutputFormatType3 { override def toString = "netCDF" }
case object VOTableValue3 extends OutputFormatType3 { override def toString = "VOTable" }
case object ASCIIValue3 extends OutputFormatType3 { override def toString = "ASCII" }*/

/*trait TimeFormatType3

object TimeFormatType3 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): TimeFormatType3 = value match {
    case "ISO8601" => ISO8601Value3
    case "unixtime" => UnixtimeValue3

  }
}

case object ISO8601Value3 extends TimeFormatType3 { override def toString = "ISO8601" }
case object UnixtimeValue3 extends TimeFormatType3 { override def toString = "unixtime" }*/


case class GetOrbites(startTime: String,
  stopTime: String,
  spacecraft: models.binding.EnumSpacecraft,
  coordinateSystem: models.binding.EnumCoordinateSystemName,
  units: Option[models.binding.Units] = None,
  sampling: Option[Float] = None,
  userID: Option[String] = None,
  password: Option[String] = None,
  outputFormat: Option[models.binding.OutputFormat] = None,
  timeFormat: Option[models.binding.TimeFormat] = None,
  gzip: Option[BigInt] = None)


case class GetOrbitesResponse(success: Option[Boolean] = None,
  dataFileURLs: Seq[java.net.URI] = Nil)

// is shared with CLWEB
/*case class GetTimeTableType(userID: Option[String] = None,
  password: Option[String] = None,
  ttID: String)


case class GetTimeTableResponseType(success: Option[Boolean] = None,
  ttFileURL: java.net.URI)*/

