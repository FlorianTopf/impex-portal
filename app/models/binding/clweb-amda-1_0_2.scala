// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package models.binding


case class DataRoot(dataCenter: Seq[models.binding.DataCenter] = Nil,
  id: Option[String] = None)


case class DataCenter(datacenteroption: Seq[scalaxb.DataRecord[models.binding.DataCenterOption]] = Nil,
  available: Option[BigInt] = None,
  desc: String,
  group: Option[String] = None,
  id1: Option[String] = None,
  isSimulation: Option[Boolean] = None,
  name: String,
  id: String)

trait DataCenterOption2 extends DataCenterOption
trait DataCenterOption

case class Mission(missionoption: Seq[scalaxb.DataRecord[models.binding.MissionOption]] = Nil,
  att: Option[String] = None,
  available: Option[BigInt] = None,
  desc: String,
  name: String,
  rank: Option[BigInt] = None,
  target: Option[String] = None,
  targets: Option[String] = None,
  id: String) extends DataCenterOption2

trait MissionOption

case class SimulationModel(simulationmodeloption: Seq[scalaxb.DataRecord[models.binding.SimulationModelOption]] = Nil,
  att: Option[String] = None,
  desc: String,
  name: String,
  id: String) extends DataCenterOption with MissionOption

trait SimulationModelOption

case class RunID(runidoption: Seq[scalaxb.DataRecord[models.binding.RunIDOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends SimulationModelOption {
  lazy val FieldValue_Bx = attributes.get("@FieldValue_Bx") map { _.as[String] }
  lazy val FieldValue_By = attributes.get("@FieldValue_By") map { _.as[String] }
  lazy val FieldValue_Bz = attributes.get("@FieldValue_Bz") map { _.as[String] }
  lazy val GridCellSize_X = attributes.get("@GridCellSize_X") map { _.as[BigDecimal] }
  lazy val GridCellSize_Y = attributes.get("@GridCellSize_Y") map { _.as[BigDecimal] }
  lazy val GridCellSize_Z = attributes.get("@GridCellSize_Z") map { _.as[BigDecimal] }
  lazy val LikelihoodRating = attributes("@LikelihoodRating").as[String]
  lazy val ReleaseDate = attributes("@ReleaseDate").as[javax.xml.datatype.XMLGregorianCalendar]
  lazy val SimulationType = attributes("@SimulationType").as[String]
  lazy val SolarUVFlux = attributes.get("@SolarUVFlux") map { _.as[String] }
  lazy val Solar_Wind_Hu45Density = attributes.get("@Solar_Wind_H-Density") map { _.as[String] }
  lazy val Solar_Wind_Hu45FlowSpeed = attributes.get("@Solar_Wind_H-FlowSpeed") map { _.as[String] }
  lazy val Solar_Wind_Hu45Temperature = attributes.get("@Solar_Wind_H-Temperature") map { _.as[String] }
  lazy val Solar_Wind_Heu45Density = attributes.get("@Solar_Wind_He-Density") map { _.as[String] }
  lazy val Solar_Wind_Heu45FlowSpeed = attributes.get("@Solar_Wind_He-FlowSpeed") map { _.as[String] }
  lazy val Solar_Wind_Heu45Temperature = attributes.get("@Solar_Wind_He-Temperature") map { _.as[String] }
  lazy val Solar_Wind_electronsu45Density = attributes.get("@Solar_Wind_electrons-Density") map { _.as[String] }
  lazy val Solar_Wind_electronsu45FlowSpeed = attributes.get("@Solar_Wind_electrons-FlowSpeed") map { _.as[String] }
  lazy val Solar_Wind_electronsu45Temperature = attributes.get("@Solar_Wind_electrons-Temperature") map { _.as[String] }
  lazy val TemporalDependence = attributes("@TemporalDependence").as[String]
  lazy val desc = attributes("@desc").as[String]
  lazy val isDeletable = attributes.get("@isDeletable") map { _.as[Boolean] }
  lazy val name = attributes("@name").as[String]
  lazy val id = attributes("@id").as[String]
}


trait RunIDOption

case class MeasurementType(dataset: Seq[models.binding.Dataset] = Nil,
  desc: String,
  name: String,
  id: String) extends RunIDOption


case class Instrument(dataset: Seq[models.binding.Dataset] = Nil,
  att: Option[String] = None,
  desc: String,
  name: String,
  id: String) extends MissionOption with SimulationModelOption


case class Dataset(parameter: Seq[models.binding.Parameter] = Nil,
  AccessURL: Option[String] = None,
  SimulatedRegion: Option[String] = None,
  att: Option[String] = None,
  coordinateSystem: Option[String] = None,
  dataSource: Option[String] = None,
  dataStart: Option[String] = None,
  dataStop: Option[String] = None,
  desc: Option[String] = None,
  domainUnits: Option[String] = None,
  maxSampling: Option[String] = None,
  name: String,
  rem_id: Option[String] = None,
  sampling: Option[String] = None,
  start: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  stop: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  target: Option[String] = None,
  id: String) extends DataCenterOption2 with RunIDOption


case class Parameter(component: Seq[models.binding.Component] = Nil,
  desc: Option[String] = None,
  display_type: Option[String] = None,
  labels: Option[String] = None,
  name: String,
  needsArgs: Option[BigInt] = None,
  parentID: Option[String] = None,
  size: Option[BigInt] = None,
  units: Option[String] = None,
  varValue: Option[String] = None,
  id: String) extends SimulationModelOption


case class Component(name: String,
  parentID: Option[String] = None,
  varValue: Option[String] = None,
  id: String)

