// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package models

/**
usage:
val obj = scalaxb.fromXML[models.Foo](node)
val document = scalaxb.toXML[models.Foo](obj, "foo", models.defaultScope)
**/
object XMLProtocol extends XMLProtocol { }

trait XMLProtocol extends XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://www.impex.org/2012/configuration.xsd",
    Some("imp") -> "http://www.impex.org/2012/configuration.xsd",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val ModelsDatabaseFormat: XMLFormat[models.Database] = new DefaultModelsDatabaseFormat {}
  implicit lazy val ModelsToolFormat: XMLFormat[models.Tool] = new DefaultModelsToolFormat {}
  implicit lazy val ModelsImpexconfigurationFormat: XMLFormat[models.Impexconfiguration] = new DefaultModelsImpexconfigurationFormat {}
  implicit lazy val ModelsDatabasetypeFormat: XMLFormat[models.Databasetype] = new DefaultModelsDatabasetypeFormat {}

  trait DefaultModelsDatabaseFormat extends ElemNameParser[models.Database] {
    val targetNamespace: Option[String] = Some("http://www.impex.org/2012/configuration.xsd")
    
    def parser(node: scala.xml.Node, stack: List[ElemName]): Parser[models.Database] =
      phrase((ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "name")) ~ 
      opt(ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "description")) ~ 
      rep(((ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "ip")) ^^ 
      (x => DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, ElemName(node) :: stack)))) | 
      ((ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "dns")) ^^ 
      (x => DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, ElemName(node) :: stack))))) ~ 
      opt(ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "methods")) ~ 
      (ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "tree")) ~ 
      rep(ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "protocol")) ~ 
      opt(ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "info")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      models.Database(scalaxb.fromXML[String](p1, ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, ElemName(node) :: stack) },
        p3.toSeq,
        p4.headOption map { scalaxb.fromXML[String](_, ElemName(node) :: stack) },
        scalaxb.fromXML[String](p5, ElemName(node) :: stack),
        p6.toSeq map { scalaxb.fromXML[String](_, ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, ElemName(node) :: stack) },
        (node \ "@type").headOption map { scalaxb.fromXML[models.Databasetype](_, ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: models.Database, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: models.Database, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.name, Some("http://www.impex.org/2012/configuration.xsd"), Some("name"), __scope, false),
        __obj.description map { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.databaseoption flatMap { x => scalaxb.toXML[DataRecord[String]](x, x.namespace, x.key, __scope, false) },
        __obj.methods map { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("methods"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.tree, Some("http://www.impex.org/2012/configuration.xsd"), Some("tree"), __scope, false),
        __obj.protocol flatMap { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("protocol"), __scope, false) },
        __obj.info map { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("info"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultModelsToolFormat extends ElemNameParser[models.Tool] {
    val targetNamespace: Option[String] = Some("http://www.impex.org/2012/configuration.xsd")
    
    def parser(node: scala.xml.Node, stack: List[ElemName]): Parser[models.Tool] =
      phrase((ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "name")) ~ 
      opt(ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "description")) ~ 
      rep(((ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "ip")) ^^ 
      (x => DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, ElemName(node) :: stack)))) | 
      ((ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "dns")) ^^ 
      (x => DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, ElemName(node) :: stack))))) ~ 
      (ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "methods")) ~ 
      rep(ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "protocol")) ~ 
      opt(ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "info")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      models.Tool(scalaxb.fromXML[String](p1, ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, ElemName(node) :: stack) },
        p3.toSeq,
        scalaxb.fromXML[String](p4, ElemName(node) :: stack),
        p5.toSeq map { scalaxb.fromXML[String](_, ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: models.Tool, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.name, Some("http://www.impex.org/2012/configuration.xsd"), Some("name"), __scope, false),
        __obj.description map { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.tooloption flatMap { x => scalaxb.toXML[DataRecord[String]](x, x.namespace, x.key, __scope, false) },
        scalaxb.toXML[String](__obj.methods, Some("http://www.impex.org/2012/configuration.xsd"), Some("methods"), __scope, false),
        __obj.protocol flatMap { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("protocol"), __scope, false) },
        __obj.info map { scalaxb.toXML[String](_, Some("http://www.impex.org/2012/configuration.xsd"), Some("info"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultModelsImpexconfigurationFormat extends ElemNameParser[models.Impexconfiguration] {
    val targetNamespace: Option[String] = Some("http://www.impex.org/2012/configuration.xsd")
    
    def parser(node: scala.xml.Node, stack: List[ElemName]): Parser[models.Impexconfiguration] =
      phrase(rep(((ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "database")) ^^ 
      (x => DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.Database](x, ElemName(node) :: stack)))) | 
      ((ElemName(Some("http://www.impex.org/2012/configuration.xsd"), "tool")) ^^ 
      (x => DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[models.Tool](x, ElemName(node) :: stack))))) ^^
      { case p1 =>
      models.Impexconfiguration(p1.toSeq: _*) })
    
    def writesChildNodes(__obj: models.Impexconfiguration, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.impexconfigurationoption flatMap { x => scalaxb.toXML[DataRecord[models.ImpexconfigurationOption]](x, x.namespace, x.key, __scope, false) })

  }

  def buildModelsDatabasetypeFormat = new DefaultModelsDatabasetypeFormat {}
  trait DefaultModelsDatabasetypeFormat extends XMLFormat[models.Databasetype] {
    val targetNamespace: Option[String] = Some("http://www.impex.org/2012/configuration.xsd")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, models.Databasetype] = seq match {
      case elem: scala.xml.Elem => Right(models.Databasetype.fromString(elem.text, elem.scope))
      case _ => Right(models.Databasetype.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: models.Databasetype, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }


}

